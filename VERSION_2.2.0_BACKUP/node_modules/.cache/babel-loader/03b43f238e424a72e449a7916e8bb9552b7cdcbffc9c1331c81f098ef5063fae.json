{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @module Client\n */\nimport { GRAPH_API_VERSION, GRAPH_BASE_URL } from \"./Constants\";\nimport { CustomAuthenticationProvider } from \"./CustomAuthenticationProvider\";\nimport { GraphRequest } from \"./GraphRequest\";\nimport { HTTPClient } from \"./HTTPClient\";\nimport { HTTPClientFactory } from \"./HTTPClientFactory\";\nimport { validatePolyFilling } from \"./ValidatePolyFilling\";\nexport class Client {\n  /**\n   * @public\n   * @static\n   * To create a client instance with options and initializes the default middleware chain\n   * @param {Options} options - The options for client instance\n   * @returns The Client instance\n   */\n  static init(options) {\n    const clientOptions = {};\n    for (const i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        clientOptions[i] = i === \"authProvider\" ? new CustomAuthenticationProvider(options[i]) : options[i];\n      }\n    }\n    return Client.initWithMiddleware(clientOptions);\n  }\n  /**\n   * @public\n   * @static\n   * To create a client instance with the Client Options\n   * @param {ClientOptions} clientOptions - The options object for initializing the client\n   * @returns The Client instance\n   */\n  static initWithMiddleware(clientOptions) {\n    return new Client(clientOptions);\n  }\n  /**\n   * @private\n   * @constructor\n   * Creates an instance of Client\n   * @param {ClientOptions} clientOptions - The options to instantiate the client object\n   */\n  constructor(clientOptions) {\n    /**\n     * @private\n     * A member which stores the Client instance options\n     */\n    this.config = {\n      baseUrl: GRAPH_BASE_URL,\n      debugLogging: false,\n      defaultVersion: GRAPH_API_VERSION\n    };\n    validatePolyFilling();\n    for (const key in clientOptions) {\n      if (Object.prototype.hasOwnProperty.call(clientOptions, key)) {\n        this.config[key] = clientOptions[key];\n      }\n    }\n    let httpClient;\n    if (clientOptions.authProvider !== undefined && clientOptions.middleware !== undefined) {\n      const error = new Error();\n      error.name = \"AmbiguityInInitialization\";\n      error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain not both\";\n      throw error;\n    } else if (clientOptions.authProvider !== undefined) {\n      httpClient = HTTPClientFactory.createWithAuthenticationProvider(clientOptions.authProvider);\n    } else if (clientOptions.middleware !== undefined) {\n      httpClient = new HTTPClient(...[].concat(clientOptions.middleware));\n    } else {\n      const error = new Error();\n      error.name = \"InvalidMiddlewareChain\";\n      error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain\";\n      throw error;\n    }\n    this.httpClient = httpClient;\n  }\n  /**\n   * @public\n   * Entry point to make requests\n   * @param {string} path - The path string value\n   * @returns The graph request instance\n   */\n  api(path) {\n    return new GraphRequest(this.httpClient, this.config, path);\n  }\n}","map":{"version":3,"names":["GRAPH_API_VERSION","GRAPH_BASE_URL","CustomAuthenticationProvider","GraphRequest","HTTPClient","HTTPClientFactory","validatePolyFilling","Client","init","options","clientOptions","i","Object","prototype","hasOwnProperty","call","initWithMiddleware","constructor","config","baseUrl","debugLogging","defaultVersion","key","httpClient","authProvider","undefined","middleware","error","Error","name","message","createWithAuthenticationProvider","concat","api","path"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/Client.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module Client\n */\n\nimport { GRAPH_API_VERSION, GRAPH_BASE_URL } from \"./Constants\";\nimport { CustomAuthenticationProvider } from \"./CustomAuthenticationProvider\";\nimport { GraphRequest } from \"./GraphRequest\";\nimport { HTTPClient } from \"./HTTPClient\";\nimport { HTTPClientFactory } from \"./HTTPClientFactory\";\nimport { ClientOptions } from \"./IClientOptions\";\nimport { Options } from \"./IOptions\";\nimport { validatePolyFilling } from \"./ValidatePolyFilling\";\n\nexport class Client {\n\t/**\n\t * @private\n\t * A member which stores the Client instance options\n\t */\n\tprivate config: ClientOptions = {\n\t\tbaseUrl: GRAPH_BASE_URL,\n\t\tdebugLogging: false,\n\t\tdefaultVersion: GRAPH_API_VERSION,\n\t};\n\n\t/**\n\t * @private\n\t * A member which holds the HTTPClient instance\n\t */\n\tprivate httpClient: HTTPClient;\n\n\t/**\n\t * @public\n\t * @static\n\t * To create a client instance with options and initializes the default middleware chain\n\t * @param {Options} options - The options for client instance\n\t * @returns The Client instance\n\t */\n\tpublic static init(options: Options): Client {\n\t\tconst clientOptions: ClientOptions = {};\n\t\tfor (const i in options) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(options, i)) {\n\t\t\t\tclientOptions[i] = i === \"authProvider\" ? new CustomAuthenticationProvider(options[i]) : options[i];\n\t\t\t}\n\t\t}\n\t\treturn Client.initWithMiddleware(clientOptions);\n\t}\n\n\t/**\n\t * @public\n\t * @static\n\t * To create a client instance with the Client Options\n\t * @param {ClientOptions} clientOptions - The options object for initializing the client\n\t * @returns The Client instance\n\t */\n\tpublic static initWithMiddleware(clientOptions: ClientOptions): Client {\n\t\treturn new Client(clientOptions);\n\t}\n\n\t/**\n\t * @private\n\t * @constructor\n\t * Creates an instance of Client\n\t * @param {ClientOptions} clientOptions - The options to instantiate the client object\n\t */\n\tprivate constructor(clientOptions: ClientOptions) {\n\t\tvalidatePolyFilling();\n\t\tfor (const key in clientOptions) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(clientOptions, key)) {\n\t\t\t\tthis.config[key] = clientOptions[key];\n\t\t\t}\n\t\t}\n\t\tlet httpClient: HTTPClient;\n\t\tif (clientOptions.authProvider !== undefined && clientOptions.middleware !== undefined) {\n\t\t\tconst error = new Error();\n\t\t\terror.name = \"AmbiguityInInitialization\";\n\t\t\terror.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain not both\";\n\t\t\tthrow error;\n\t\t} else if (clientOptions.authProvider !== undefined) {\n\t\t\thttpClient = HTTPClientFactory.createWithAuthenticationProvider(clientOptions.authProvider);\n\t\t} else if (clientOptions.middleware !== undefined) {\n\t\t\thttpClient = new HTTPClient(...[].concat(clientOptions.middleware));\n\t\t} else {\n\t\t\tconst error = new Error();\n\t\t\terror.name = \"InvalidMiddlewareChain\";\n\t\t\terror.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain\";\n\t\t\tthrow error;\n\t\t}\n\t\tthis.httpClient = httpClient;\n\t}\n\n\t/**\n\t * @public\n\t * Entry point to make requests\n\t * @param {string} path - The path string value\n\t * @returns The graph request instance\n\t */\n\tpublic api(path: string): GraphRequest {\n\t\treturn new GraphRequest(this.httpClient, this.config, path);\n\t}\n}\n"],"mappings":"AAAA;;;;;;AAOA;;;AAIA,SAASA,iBAAiB,EAAEC,cAAc,QAAQ,aAAa;AAC/D,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,iBAAiB,QAAQ,qBAAqB;AAGvD,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,OAAM,MAAOC,MAAM;EAiBlB;;;;;;;EAOO,OAAOC,IAAIA,CAACC,OAAgB;IAClC,MAAMC,aAAa,GAAkB,EAAE;IACvC,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;MACxB,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,OAAO,EAAEE,CAAC,CAAC,EAAE;QACrDD,aAAa,CAACC,CAAC,CAAC,GAAGA,CAAC,KAAK,cAAc,GAAG,IAAIT,4BAA4B,CAACO,OAAO,CAACE,CAAC,CAAC,CAAC,GAAGF,OAAO,CAACE,CAAC,CAAC;;;IAGrG,OAAOJ,MAAM,CAACS,kBAAkB,CAACN,aAAa,CAAC;EAChD;EAEA;;;;;;;EAOO,OAAOM,kBAAkBA,CAACN,aAA4B;IAC5D,OAAO,IAAIH,MAAM,CAACG,aAAa,CAAC;EACjC;EAEA;;;;;;EAMAO,YAAoBP,aAA4B;IAlDhD;;;;IAIQ,KAAAQ,MAAM,GAAkB;MAC/BC,OAAO,EAAElB,cAAc;MACvBmB,YAAY,EAAE,KAAK;MACnBC,cAAc,EAAErB;KAChB;IA2CAM,mBAAmB,EAAE;IACrB,KAAK,MAAMgB,GAAG,IAAIZ,aAAa,EAAE;MAChC,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,aAAa,EAAEY,GAAG,CAAC,EAAE;QAC7D,IAAI,CAACJ,MAAM,CAACI,GAAG,CAAC,GAAGZ,aAAa,CAACY,GAAG,CAAC;;;IAGvC,IAAIC,UAAsB;IAC1B,IAAIb,aAAa,CAACc,YAAY,KAAKC,SAAS,IAAIf,aAAa,CAACgB,UAAU,KAAKD,SAAS,EAAE;MACvF,MAAME,KAAK,GAAG,IAAIC,KAAK,EAAE;MACzBD,KAAK,CAACE,IAAI,GAAG,2BAA2B;MACxCF,KAAK,CAACG,OAAO,GAAG,yIAAyI;MACzJ,MAAMH,KAAK;KACX,MAAM,IAAIjB,aAAa,CAACc,YAAY,KAAKC,SAAS,EAAE;MACpDF,UAAU,GAAGlB,iBAAiB,CAAC0B,gCAAgC,CAACrB,aAAa,CAACc,YAAY,CAAC;KAC3F,MAAM,IAAId,aAAa,CAACgB,UAAU,KAAKD,SAAS,EAAE;MAClDF,UAAU,GAAG,IAAInB,UAAU,CAAC,GAAG,EAAE,CAAC4B,MAAM,CAACtB,aAAa,CAACgB,UAAU,CAAC,CAAC;KACnE,MAAM;MACN,MAAMC,KAAK,GAAG,IAAIC,KAAK,EAAE;MACzBD,KAAK,CAACE,IAAI,GAAG,wBAAwB;MACrCF,KAAK,CAACG,OAAO,GAAG,gIAAgI;MAChJ,MAAMH,KAAK;;IAEZ,IAAI,CAACJ,UAAU,GAAGA,UAAU;EAC7B;EAEA;;;;;;EAMOU,GAAGA,CAACC,IAAY;IACtB,OAAO,IAAI/B,YAAY,CAAC,IAAI,CAACoB,UAAU,EAAE,IAAI,CAACL,MAAM,EAAEgB,IAAI,CAAC;EAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}