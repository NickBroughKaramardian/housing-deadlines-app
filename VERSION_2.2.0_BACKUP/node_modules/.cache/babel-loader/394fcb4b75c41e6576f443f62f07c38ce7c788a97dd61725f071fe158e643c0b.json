{"ast":null,"code":"import{microsoftDataService}from'./microsoftDataService';import{login,logout,getCurrentUser,getAccessToken,handleRedirectPromise}from'./msalService';// User roles\nexport const ROLES={DEVELOPER:'DEVELOPER',OWNER:'OWNER',ADMIN:'ADMIN',EDITOR:'EDITOR',VIEWER:'VIEWER'};// Department constants\nexport const DEPARTMENTS={DEVELOPMENT:'Development',MARKETING:'Marketing',SALES:'Sales',OPERATIONS:'Operations'};export const DEPARTMENT_NAMES=Object.values(DEPARTMENTS);// Permission checking\nexport const hasPermission=(userRole,requiredRole)=>{const roleHierarchy={[ROLES.VIEWER]:0,[ROLES.EDITOR]:1,[ROLES.ADMIN]:2,[ROLES.OWNER]:3,[ROLES.DEVELOPER]:4};return roleHierarchy[userRole]>=roleHierarchy[requiredRole];};// Department detection from responsible party\nexport const getDepartmentFromResponsibleParty=function(responsibleParty){let departmentMappings=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let nameAliases=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];if(!responsibleParty)return null;const party=responsibleParty.toLowerCase().trim();// Check custom mappings first\nfor(const mapping of departmentMappings){if(mapping.term&&party.includes(mapping.term.toLowerCase())){return mapping.department;}}// Check name aliases\nfor(const alias of nameAliases){if(alias.alias&&party.includes(alias.alias.toLowerCase())){// Find the user and get their departments\n// This would need to be implemented with actual user lookup\nreturn'Development';// Default for now\n}}// Check department keywords\nfor(const[key,dept]of Object.entries(DEPARTMENTS)){if(party.includes(dept.toLowerCase())){return dept;}}return null;};// User management functions\nexport const getUsersByDepartment=(users,department)=>{return users.filter(user=>user.departments&&user.departments.includes(department));};export const isUserInDepartment=(user,department)=>{return user.departments&&user.departments.includes(department);};export const updateUserDepartments=async(userId,departments)=>{try{await microsoftDataService.users.update(userId,{departments});return true;}catch(error){console.error('Error updating user departments:',error);throw error;}};export const inviteUser=async function(email,role){let departments=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];try{const newUser={displayName:email.split('@')[0],email:email,role:role,departments:departments,isActive:true};const result=await microsoftDataService.users.add(newUser);return result;}catch(error){console.error('Error inviting user:',error);throw error;}};// Main authentication service\nexport const authService={// Initialize authentication\ninitialize:async()=>{try{console.log('AuthService: Initializing...');await handleRedirectPromise();console.log('AuthService: Initialized successfully');}catch(error){console.error('AuthService: Error initializing:',error);}},// Sign in user\nsignIn:async()=>{try{console.log('AuthService: Starting sign in...');const account=await login();console.log('AuthService: Login successful, account:',account);if(account){// For now, return a mock user without SharePoint integration\n// This will allow the app to work while we debug SharePoint issues\nconst mockUser={id:account.localAccountId||'1',displayName:account.name||account.username||'Test User',email:account.username||'test@example.com',role:'ADMIN',departments:['Development'],isActive:true,createdDate:new Date().toISOString(),lastLogin:new Date().toISOString(),organizationId:'microsoft-365'};console.log('AuthService: Returning mock user:',mockUser);return mockUser;}throw new Error('Login failed - no account returned');}catch(error){console.error('AuthService: Sign in error:',error);throw error;}},// Sign out user\nsignOut:async()=>{try{console.log('AuthService: Starting sign out...');await logout();console.log('AuthService: Sign out successful');}catch(error){console.error('AuthService: Sign out error:',error);throw error;}},// Get current user\ngetCurrentUser:async()=>{try{console.log('AuthService: Getting current user...');const account=await getCurrentUser();console.log('AuthService: Current account:',account);if(account){const mockUser={id:account.localAccountId||'1',displayName:account.name||account.username||'Test User',email:account.username||'test@example.com',role:'ADMIN',departments:['Development'],isActive:true,createdDate:new Date().toISOString(),lastLogin:new Date().toISOString(),organizationId:'microsoft-365'};console.log('AuthService: Returning current user:',mockUser);return mockUser;}console.log('AuthService: No current user found');return null;}catch(error){console.error('AuthService: Error getting current user:',error);return null;}},// Get access token\ngetToken:async()=>{try{console.log('AuthService: Getting access token...');return await getAccessToken();}catch(error){console.error('AuthService: Error getting token:',error);throw error;}}};","map":{"version":3,"names":["microsoftDataService","login","logout","getCurrentUser","getAccessToken","handleRedirectPromise","ROLES","DEVELOPER","OWNER","ADMIN","EDITOR","VIEWER","DEPARTMENTS","DEVELOPMENT","MARKETING","SALES","OPERATIONS","DEPARTMENT_NAMES","Object","values","hasPermission","userRole","requiredRole","roleHierarchy","getDepartmentFromResponsibleParty","responsibleParty","departmentMappings","arguments","length","undefined","nameAliases","party","toLowerCase","trim","mapping","term","includes","department","alias","key","dept","entries","getUsersByDepartment","users","filter","user","departments","isUserInDepartment","updateUserDepartments","userId","update","error","console","inviteUser","email","role","newUser","displayName","split","isActive","result","add","authService","initialize","log","signIn","account","mockUser","id","localAccountId","name","username","createdDate","Date","toISOString","lastLogin","organizationId","Error","signOut","getToken"],"sources":["/Users/nic/housing-deadlines-app/VERSION_2.2.0_BACKUP/src/microsoftAuthService.js"],"sourcesContent":["import { microsoftDataService } from './microsoftDataService';\nimport { login, logout, getCurrentUser, getAccessToken, handleRedirectPromise } from './msalService';\n\n// User roles\nexport const ROLES = {\n  DEVELOPER: 'DEVELOPER',\n  OWNER: 'OWNER',\n  ADMIN: 'ADMIN',\n  EDITOR: 'EDITOR',\n  VIEWER: 'VIEWER'\n};\n\n// Department constants\nexport const DEPARTMENTS = {\n  DEVELOPMENT: 'Development',\n  MARKETING: 'Marketing',\n  SALES: 'Sales',\n  OPERATIONS: 'Operations'\n};\n\nexport const DEPARTMENT_NAMES = Object.values(DEPARTMENTS);\n\n// Permission checking\nexport const hasPermission = (userRole, requiredRole) => {\n  const roleHierarchy = {\n    [ROLES.VIEWER]: 0,\n    [ROLES.EDITOR]: 1,\n    [ROLES.ADMIN]: 2,\n    [ROLES.OWNER]: 3,\n    [ROLES.DEVELOPER]: 4\n  };\n  \n  return roleHierarchy[userRole] >= roleHierarchy[requiredRole];\n};\n\n// Department detection from responsible party\nexport const getDepartmentFromResponsibleParty = (responsibleParty, departmentMappings = [], nameAliases = []) => {\n  if (!responsibleParty) return null;\n  \n  const party = responsibleParty.toLowerCase().trim();\n  \n  // Check custom mappings first\n  for (const mapping of departmentMappings) {\n    if (mapping.term && party.includes(mapping.term.toLowerCase())) {\n      return mapping.department;\n    }\n  }\n  \n  // Check name aliases\n  for (const alias of nameAliases) {\n    if (alias.alias && party.includes(alias.alias.toLowerCase())) {\n      // Find the user and get their departments\n      // This would need to be implemented with actual user lookup\n      return 'Development'; // Default for now\n    }\n  }\n  \n  // Check department keywords\n  for (const [key, dept] of Object.entries(DEPARTMENTS)) {\n    if (party.includes(dept.toLowerCase())) {\n      return dept;\n    }\n  }\n  \n  return null;\n};\n\n// User management functions\nexport const getUsersByDepartment = (users, department) => {\n  return users.filter(user => \n    user.departments && user.departments.includes(department)\n  );\n};\n\nexport const isUserInDepartment = (user, department) => {\n  return user.departments && user.departments.includes(department);\n};\n\nexport const updateUserDepartments = async (userId, departments) => {\n  try {\n    await microsoftDataService.users.update(userId, { departments });\n    return true;\n  } catch (error) {\n    console.error('Error updating user departments:', error);\n    throw error;\n  }\n};\n\nexport const inviteUser = async (email, role, departments = []) => {\n  try {\n    const newUser = {\n      displayName: email.split('@')[0],\n      email: email,\n      role: role,\n      departments: departments,\n      isActive: true\n    };\n    \n    const result = await microsoftDataService.users.add(newUser);\n    return result;\n  } catch (error) {\n    console.error('Error inviting user:', error);\n    throw error;\n  }\n};\n\n// Main authentication service\nexport const authService = {\n  // Initialize authentication\n  initialize: async () => {\n    try {\n      console.log('AuthService: Initializing...');\n      await handleRedirectPromise();\n      console.log('AuthService: Initialized successfully');\n    } catch (error) {\n      console.error('AuthService: Error initializing:', error);\n    }\n  },\n\n  // Sign in user\n  signIn: async () => {\n    try {\n      console.log('AuthService: Starting sign in...');\n      const account = await login();\n      console.log('AuthService: Login successful, account:', account);\n      \n      if (account) {\n        // For now, return a mock user without SharePoint integration\n        // This will allow the app to work while we debug SharePoint issues\n        const mockUser = {\n          id: account.localAccountId || '1',\n          displayName: account.name || account.username || 'Test User',\n          email: account.username || 'test@example.com',\n          role: 'ADMIN',\n          departments: ['Development'],\n          isActive: true,\n          createdDate: new Date().toISOString(),\n          lastLogin: new Date().toISOString(),\n          organizationId: 'microsoft-365'\n        };\n        \n        console.log('AuthService: Returning mock user:', mockUser);\n        return mockUser;\n      }\n      \n      throw new Error('Login failed - no account returned');\n    } catch (error) {\n      console.error('AuthService: Sign in error:', error);\n      throw error;\n    }\n  },\n\n  // Sign out user\n  signOut: async () => {\n    try {\n      console.log('AuthService: Starting sign out...');\n      await logout();\n      console.log('AuthService: Sign out successful');\n    } catch (error) {\n      console.error('AuthService: Sign out error:', error);\n      throw error;\n    }\n  },\n\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      console.log('AuthService: Getting current user...');\n      const account = await getCurrentUser();\n      console.log('AuthService: Current account:', account);\n      \n      if (account) {\n        const mockUser = {\n          id: account.localAccountId || '1',\n          displayName: account.name || account.username || 'Test User',\n          email: account.username || 'test@example.com',\n          role: 'ADMIN',\n          departments: ['Development'],\n          isActive: true,\n          createdDate: new Date().toISOString(),\n          lastLogin: new Date().toISOString(),\n          organizationId: 'microsoft-365'\n        };\n        \n        console.log('AuthService: Returning current user:', mockUser);\n        return mockUser;\n      }\n      \n      console.log('AuthService: No current user found');\n      return null;\n    } catch (error) {\n      console.error('AuthService: Error getting current user:', error);\n      return null;\n    }\n  },\n\n  // Get access token\n  getToken: async () => {\n    try {\n      console.log('AuthService: Getting access token...');\n      return await getAccessToken();\n    } catch (error) {\n      console.error('AuthService: Error getting token:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}