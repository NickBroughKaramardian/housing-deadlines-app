{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @module AuthenticationHandler\n */\nimport { isCustomHost, isGraphURL } from \"../GraphRequestUtil\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { appendRequestHeader } from \"./MiddlewareUtil\";\nimport { AuthenticationHandlerOptions } from \"./options/AuthenticationHandlerOptions\";\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\n * @class\n * @implements Middleware\n * Class representing AuthenticationHandler\n */\nexport class AuthenticationHandler {\n  /**\n   * @public\n   * @constructor\n   * Creates an instance of AuthenticationHandler\n   * @param {AuthenticationProvider} authenticationProvider - The authentication provider for the authentication handler\n   */\n  constructor(authenticationProvider) {\n    this.authenticationProvider = authenticationProvider;\n  }\n  /**\n   * @public\n   * @async\n   * To execute the current middleware\n   * @param {Context} context - The context object of the request\n   * @returns A Promise that resolves to nothing\n   */\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = typeof context.request === \"string\" ? context.request : context.request.url;\n      if (isGraphURL(url) || context.customHosts && isCustomHost(url, context.customHosts)) {\n        let options;\n        if (context.middlewareControl instanceof MiddlewareControl) {\n          options = context.middlewareControl.getMiddlewareOptions(AuthenticationHandlerOptions);\n        }\n        let authenticationProvider;\n        let authenticationProviderOptions;\n        if (options) {\n          authenticationProvider = options.authenticationProvider;\n          authenticationProviderOptions = options.authenticationProviderOptions;\n        }\n        if (!authenticationProvider) {\n          authenticationProvider = this.authenticationProvider;\n        }\n        const token = yield authenticationProvider.getAccessToken(authenticationProviderOptions);\n        const bearerKey = \"Bearer \".concat(token);\n        appendRequestHeader(context.request, context.options, AuthenticationHandler.AUTHORIZATION_HEADER, bearerKey);\n        TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.AUTHENTICATION_HANDLER_ENABLED);\n      } else {\n        if (context.options.headers) {\n          delete context.options.headers[AuthenticationHandler.AUTHORIZATION_HEADER];\n        }\n      }\n      return yield this.nextMiddleware.execute(context);\n    });\n  }\n  /**\n   * @public\n   * To set the next middleware in the chain\n   * @param {Middleware} next - The middleware instance\n   * @returns Nothing\n   */\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n}\n/**\n * @private\n * A member representing the authorization header name\n */\nAuthenticationHandler.AUTHORIZATION_HEADER = \"Authorization\";","map":{"version":3,"names":["isCustomHost","isGraphURL","MiddlewareControl","appendRequestHeader","AuthenticationHandlerOptions","FeatureUsageFlag","TelemetryHandlerOptions","AuthenticationHandler","constructor","authenticationProvider","execute","context","url","request","customHosts","options","middlewareControl","getMiddlewareOptions","authenticationProviderOptions","token","getAccessToken","bearerKey","concat","AUTHORIZATION_HEADER","updateFeatureUsageFlag","AUTHENTICATION_HANDLER_ENABLED","headers","nextMiddleware","setNext","next"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/AuthenticationHandler.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module AuthenticationHandler\n */\n\nimport { isCustomHost, isGraphURL } from \"../GraphRequestUtil\";\nimport { AuthenticationProvider } from \"../IAuthenticationProvider\";\nimport { AuthenticationProviderOptions } from \"../IAuthenticationProviderOptions\";\nimport { Context } from \"../IContext\";\nimport { Middleware } from \"./IMiddleware\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { appendRequestHeader } from \"./MiddlewareUtil\";\nimport { AuthenticationHandlerOptions } from \"./options/AuthenticationHandlerOptions\";\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n\n/**\n * @class\n * @implements Middleware\n * Class representing AuthenticationHandler\n */\nexport class AuthenticationHandler implements Middleware {\n\t/**\n\t * @private\n\t * A member representing the authorization header name\n\t */\n\tprivate static AUTHORIZATION_HEADER = \"Authorization\";\n\n\t/**\n\t * @private\n\t * A member to hold an AuthenticationProvider instance\n\t */\n\tprivate authenticationProvider: AuthenticationProvider;\n\n\t/**\n\t * @private\n\t * A member to hold next middleware in the middleware chain\n\t */\n\tprivate nextMiddleware: Middleware;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * Creates an instance of AuthenticationHandler\n\t * @param {AuthenticationProvider} authenticationProvider - The authentication provider for the authentication handler\n\t */\n\tpublic constructor(authenticationProvider: AuthenticationProvider) {\n\t\tthis.authenticationProvider = authenticationProvider;\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * To execute the current middleware\n\t * @param {Context} context - The context object of the request\n\t * @returns A Promise that resolves to nothing\n\t */\n\tpublic async execute(context: Context): Promise<void> {\n\t\tconst url = typeof context.request === \"string\" ? context.request : context.request.url;\n\t\tif (isGraphURL(url) || (context.customHosts && isCustomHost(url, context.customHosts))) {\n\t\t\tlet options: AuthenticationHandlerOptions;\n\t\t\tif (context.middlewareControl instanceof MiddlewareControl) {\n\t\t\t\toptions = context.middlewareControl.getMiddlewareOptions(AuthenticationHandlerOptions) as AuthenticationHandlerOptions;\n\t\t\t}\n\t\t\tlet authenticationProvider: AuthenticationProvider;\n\t\t\tlet authenticationProviderOptions: AuthenticationProviderOptions;\n\t\t\tif (options) {\n\t\t\t\tauthenticationProvider = options.authenticationProvider;\n\t\t\t\tauthenticationProviderOptions = options.authenticationProviderOptions;\n\t\t\t}\n\t\t\tif (!authenticationProvider) {\n\t\t\t\tauthenticationProvider = this.authenticationProvider;\n\t\t\t}\n\t\t\tconst token: string = await authenticationProvider.getAccessToken(authenticationProviderOptions);\n\t\t\tconst bearerKey = `Bearer ${token}`;\n\t\t\tappendRequestHeader(context.request, context.options, AuthenticationHandler.AUTHORIZATION_HEADER, bearerKey);\n\t\t\tTelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.AUTHENTICATION_HANDLER_ENABLED);\n\t\t} else {\n\t\t\tif (context.options.headers) {\n\t\t\t\tdelete context.options.headers[AuthenticationHandler.AUTHORIZATION_HEADER];\n\t\t\t}\n\t\t}\n\t\treturn await this.nextMiddleware.execute(context);\n\t}\n\n\t/**\n\t * @public\n\t * To set the next middleware in the chain\n\t * @param {Middleware} next - The middleware instance\n\t * @returns Nothing\n\t */\n\tpublic setNext(next: Middleware): void {\n\t\tthis.nextMiddleware = next;\n\t}\n}\n"],"mappings":"AAAA;;;;;;;AAOA;;;AAIA,SAASA,YAAY,EAAEC,UAAU,QAAQ,qBAAqB;AAK9D,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,mBAAmB,QAAQ,kBAAkB;AACtD,SAASC,4BAA4B,QAAQ,wCAAwC;AACrF,SAASC,gBAAgB,EAAEC,uBAAuB,QAAQ,mCAAmC;AAE7F;;;;;AAKA,OAAM,MAAOC,qBAAqB;EAmBjC;;;;;;EAMAC,YAAmBC,sBAA8C;IAChE,IAAI,CAACA,sBAAsB,GAAGA,sBAAsB;EACrD;EAEA;;;;;;;EAOaC,OAAOA,CAACC,OAAgB;;MACpC,MAAMC,GAAG,GAAG,OAAOD,OAAO,CAACE,OAAO,KAAK,QAAQ,GAAGF,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACE,OAAO,CAACD,GAAG;MACvF,IAAIX,UAAU,CAACW,GAAG,CAAC,IAAKD,OAAO,CAACG,WAAW,IAAId,YAAY,CAACY,GAAG,EAAED,OAAO,CAACG,WAAW,CAAE,EAAE;QACvF,IAAIC,OAAqC;QACzC,IAAIJ,OAAO,CAACK,iBAAiB,YAAYd,iBAAiB,EAAE;UAC3Da,OAAO,GAAGJ,OAAO,CAACK,iBAAiB,CAACC,oBAAoB,CAACb,4BAA4B,CAAiC;;QAEvH,IAAIK,sBAA8C;QAClD,IAAIS,6BAA4D;QAChE,IAAIH,OAAO,EAAE;UACZN,sBAAsB,GAAGM,OAAO,CAACN,sBAAsB;UACvDS,6BAA6B,GAAGH,OAAO,CAACG,6BAA6B;;QAEtE,IAAI,CAACT,sBAAsB,EAAE;UAC5BA,sBAAsB,GAAG,IAAI,CAACA,sBAAsB;;QAErD,MAAMU,KAAK,GAAW,MAAMV,sBAAsB,CAACW,cAAc,CAACF,6BAA6B,CAAC;QAChG,MAAMG,SAAS,aAAAC,MAAA,CAAaH,KAAK,CAAE;QACnChB,mBAAmB,CAACQ,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACI,OAAO,EAAER,qBAAqB,CAACgB,oBAAoB,EAAEF,SAAS,CAAC;QAC5Gf,uBAAuB,CAACkB,sBAAsB,CAACb,OAAO,EAAEN,gBAAgB,CAACoB,8BAA8B,CAAC;OACxG,MAAM;QACN,IAAId,OAAO,CAACI,OAAO,CAACW,OAAO,EAAE;UAC5B,OAAOf,OAAO,CAACI,OAAO,CAACW,OAAO,CAACnB,qBAAqB,CAACgB,oBAAoB,CAAC;;;MAG5E,OAAO,MAAM,IAAI,CAACI,cAAc,CAACjB,OAAO,CAACC,OAAO,CAAC;IAClD,CAAC;;EAED;;;;;;EAMOiB,OAAOA,CAACC,IAAgB;IAC9B,IAAI,CAACF,cAAc,GAAGE,IAAI;EAC3B;;AAvEA;;;;AAIetB,qBAAA,CAAAgB,oBAAoB,GAAG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}