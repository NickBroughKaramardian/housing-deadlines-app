{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { AuthenticationHandler } from \"./AuthenticationHandler\";\nimport { HTTPMessageHandler } from \"./HTTPMessageHandler\";\nimport { RedirectHandlerOptions } from \"./options/RedirectHandlerOptions\";\nimport { RetryHandlerOptions } from \"./options/RetryHandlerOptions\";\nimport { RedirectHandler } from \"./RedirectHandler\";\nimport { RetryHandler } from \"./RetryHandler\";\nimport { TelemetryHandler } from \"./TelemetryHandler\";\n/**\n * @private\n * To check whether the environment is node or not\n * @returns A boolean representing the environment is node or not\n */\nconst isNodeEnvironment = () => {\n  return typeof process === \"object\" && typeof require === \"function\";\n};\n/**\n * @class\n * Class containing function(s) related to the middleware pipelines.\n */\nexport class MiddlewareFactory {\n  /**\n   * @public\n   * @static\n   * Returns the default middleware chain an array with the  middleware handlers\n   * @param {AuthenticationProvider} authProvider - The authentication provider instance\n   * @returns an array of the middleware handlers of the default middleware chain\n   */\n  static getDefaultMiddlewareChain(authProvider) {\n    const middleware = [];\n    const authenticationHandler = new AuthenticationHandler(authProvider);\n    const retryHandler = new RetryHandler(new RetryHandlerOptions());\n    const telemetryHandler = new TelemetryHandler();\n    const httpMessageHandler = new HTTPMessageHandler();\n    middleware.push(authenticationHandler);\n    middleware.push(retryHandler);\n    if (isNodeEnvironment()) {\n      const redirectHandler = new RedirectHandler(new RedirectHandlerOptions());\n      middleware.push(redirectHandler);\n    }\n    middleware.push(telemetryHandler);\n    middleware.push(httpMessageHandler);\n    return middleware;\n  }\n}","map":{"version":3,"names":["AuthenticationHandler","HTTPMessageHandler","RedirectHandlerOptions","RetryHandlerOptions","RedirectHandler","RetryHandler","TelemetryHandler","isNodeEnvironment","process","require","MiddlewareFactory","getDefaultMiddlewareChain","authProvider","middleware","authenticationHandler","retryHandler","telemetryHandler","httpMessageHandler","push","redirectHandler"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/MiddlewareFactory.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module MiddlewareFactory\n */\n\nimport { AuthenticationProvider } from \"../IAuthenticationProvider\";\nimport { AuthenticationHandler } from \"./AuthenticationHandler\";\nimport { HTTPMessageHandler } from \"./HTTPMessageHandler\";\nimport { Middleware } from \"./IMiddleware\";\nimport { RedirectHandlerOptions } from \"./options/RedirectHandlerOptions\";\nimport { RetryHandlerOptions } from \"./options/RetryHandlerOptions\";\nimport { RedirectHandler } from \"./RedirectHandler\";\nimport { RetryHandler } from \"./RetryHandler\";\nimport { TelemetryHandler } from \"./TelemetryHandler\";\n\n/**\n * @private\n * To check whether the environment is node or not\n * @returns A boolean representing the environment is node or not\n */\nconst isNodeEnvironment = (): boolean => {\n\treturn typeof process === \"object\" && typeof require === \"function\";\n};\n\n/**\n * @class\n * Class containing function(s) related to the middleware pipelines.\n */\nexport class MiddlewareFactory {\n\t/**\n\t * @public\n\t * @static\n\t * Returns the default middleware chain an array with the  middleware handlers\n\t * @param {AuthenticationProvider} authProvider - The authentication provider instance\n\t * @returns an array of the middleware handlers of the default middleware chain\n\t */\n\tpublic static getDefaultMiddlewareChain(authProvider: AuthenticationProvider): Middleware[] {\n\t\tconst middleware: Middleware[] = [];\n\t\tconst authenticationHandler = new AuthenticationHandler(authProvider);\n\t\tconst retryHandler = new RetryHandler(new RetryHandlerOptions());\n\t\tconst telemetryHandler = new TelemetryHandler();\n\t\tconst httpMessageHandler = new HTTPMessageHandler();\n\n\t\tmiddleware.push(authenticationHandler);\n\t\tmiddleware.push(retryHandler);\n\t\tif (isNodeEnvironment()) {\n\t\t\tconst redirectHandler = new RedirectHandler(new RedirectHandlerOptions());\n\t\t\tmiddleware.push(redirectHandler);\n\t\t}\n\t\tmiddleware.push(telemetryHandler);\n\t\tmiddleware.push(httpMessageHandler);\n\n\t\treturn middleware;\n\t}\n}\n"],"mappings":"AAAA;;;;;;AAYA,SAASA,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD,SAASC,sBAAsB,QAAQ,kCAAkC;AACzE,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;AAKA,MAAMC,iBAAiB,GAAGA,CAAA,KAAc;EACvC,OAAO,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOC,OAAO,KAAK,UAAU;AACpE,CAAC;AAED;;;;AAIA,OAAM,MAAOC,iBAAiB;EAC7B;;;;;;;EAOO,OAAOC,yBAAyBA,CAACC,YAAoC;IAC3E,MAAMC,UAAU,GAAiB,EAAE;IACnC,MAAMC,qBAAqB,GAAG,IAAId,qBAAqB,CAACY,YAAY,CAAC;IACrE,MAAMG,YAAY,GAAG,IAAIV,YAAY,CAAC,IAAIF,mBAAmB,EAAE,CAAC;IAChE,MAAMa,gBAAgB,GAAG,IAAIV,gBAAgB,EAAE;IAC/C,MAAMW,kBAAkB,GAAG,IAAIhB,kBAAkB,EAAE;IAEnDY,UAAU,CAACK,IAAI,CAACJ,qBAAqB,CAAC;IACtCD,UAAU,CAACK,IAAI,CAACH,YAAY,CAAC;IAC7B,IAAIR,iBAAiB,EAAE,EAAE;MACxB,MAAMY,eAAe,GAAG,IAAIf,eAAe,CAAC,IAAIF,sBAAsB,EAAE,CAAC;MACzEW,UAAU,CAACK,IAAI,CAACC,eAAe,CAAC;;IAEjCN,UAAU,CAACK,IAAI,CAACF,gBAAgB,CAAC;IACjCH,UAAU,CAACK,IAAI,CAACD,kBAAkB,CAAC;IAEnC,OAAOJ,UAAU;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}