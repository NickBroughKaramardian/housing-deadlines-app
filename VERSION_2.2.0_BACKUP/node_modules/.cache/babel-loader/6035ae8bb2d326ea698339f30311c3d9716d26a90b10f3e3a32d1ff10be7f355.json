{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @class\n * @implements Middleware\n * Class for HTTPMessageHandler\n */\nexport class HTTPMessageHandler {\n  /**\n   * @public\n   * @async\n   * To execute the current middleware\n   * @param {Context} context - The request context object\n   * @returns A promise that resolves to nothing\n   */\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      context.response = yield fetch(context.request, context.options);\n    });\n  }\n}","map":{"version":3,"names":["HTTPMessageHandler","execute","context","response","fetch","request","options"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/HTTPMessageHandler.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module HTTPMessageHandler\n */\n\nimport { Context } from \"../IContext\";\nimport { Middleware } from \"./IMiddleware\";\n\n/**\n * @class\n * @implements Middleware\n * Class for HTTPMessageHandler\n */\nexport class HTTPMessageHandler implements Middleware {\n\t/**\n\t * @public\n\t * @async\n\t * To execute the current middleware\n\t * @param {Context} context - The request context object\n\t * @returns A promise that resolves to nothing\n\t */\n\tpublic async execute(context: Context): Promise<void> {\n\t\tcontext.response = await fetch(context.request, context.options);\n\t}\n}\n"],"mappings":"AAAA;;;;;;;AAcA;;;;;AAKA,OAAM,MAAOA,kBAAkB;EAC9B;;;;;;;EAOaC,OAAOA,CAACC,OAAgB;;MACpCA,OAAO,CAACC,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAO,CAACG,OAAO,EAAEH,OAAO,CAACI,OAAO,CAAC;IACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}