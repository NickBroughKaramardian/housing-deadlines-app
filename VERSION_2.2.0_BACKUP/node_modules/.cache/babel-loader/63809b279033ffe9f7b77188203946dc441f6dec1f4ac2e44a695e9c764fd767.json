{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { MiddlewareControl } from \"../MiddlewareControl\";\n/**\n * @enum\n * @property {number} NONE - The hexadecimal flag value for nothing enabled\n * @property {number} REDIRECT_HANDLER_ENABLED - The hexadecimal flag value for redirect handler enabled\n * @property {number} RETRY_HANDLER_ENABLED - The hexadecimal flag value for retry handler enabled\n * @property {number} AUTHENTICATION_HANDLER_ENABLED - The hexadecimal flag value for the authentication handler enabled\n */\nexport var FeatureUsageFlag;\n(function (FeatureUsageFlag) {\n  /* eslint-disable  @typescript-eslint/naming-convention */\n  FeatureUsageFlag[FeatureUsageFlag[\"NONE\"] = 0] = \"NONE\";\n  FeatureUsageFlag[FeatureUsageFlag[\"REDIRECT_HANDLER_ENABLED\"] = 1] = \"REDIRECT_HANDLER_ENABLED\";\n  FeatureUsageFlag[FeatureUsageFlag[\"RETRY_HANDLER_ENABLED\"] = 2] = \"RETRY_HANDLER_ENABLED\";\n  FeatureUsageFlag[FeatureUsageFlag[\"AUTHENTICATION_HANDLER_ENABLED\"] = 4] = \"AUTHENTICATION_HANDLER_ENABLED\";\n  /* eslint-enable  @typescript-eslint/naming-convention */\n})(FeatureUsageFlag || (FeatureUsageFlag = {}));\n/**\n * @class\n * @implements MiddlewareOptions\n * Class for TelemetryHandlerOptions\n */\nexport class TelemetryHandlerOptions {\n  constructor() {\n    /**\n     * @private\n     * A member to hold the OR of feature usage flags\n     */\n    this.featureUsage = FeatureUsageFlag.NONE;\n  }\n  /**\n   * @public\n   * @static\n   * To update the feature usage in the context object\n   * @param {Context} context - The request context object containing middleware options\n   * @param {FeatureUsageFlag} flag - The flag value\n   * @returns nothing\n   */\n  static updateFeatureUsageFlag(context, flag) {\n    let options;\n    if (context.middlewareControl instanceof MiddlewareControl) {\n      options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);\n    } else {\n      context.middlewareControl = new MiddlewareControl();\n    }\n    if (typeof options === \"undefined\") {\n      options = new TelemetryHandlerOptions();\n      context.middlewareControl.setMiddlewareOptions(TelemetryHandlerOptions, options);\n    }\n    options.setFeatureUsage(flag);\n  }\n  /**\n   * @private\n   * To set the feature usage flag\n   * @param {FeatureUsageFlag} flag - The flag value\n   * @returns nothing\n   */\n  setFeatureUsage(flag) {\n    this.featureUsage = this.featureUsage | flag;\n  }\n  /**\n   * @public\n   * To get the feature usage\n   * @returns A feature usage flag as hexadecimal string\n   */\n  getFeatureUsage() {\n    return this.featureUsage.toString(16);\n  }\n}","map":{"version":3,"names":["MiddlewareControl","FeatureUsageFlag","TelemetryHandlerOptions","constructor","featureUsage","NONE","updateFeatureUsageFlag","context","flag","options","middlewareControl","getMiddlewareOptions","setMiddlewareOptions","setFeatureUsage","getFeatureUsage","toString"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/options/TelemetryHandlerOptions.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module TelemetryHandlerOptions\n */\n\nimport { Context } from \"../../IContext\";\nimport { MiddlewareControl } from \"../MiddlewareControl\";\nimport { MiddlewareOptions } from \"./IMiddlewareOptions\";\n\n/**\n * @enum\n * @property {number} NONE - The hexadecimal flag value for nothing enabled\n * @property {number} REDIRECT_HANDLER_ENABLED - The hexadecimal flag value for redirect handler enabled\n * @property {number} RETRY_HANDLER_ENABLED - The hexadecimal flag value for retry handler enabled\n * @property {number} AUTHENTICATION_HANDLER_ENABLED - The hexadecimal flag value for the authentication handler enabled\n */\n\nexport enum FeatureUsageFlag {\n\t/* eslint-disable  @typescript-eslint/naming-convention */\n\tNONE = 0x0,\n\tREDIRECT_HANDLER_ENABLED = 0x1,\n\tRETRY_HANDLER_ENABLED = 0x2,\n\tAUTHENTICATION_HANDLER_ENABLED = 0x4,\n\t/* eslint-enable  @typescript-eslint/naming-convention */\n}\n\n/**\n * @class\n * @implements MiddlewareOptions\n * Class for TelemetryHandlerOptions\n */\n\nexport class TelemetryHandlerOptions implements MiddlewareOptions {\n\t/**\n\t * @private\n\t * A member to hold the OR of feature usage flags\n\t */\n\tprivate featureUsage: FeatureUsageFlag = FeatureUsageFlag.NONE;\n\n\t/**\n\t * @public\n\t * @static\n\t * To update the feature usage in the context object\n\t * @param {Context} context - The request context object containing middleware options\n\t * @param {FeatureUsageFlag} flag - The flag value\n\t * @returns nothing\n\t */\n\tpublic static updateFeatureUsageFlag(context: Context, flag: FeatureUsageFlag): void {\n\t\tlet options: TelemetryHandlerOptions;\n\t\tif (context.middlewareControl instanceof MiddlewareControl) {\n\t\t\toptions = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions) as TelemetryHandlerOptions;\n\t\t} else {\n\t\t\tcontext.middlewareControl = new MiddlewareControl();\n\t\t}\n\t\tif (typeof options === \"undefined\") {\n\t\t\toptions = new TelemetryHandlerOptions();\n\t\t\tcontext.middlewareControl.setMiddlewareOptions(TelemetryHandlerOptions, options);\n\t\t}\n\t\toptions.setFeatureUsage(flag);\n\t}\n\n\t/**\n\t * @private\n\t * To set the feature usage flag\n\t * @param {FeatureUsageFlag} flag - The flag value\n\t * @returns nothing\n\t */\n\tprivate setFeatureUsage(flag: FeatureUsageFlag): void {\n\t\tthis.featureUsage = this.featureUsage | flag;\n\t}\n\n\t/**\n\t * @public\n\t * To get the feature usage\n\t * @returns A feature usage flag as hexadecimal string\n\t */\n\tpublic getFeatureUsage(): string {\n\t\treturn this.featureUsage.toString(16);\n\t}\n}\n"],"mappings":"AAAA;;;;;;AAYA,SAASA,iBAAiB,QAAQ,sBAAsB;AAGxD;;;;;;;AAQA,WAAYC,gBAOX;AAPD,WAAYA,gBAAgB;EAC3B;EACAA,gBAAA,CAAAA,gBAAA,sBAAU;EACVA,gBAAA,CAAAA,gBAAA,8DAA8B;EAC9BA,gBAAA,CAAAA,gBAAA,wDAA2B;EAC3BA,gBAAA,CAAAA,gBAAA,0EAAoC;EACpC;AACD,CAAC,EAPWA,gBAAgB,KAAhBA,gBAAgB;AAS5B;;;;;AAMA,OAAM,MAAOC,uBAAuB;EAApCC,YAAA;IACC;;;;IAIQ,KAAAC,YAAY,GAAqBH,gBAAgB,CAACI,IAAI;EA0C/D;EAxCC;;;;;;;;EAQO,OAAOC,sBAAsBA,CAACC,OAAgB,EAAEC,IAAsB;IAC5E,IAAIC,OAAgC;IACpC,IAAIF,OAAO,CAACG,iBAAiB,YAAYV,iBAAiB,EAAE;MAC3DS,OAAO,GAAGF,OAAO,CAACG,iBAAiB,CAACC,oBAAoB,CAACT,uBAAuB,CAA4B;KAC5G,MAAM;MACNK,OAAO,CAACG,iBAAiB,GAAG,IAAIV,iBAAiB,EAAE;;IAEpD,IAAI,OAAOS,OAAO,KAAK,WAAW,EAAE;MACnCA,OAAO,GAAG,IAAIP,uBAAuB,EAAE;MACvCK,OAAO,CAACG,iBAAiB,CAACE,oBAAoB,CAACV,uBAAuB,EAAEO,OAAO,CAAC;;IAEjFA,OAAO,CAACI,eAAe,CAACL,IAAI,CAAC;EAC9B;EAEA;;;;;;EAMQK,eAAeA,CAACL,IAAsB;IAC7C,IAAI,CAACJ,YAAY,GAAG,IAAI,CAACA,YAAY,GAAGI,IAAI;EAC7C;EAEA;;;;;EAKOM,eAAeA,CAAA;IACrB,OAAO,IAAI,CAACV,YAAY,CAACW,QAAQ,CAAC,EAAE,CAAC;EACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}