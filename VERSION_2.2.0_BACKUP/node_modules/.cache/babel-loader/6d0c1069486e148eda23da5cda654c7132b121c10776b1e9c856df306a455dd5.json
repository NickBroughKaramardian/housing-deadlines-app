{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @class\n * Class for PageIterator\n */\nexport class PageIterator {\n  /**\n   * @public\n   * @constructor\n   * Creates new instance for PageIterator\n   * @param {Client} client - The graph client instance\n   * @param {PageCollection} pageCollection - The page collection object\n   * @param {PageIteratorCallback} callBack - The callback function\n   * @param {GraphRequestOptions} requestOptions - The request options\n   * @returns An instance of a PageIterator\n   */\n  constructor(client, pageCollection, callback, requestOptions) {\n    this.client = client;\n    this.collection = pageCollection.value;\n    this.nextLink = pageCollection[\"@odata.nextLink\"];\n    this.deltaLink = pageCollection[\"@odata.deltaLink\"];\n    this.callback = callback;\n    this.cursor = 0;\n    this.complete = false;\n    this.requestOptions = requestOptions;\n  }\n  /**\n   * @private\n   * Iterates over a collection by enqueuing entries one by one and kicking the callback with the enqueued entry\n   * @returns A boolean indicating the continue flag to process next page\n   */\n  iterationHelper() {\n    if (this.collection === undefined) {\n      return false;\n    }\n    let advance = true;\n    while (advance && this.cursor < this.collection.length) {\n      const item = this.collection[this.cursor];\n      advance = this.callback(item);\n      this.cursor++;\n    }\n    return advance;\n  }\n  /**\n   * @private\n   * @async\n   * Helper to make a get request to fetch next page with nextLink url and update the page iterator instance with the returned response\n   * @returns A promise that resolves to a response data with next page collection\n   */\n  fetchAndUpdateNextPageData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let graphRequest = this.client.api(this.nextLink);\n      if (this.requestOptions) {\n        if (this.requestOptions.headers) {\n          graphRequest = graphRequest.headers(this.requestOptions.headers);\n        }\n        if (this.requestOptions.middlewareOptions) {\n          graphRequest = graphRequest.middlewareOptions(this.requestOptions.middlewareOptions);\n        }\n        if (this.requestOptions.options) {\n          graphRequest = graphRequest.options(this.requestOptions.options);\n        }\n      }\n      const response = yield graphRequest.get();\n      this.collection = response.value;\n      this.cursor = 0;\n      this.nextLink = response[\"@odata.nextLink\"];\n      this.deltaLink = response[\"@odata.deltaLink\"];\n    });\n  }\n  /**\n   * @public\n   * Getter to get the deltaLink in the current response\n   * @returns A deltaLink which is being used to make delta requests in future\n   */\n  getDeltaLink() {\n    return this.deltaLink;\n  }\n  /**\n   * @public\n   * @async\n   * Iterates over the collection and kicks callback for each item on iteration. Fetches next set of data through nextLink and iterates over again\n   * This happens until the nextLink is drained out or the user responds with a red flag to continue from callback\n   * @returns A Promise that resolves to nothing on completion and throws error incase of any discrepancy.\n   */\n  iterate() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let advance = this.iterationHelper();\n      while (advance) {\n        if (this.nextLink !== undefined) {\n          yield this.fetchAndUpdateNextPageData();\n          advance = this.iterationHelper();\n        } else {\n          advance = false;\n        }\n      }\n      if (this.nextLink === undefined && this.cursor >= this.collection.length) {\n        this.complete = true;\n      }\n    });\n  }\n  /**\n   * @public\n   * @async\n   * To resume the iteration\n   * Note: This internally calls the iterate method, It's just for more readability.\n   * @returns A Promise that resolves to nothing on completion and throws error incase of any discrepancy\n   */\n  resume() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.iterate();\n    });\n  }\n  /**\n   * @public\n   * To get the completeness status of the iterator\n   * @returns Boolean indicating the completeness\n   */\n  isComplete() {\n    return this.complete;\n  }\n}","map":{"version":3,"names":["PageIterator","constructor","client","pageCollection","callback","requestOptions","collection","value","nextLink","deltaLink","cursor","complete","iterationHelper","undefined","advance","length","item","fetchAndUpdateNextPageData","graphRequest","api","headers","middlewareOptions","options","response","get","getDeltaLink","iterate","resume","isComplete"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/tasks/PageIterator.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module PageIterator\n */\n\nimport { FetchOptions } from \"../IFetchOptions\";\nimport { Client } from \"../index\";\nimport { MiddlewareOptions } from \"../middleware/options/IMiddlewareOptions\";\n\n/**\n * Signature representing PageCollection\n * @property {any[]} value - The collection value\n * @property {string} [@odata.nextLink] - The nextLink value\n * @property {string} [@odata.deltaLink] - The deltaLink value\n * @property {any} Additional - Any number of additional properties (This is to accept the any additional data returned by in the response to the nextLink request)\n */\nexport interface PageCollection {\n\tvalue: any[];\n\t\"@odata.nextLink\"?: string;\n\t\"@odata.deltaLink\"?: string;\n\t[Key: string]: any;\n}\n\n/**\n * Signature to define the request options to be sent during request.\n * The values of the GraphRequestOptions properties are passed to the Graph Request object.\n * @property {HeadersInit} headers - the header options for the request\n * @property {MiddlewareOptions[]} middlewareoptions - The middleware options for the request\n * @property {FetchOptions} options - The fetch options for the request\n */\nexport interface GraphRequestOptions {\n\theaders?: HeadersInit;\n\tmiddlewareOptions?: MiddlewareOptions[];\n\toptions?: FetchOptions;\n}\n\n/**\n * Signature representing callback for page iterator\n * @property {Function} callback - The callback function which should return boolean to continue the continue/stop the iteration.\n */\nexport type PageIteratorCallback = (data: any) => boolean;\n\n/**\n * @class\n * Class for PageIterator\n */\nexport class PageIterator {\n\t/**\n\t * @private\n\t * Member holding the GraphClient instance\n\t */\n\tprivate client: Client;\n\n\t/**\n\t * @private\n\t * Member holding the page collection\n\t */\n\tprivate collection: any[];\n\n\t/**\n\t * @private\n\t * Member variable referring to nextLink of the page collection\n\t */\n\tprivate nextLink: string | undefined;\n\n\t/**\n\t * @private\n\t * Member variable referring to deltaLink of the request\n\t */\n\tprivate deltaLink: string | undefined;\n\n\t/**\n\t * @private\n\t * Holding callback for Iteration.\n\t */\n\n\tprivate callback: PageIteratorCallback;\n\n\t/**\n\t * @private\n\t * Member holding a complete/incomplete status of an iterator\n\t */\n\tprivate complete: boolean;\n\n\t/**\n\t * @private\n\t * Information to be added to the request\n\t */\n\tprivate requestOptions: GraphRequestOptions;\n\n\t/**\n\t * @private\n\t * Member holding the current position on the collection\n\t */\n\tprivate cursor: number;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * Creates new instance for PageIterator\n\t * @param {Client} client - The graph client instance\n\t * @param {PageCollection} pageCollection - The page collection object\n\t * @param {PageIteratorCallback} callBack - The callback function\n\t * @param {GraphRequestOptions} requestOptions - The request options\n\t * @returns An instance of a PageIterator\n\t */\n\tpublic constructor(client: Client, pageCollection: PageCollection, callback: PageIteratorCallback, requestOptions?: GraphRequestOptions) {\n\t\tthis.client = client;\n\t\tthis.collection = pageCollection.value;\n\t\tthis.nextLink = pageCollection[\"@odata.nextLink\"];\n\t\tthis.deltaLink = pageCollection[\"@odata.deltaLink\"];\n\t\tthis.callback = callback;\n\t\tthis.cursor = 0;\n\t\tthis.complete = false;\n\t\tthis.requestOptions = requestOptions;\n\t}\n\n\t/**\n\t * @private\n\t * Iterates over a collection by enqueuing entries one by one and kicking the callback with the enqueued entry\n\t * @returns A boolean indicating the continue flag to process next page\n\t */\n\tprivate iterationHelper(): boolean {\n\t\tif (this.collection === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tlet advance = true;\n\t\twhile (advance && this.cursor < this.collection.length) {\n\t\t\tconst item = this.collection[this.cursor];\n\t\t\tadvance = this.callback(item);\n\t\t\tthis.cursor++;\n\t\t}\n\t\treturn advance;\n\t}\n\n\t/**\n\t * @private\n\t * @async\n\t * Helper to make a get request to fetch next page with nextLink url and update the page iterator instance with the returned response\n\t * @returns A promise that resolves to a response data with next page collection\n\t */\n\tprivate async fetchAndUpdateNextPageData(): Promise<any> {\n\t\tlet graphRequest = this.client.api(this.nextLink);\n\t\tif (this.requestOptions) {\n\t\t\tif (this.requestOptions.headers) {\n\t\t\t\tgraphRequest = graphRequest.headers(this.requestOptions.headers);\n\t\t\t}\n\t\t\tif (this.requestOptions.middlewareOptions) {\n\t\t\t\tgraphRequest = graphRequest.middlewareOptions(this.requestOptions.middlewareOptions);\n\t\t\t}\n\t\t\tif (this.requestOptions.options) {\n\t\t\t\tgraphRequest = graphRequest.options(this.requestOptions.options);\n\t\t\t}\n\t\t}\n\n\t\tconst response: PageCollection = await graphRequest.get();\n\t\tthis.collection = response.value;\n\t\tthis.cursor = 0;\n\t\tthis.nextLink = response[\"@odata.nextLink\"];\n\t\tthis.deltaLink = response[\"@odata.deltaLink\"];\n\t}\n\n\t/**\n\t * @public\n\t * Getter to get the deltaLink in the current response\n\t * @returns A deltaLink which is being used to make delta requests in future\n\t */\n\tpublic getDeltaLink(): string | undefined {\n\t\treturn this.deltaLink;\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Iterates over the collection and kicks callback for each item on iteration. Fetches next set of data through nextLink and iterates over again\n\t * This happens until the nextLink is drained out or the user responds with a red flag to continue from callback\n\t * @returns A Promise that resolves to nothing on completion and throws error incase of any discrepancy.\n\t */\n\tpublic async iterate(): Promise<any> {\n\t\tlet advance = this.iterationHelper();\n\t\twhile (advance) {\n\t\t\tif (this.nextLink !== undefined) {\n\t\t\t\tawait this.fetchAndUpdateNextPageData();\n\t\t\t\tadvance = this.iterationHelper();\n\t\t\t} else {\n\t\t\t\tadvance = false;\n\t\t\t}\n\t\t}\n\t\tif (this.nextLink === undefined && this.cursor >= this.collection.length) {\n\t\t\tthis.complete = true;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * To resume the iteration\n\t * Note: This internally calls the iterate method, It's just for more readability.\n\t * @returns A Promise that resolves to nothing on completion and throws error incase of any discrepancy\n\t */\n\tpublic async resume(): Promise<any> {\n\t\treturn this.iterate();\n\t}\n\n\t/**\n\t * @public\n\t * To get the completeness status of the iterator\n\t * @returns Boolean indicating the completeness\n\t */\n\tpublic isComplete(): boolean {\n\t\treturn this.complete;\n\t}\n}\n"],"mappings":"AAAA;;;;;;;AAgDA;;;;AAIA,OAAM,MAAOA,YAAY;EAkDxB;;;;;;;;;;EAUAC,YAAmBC,MAAc,EAAEC,cAA8B,EAAEC,QAA8B,EAAEC,cAAoC;IACtI,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,UAAU,GAAGH,cAAc,CAACI,KAAK;IACtC,IAAI,CAACC,QAAQ,GAAGL,cAAc,CAAC,iBAAiB,CAAC;IACjD,IAAI,CAACM,SAAS,GAAGN,cAAc,CAAC,kBAAkB,CAAC;IACnD,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACM,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACN,cAAc,GAAGA,cAAc;EACrC;EAEA;;;;;EAKQO,eAAeA,CAAA;IACtB,IAAI,IAAI,CAACN,UAAU,KAAKO,SAAS,EAAE;MAClC,OAAO,KAAK;;IAEb,IAAIC,OAAO,GAAG,IAAI;IAClB,OAAOA,OAAO,IAAI,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACJ,UAAU,CAACS,MAAM,EAAE;MACvD,MAAMC,IAAI,GAAG,IAAI,CAACV,UAAU,CAAC,IAAI,CAACI,MAAM,CAAC;MACzCI,OAAO,GAAG,IAAI,CAACV,QAAQ,CAACY,IAAI,CAAC;MAC7B,IAAI,CAACN,MAAM,EAAE;;IAEd,OAAOI,OAAO;EACf;EAEA;;;;;;EAMcG,0BAA0BA,CAAA;;MACvC,IAAIC,YAAY,GAAG,IAAI,CAAChB,MAAM,CAACiB,GAAG,CAAC,IAAI,CAACX,QAAQ,CAAC;MACjD,IAAI,IAAI,CAACH,cAAc,EAAE;QACxB,IAAI,IAAI,CAACA,cAAc,CAACe,OAAO,EAAE;UAChCF,YAAY,GAAGA,YAAY,CAACE,OAAO,CAAC,IAAI,CAACf,cAAc,CAACe,OAAO,CAAC;;QAEjE,IAAI,IAAI,CAACf,cAAc,CAACgB,iBAAiB,EAAE;UAC1CH,YAAY,GAAGA,YAAY,CAACG,iBAAiB,CAAC,IAAI,CAAChB,cAAc,CAACgB,iBAAiB,CAAC;;QAErF,IAAI,IAAI,CAAChB,cAAc,CAACiB,OAAO,EAAE;UAChCJ,YAAY,GAAGA,YAAY,CAACI,OAAO,CAAC,IAAI,CAACjB,cAAc,CAACiB,OAAO,CAAC;;;MAIlE,MAAMC,QAAQ,GAAmB,MAAML,YAAY,CAACM,GAAG,EAAE;MACzD,IAAI,CAAClB,UAAU,GAAGiB,QAAQ,CAAChB,KAAK;MAChC,IAAI,CAACG,MAAM,GAAG,CAAC;MACf,IAAI,CAACF,QAAQ,GAAGe,QAAQ,CAAC,iBAAiB,CAAC;MAC3C,IAAI,CAACd,SAAS,GAAGc,QAAQ,CAAC,kBAAkB,CAAC;IAC9C,CAAC;;EAED;;;;;EAKOE,YAAYA,CAAA;IAClB,OAAO,IAAI,CAAChB,SAAS;EACtB;EAEA;;;;;;;EAOaiB,OAAOA,CAAA;;MACnB,IAAIZ,OAAO,GAAG,IAAI,CAACF,eAAe,EAAE;MACpC,OAAOE,OAAO,EAAE;QACf,IAAI,IAAI,CAACN,QAAQ,KAAKK,SAAS,EAAE;UAChC,MAAM,IAAI,CAACI,0BAA0B,EAAE;UACvCH,OAAO,GAAG,IAAI,CAACF,eAAe,EAAE;SAChC,MAAM;UACNE,OAAO,GAAG,KAAK;;;MAGjB,IAAI,IAAI,CAACN,QAAQ,KAAKK,SAAS,IAAI,IAAI,CAACH,MAAM,IAAI,IAAI,CAACJ,UAAU,CAACS,MAAM,EAAE;QACzE,IAAI,CAACJ,QAAQ,GAAG,IAAI;;IAEtB,CAAC;;EAED;;;;;;;EAOagB,MAAMA,CAAA;;MAClB,OAAO,IAAI,CAACD,OAAO,EAAE;IACtB,CAAC;;EAED;;;;;EAKOE,UAAUA,CAAA;IAChB,OAAO,IAAI,CAACjB,QAAQ;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}