{"ast":null,"code":"import{microsoftDataService}from'./microsoftDataService';class SharedDataService{constructor(){this.tasks=[];this.lastFetch=null;this.cacheTimeout=30000;// 30 seconds\n}// Get all tasks with caching - same logic as Database component\nasync getAllTasks(){const now=Date.now();// Return cached data if it's still fresh\nif(this.lastFetch&&now-this.lastFetch<this.cacheTimeout&&this.tasks.length>0){console.log('SharedDataService: Using cached data,',this.tasks.length,'tasks');return this.tasks;}try{console.log('SharedDataService: Fetching fresh data from SharePoint...');const tasksData=await microsoftDataService.tasks.getAll();// Filter out any null or undefined tasks\nconst filteredTasks=tasksData.filter(task=>task!=null&&task.id);this.tasks=filteredTasks;this.lastFetch=now;console.log('SharedDataService: Loaded',filteredTasks.length,'tasks with full data');return filteredTasks;}catch(error){console.error('SharedDataService: Error fetching tasks:',error);return this.tasks;// Return cached data if available\n}}// Clear cache to force refresh\nclearCache(){this.tasks=[];this.lastFetch=null;console.log('SharedDataService: Cache cleared');}// Update a task and refresh cache\nasync updateTask(taskId,updates){try{await microsoftDataService.tasks.update(taskId,updates);this.clearCache();// Clear cache to force refresh\nconsole.log('SharedDataService: Task updated, cache cleared');}catch(error){console.error('SharedDataService: Error updating task:',error);throw error;}}// Delete a task and refresh cache\nasync deleteTask(taskId){try{await microsoftDataService.tasks.delete(taskId);this.clearCache();// Clear cache to force refresh\nconsole.log('SharedDataService: Task deleted, cache cleared');}catch(error){console.error('SharedDataService: Error deleting task:',error);throw error;}}}// Export singleton instance\nexport const sharedDataService=new SharedDataService();","map":{"version":3,"names":["microsoftDataService","SharedDataService","constructor","tasks","lastFetch","cacheTimeout","getAllTasks","now","Date","length","console","log","tasksData","getAll","filteredTasks","filter","task","id","error","clearCache","updateTask","taskId","updates","update","deleteTask","delete","sharedDataService"],"sources":["/Users/nic/housing-deadlines-app/VERSION_2.2.0_BACKUP/src/sharedDataService.js"],"sourcesContent":["import { microsoftDataService } from './microsoftDataService';\n\nclass SharedDataService {\n  constructor() {\n    this.tasks = [];\n    this.lastFetch = null;\n    this.cacheTimeout = 30000; // 30 seconds\n  }\n\n  // Get all tasks with caching - same logic as Database component\n  async getAllTasks() {\n    const now = Date.now();\n    \n    // Return cached data if it's still fresh\n    if (this.lastFetch && (now - this.lastFetch) < this.cacheTimeout && this.tasks.length > 0) {\n      console.log('SharedDataService: Using cached data,', this.tasks.length, 'tasks');\n      return this.tasks;\n    }\n\n    try {\n      console.log('SharedDataService: Fetching fresh data from SharePoint...');\n      const tasksData = await microsoftDataService.tasks.getAll();\n      \n      // Filter out any null or undefined tasks\n      const filteredTasks = tasksData.filter(task => task != null && task.id);\n\n      this.tasks = filteredTasks;\n      this.lastFetch = now;\n      \n      console.log('SharedDataService: Loaded', filteredTasks.length, 'tasks with full data');\n      return filteredTasks;\n    } catch (error) {\n      console.error('SharedDataService: Error fetching tasks:', error);\n      return this.tasks; // Return cached data if available\n    }\n  }\n\n  // Clear cache to force refresh\n  clearCache() {\n    this.tasks = [];\n    this.lastFetch = null;\n    console.log('SharedDataService: Cache cleared');\n  }\n\n  // Update a task and refresh cache\n  async updateTask(taskId, updates) {\n    try {\n      await microsoftDataService.tasks.update(taskId, updates);\n      this.clearCache(); // Clear cache to force refresh\n      console.log('SharedDataService: Task updated, cache cleared');\n    } catch (error) {\n      console.error('SharedDataService: Error updating task:', error);\n      throw error;\n    }\n  }\n\n  // Delete a task and refresh cache\n  async deleteTask(taskId) {\n    try {\n      await microsoftDataService.tasks.delete(taskId);\n      this.clearCache(); // Clear cache to force refresh\n      console.log('SharedDataService: Task deleted, cache cleared');\n    } catch (error) {\n      console.error('SharedDataService: Error deleting task:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const sharedDataService = new SharedDataService();\n"],"mappings":"AAAA,OAASA,oBAAoB,KAAQ,wBAAwB,CAE7D,KAAM,CAAAC,iBAAkB,CACtBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,KAAK,CAAG,EAAE,CACf,IAAI,CAACC,SAAS,CAAG,IAAI,CACrB,IAAI,CAACC,YAAY,CAAG,KAAK,CAAE;AAC7B,CAEA;AACA,KAAM,CAAAC,WAAWA,CAAA,CAAG,CAClB,KAAM,CAAAC,GAAG,CAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,CAEtB;AACA,GAAI,IAAI,CAACH,SAAS,EAAKG,GAAG,CAAG,IAAI,CAACH,SAAS,CAAI,IAAI,CAACC,YAAY,EAAI,IAAI,CAACF,KAAK,CAACM,MAAM,CAAG,CAAC,CAAE,CACzFC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAE,IAAI,CAACR,KAAK,CAACM,MAAM,CAAE,OAAO,CAAC,CAChF,MAAO,KAAI,CAACN,KAAK,CACnB,CAEA,GAAI,CACFO,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC,CACxE,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAZ,oBAAoB,CAACG,KAAK,CAACU,MAAM,CAAC,CAAC,CAE3D;AACA,KAAM,CAAAC,aAAa,CAAGF,SAAS,CAACG,MAAM,CAACC,IAAI,EAAIA,IAAI,EAAI,IAAI,EAAIA,IAAI,CAACC,EAAE,CAAC,CAEvE,IAAI,CAACd,KAAK,CAAGW,aAAa,CAC1B,IAAI,CAACV,SAAS,CAAGG,GAAG,CAEpBG,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEG,aAAa,CAACL,MAAM,CAAE,sBAAsB,CAAC,CACtF,MAAO,CAAAK,aAAa,CACtB,CAAE,MAAOI,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,0CAA0C,CAAEA,KAAK,CAAC,CAChE,MAAO,KAAI,CAACf,KAAK,CAAE;AACrB,CACF,CAEA;AACAgB,UAAUA,CAAA,CAAG,CACX,IAAI,CAAChB,KAAK,CAAG,EAAE,CACf,IAAI,CAACC,SAAS,CAAG,IAAI,CACrBM,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CACjD,CAEA;AACA,KAAM,CAAAS,UAAUA,CAACC,MAAM,CAAEC,OAAO,CAAE,CAChC,GAAI,CACF,KAAM,CAAAtB,oBAAoB,CAACG,KAAK,CAACoB,MAAM,CAACF,MAAM,CAAEC,OAAO,CAAC,CACxD,IAAI,CAACH,UAAU,CAAC,CAAC,CAAE;AACnBT,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC,CAC/D,CAAE,MAAOO,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,yCAAyC,CAAEA,KAAK,CAAC,CAC/D,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAM,UAAUA,CAACH,MAAM,CAAE,CACvB,GAAI,CACF,KAAM,CAAArB,oBAAoB,CAACG,KAAK,CAACsB,MAAM,CAACJ,MAAM,CAAC,CAC/C,IAAI,CAACF,UAAU,CAAC,CAAC,CAAE;AACnBT,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC,CAC/D,CAAE,MAAOO,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,yCAAyC,CAAEA,KAAK,CAAC,CAC/D,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA;AACA,MAAO,MAAM,CAAAQ,iBAAiB,CAAG,GAAI,CAAAzB,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}