{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @class\n * Class representing MiddlewareControl\n */\nexport class MiddlewareControl {\n  /**\n   * @public\n   * @constructor\n   * Creates an instance of MiddlewareControl\n   * @param {MiddlewareOptions[]} [middlewareOptions = []] - The array of middlewareOptions\n   * @returns The instance of MiddlewareControl\n   */\n  constructor() {\n    let middlewareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.middlewareOptions = new Map();\n    for (const option of middlewareOptions) {\n      const fn = option.constructor;\n      this.middlewareOptions.set(fn, option);\n    }\n  }\n  /**\n   * @public\n   * To get the middleware option using the class of the option\n   * @param {Function} fn - The class of the strongly typed option class\n   * @returns The middleware option\n   * @example\n   * // if you wanted to return the middleware option associated with this class (MiddlewareControl)\n   * // call this function like this:\n   * getMiddlewareOptions(MiddlewareControl)\n   */\n  getMiddlewareOptions(fn) {\n    return this.middlewareOptions.get(fn);\n  }\n  /**\n   * @public\n   * To set the middleware options using the class of the option\n   * @param {Function} fn - The class of the strongly typed option class\n   * @param {MiddlewareOptions} option - The strongly typed middleware option\n   * @returns nothing\n   */\n  setMiddlewareOptions(fn, option) {\n    this.middlewareOptions.set(fn, option);\n  }\n}","map":{"version":3,"names":["MiddlewareControl","constructor","middlewareOptions","arguments","length","undefined","Map","option","fn","set","getMiddlewareOptions","get","setMiddlewareOptions"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/MiddlewareControl.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module MiddlewareControl\n */\n\nimport { MiddlewareOptions } from \"./options/IMiddlewareOptions\";\n\n/**\n * @class\n * Class representing MiddlewareControl\n */\nexport class MiddlewareControl {\n\t/**\n\t * @private\n\t * A member holding map of MiddlewareOptions\n\t */\n\tprivate middlewareOptions: Map<Function, MiddlewareOptions>;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * Creates an instance of MiddlewareControl\n\t * @param {MiddlewareOptions[]} [middlewareOptions = []] - The array of middlewareOptions\n\t * @returns The instance of MiddlewareControl\n\t */\n\tpublic constructor(middlewareOptions: MiddlewareOptions[] = []) {\n\t\tthis.middlewareOptions = new Map<Function, MiddlewareOptions>();\n\t\tfor (const option of middlewareOptions) {\n\t\t\tconst fn = option.constructor;\n\t\t\tthis.middlewareOptions.set(fn, option);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * To get the middleware option using the class of the option\n\t * @param {Function} fn - The class of the strongly typed option class\n\t * @returns The middleware option\n\t * @example\n\t * // if you wanted to return the middleware option associated with this class (MiddlewareControl)\n\t * // call this function like this:\n\t * getMiddlewareOptions(MiddlewareControl)\n\t */\n\tpublic getMiddlewareOptions(fn: Function): MiddlewareOptions {\n\t\treturn this.middlewareOptions.get(fn);\n\t}\n\n\t/**\n\t * @public\n\t * To set the middleware options using the class of the option\n\t * @param {Function} fn - The class of the strongly typed option class\n\t * @param {MiddlewareOptions} option - The strongly typed middleware option\n\t * @returns nothing\n\t */\n\tpublic setMiddlewareOptions(fn: Function, option: MiddlewareOptions): void {\n\t\tthis.middlewareOptions.set(fn, option);\n\t}\n}\n"],"mappings":"AAAA;;;;;;AAaA;;;;AAIA,OAAM,MAAOA,iBAAiB;EAO7B;;;;;;;EAOAC,YAAA,EAA8D;IAAA,IAA3CC,iBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyC,EAAE;IAC7D,IAAI,CAACD,iBAAiB,GAAG,IAAII,GAAG,EAA+B;IAC/D,KAAK,MAAMC,MAAM,IAAIL,iBAAiB,EAAE;MACvC,MAAMM,EAAE,GAAGD,MAAM,CAACN,WAAW;MAC7B,IAAI,CAACC,iBAAiB,CAACO,GAAG,CAACD,EAAE,EAAED,MAAM,CAAC;;EAExC;EAEA;;;;;;;;;;EAUOG,oBAAoBA,CAACF,EAAY;IACvC,OAAO,IAAI,CAACN,iBAAiB,CAACS,GAAG,CAACH,EAAE,CAAC;EACtC;EAEA;;;;;;;EAOOI,oBAAoBA,CAACJ,EAAY,EAAED,MAAyB;IAClE,IAAI,CAACL,iBAAiB,CAACO,GAAG,CAACD,EAAE,EAAED,MAAM,CAAC;EACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}