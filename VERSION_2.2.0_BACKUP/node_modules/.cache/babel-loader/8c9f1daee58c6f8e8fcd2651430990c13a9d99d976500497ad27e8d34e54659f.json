{"ast":null,"code":"import _objectSpread from\"/Users/nic/housing-deadlines-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{PublicClientApplication}from'@azure/msal-browser';import{Client}from'@microsoft/microsoft-graph-client';import{msalConfig,loginRequest}from'./azureConfig';let msalInstance=null;export const initializeMsal=async()=>{if(!msalInstance){console.log('Initializing MSAL with config:',msalConfig);msalInstance=new PublicClientApplication(msalConfig);await msalInstance.initialize();console.log('MSAL initialized successfully');}return msalInstance;};export const login=async()=>{try{console.log('Starting login process...');await initializeMsal();// Check if user is already logged in\nconst accounts=msalInstance.getAllAccounts();console.log('Existing accounts:',accounts);if(accounts.length>0){console.log('User already logged in:',accounts[0]);return accounts[0];}// Check if we're in Edge browser and use redirect instead of popup\nconst isEdge=navigator.userAgent.includes('Edg/');if(isEdge){console.log('Detected Edge browser, using redirect flow...');// Use redirect flow for Edge to avoid COOP issues\nawait msalInstance.loginRedirect(_objectSpread(_objectSpread({},loginRequest),{},{prompt:'select_account'}));// This will redirect the page, so we won't reach here\nreturn null;}else{console.log('Starting popup login...');// Start login process with popup for other browsers\nconst loginResponse=await msalInstance.loginPopup(_objectSpread(_objectSpread({},loginRequest),{},{prompt:'select_account'}));console.log('Login successful:',loginResponse);return loginResponse.account;}}catch(error){console.error('Login failed:',error);throw error;}};export const logout=async()=>{try{console.log('Starting logout...');await initializeMsal();const accounts=msalInstance.getAllAccounts();if(accounts.length>0){// Check if we're in Edge browser and use redirect instead of popup\nconst isEdge=navigator.userAgent.includes('Edg/');if(isEdge){console.log('Detected Edge browser, using redirect logout...');await msalInstance.logoutRedirect();}else{await msalInstance.logoutPopup();}console.log('Logout successful');}}catch(error){console.error('Logout failed:',error);throw error;}};export const getAccessToken=async()=>{try{console.log('Getting access token...');await initializeMsal();const accounts=msalInstance.getAllAccounts();if(accounts.length===0){throw new Error('No user account found');}const account=accounts[0];const tokenRequest={scopes:['https://graph.microsoft.com/.default'],account:account};const tokenResponse=await msalInstance.acquireTokenSilent(tokenRequest);console.log('Token acquired successfully');return tokenResponse.accessToken;}catch(error){console.error('Error getting access token:',error);throw error;}};export const handleRedirectPromise=async()=>{try{console.log('Handling redirect promise...');await initializeMsal();const response=await msalInstance.handleRedirectPromise();if(response){console.log('Redirect response:',response);return response.account;}return null;}catch(error){console.error('Error handling redirect promise:',error);return null;}};// Get Microsoft Graph client\nexport const getGraphClient=async()=>{try{await initializeMsal();const accounts=msalInstance.getAllAccounts();if(accounts.length===0){throw new Error('No user account found');}const account=accounts[0];const tokenRequest={scopes:['https://graph.microsoft.com/.default'],account:account};const tokenResponse=await msalInstance.acquireTokenSilent(tokenRequest);const graphClient=Client.init({authProvider:done=>{done(null,tokenResponse.accessToken);}});return graphClient;}catch(error){console.error('Error getting Graph client:',error);throw error;}};export const getCurrentUser=async()=>{try{await initializeMsal();const accounts=msalInstance.getAllAccounts();if(accounts.length>0){return accounts[0];}return null;}catch(error){console.error('Error getting current user:',error);return null;}};// Export function to get MSAL instance\nexport const getMsalInstance=async()=>{await initializeMsal();return msalInstance;};","map":{"version":3,"names":["PublicClientApplication","Client","msalConfig","loginRequest","msalInstance","initializeMsal","console","log","initialize","login","accounts","getAllAccounts","length","isEdge","navigator","userAgent","includes","loginRedirect","_objectSpread","prompt","loginResponse","loginPopup","account","error","logout","logoutRedirect","logoutPopup","getAccessToken","Error","tokenRequest","scopes","tokenResponse","acquireTokenSilent","accessToken","handleRedirectPromise","response","getGraphClient","graphClient","init","authProvider","done","getCurrentUser","getMsalInstance"],"sources":["/Users/nic/housing-deadlines-app/VERSION_2.2.0_BACKUP/src/msalService.js"],"sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { msalConfig, loginRequest } from './azureConfig';\n\nlet msalInstance = null;\n\nexport const initializeMsal = async () => {\n  if (!msalInstance) {\n    console.log('Initializing MSAL with config:', msalConfig);\n    msalInstance = new PublicClientApplication(msalConfig);\n    await msalInstance.initialize();\n    console.log('MSAL initialized successfully');\n  }\n  return msalInstance;\n};\n\nexport const login = async () => {\n  try {\n    console.log('Starting login process...');\n    await initializeMsal();\n    \n    // Check if user is already logged in\n    const accounts = msalInstance.getAllAccounts();\n    console.log('Existing accounts:', accounts);\n    \n    if (accounts.length > 0) {\n      console.log('User already logged in:', accounts[0]);\n      return accounts[0];\n    }\n\n    // Check if we're in Edge browser and use redirect instead of popup\n    const isEdge = navigator.userAgent.includes('Edg/');\n    \n    if (isEdge) {\n      console.log('Detected Edge browser, using redirect flow...');\n      // Use redirect flow for Edge to avoid COOP issues\n      await msalInstance.loginRedirect({\n        ...loginRequest,\n        prompt: 'select_account'\n      });\n      // This will redirect the page, so we won't reach here\n      return null;\n    } else {\n      console.log('Starting popup login...');\n      // Start login process with popup for other browsers\n      const loginResponse = await msalInstance.loginPopup({\n        ...loginRequest,\n        prompt: 'select_account'\n      });\n      \n      console.log('Login successful:', loginResponse);\n      return loginResponse.account;\n    }\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n};\n\nexport const logout = async () => {\n  try {\n    console.log('Starting logout...');\n    await initializeMsal();\n    const accounts = msalInstance.getAllAccounts();\n    if (accounts.length > 0) {\n      // Check if we're in Edge browser and use redirect instead of popup\n      const isEdge = navigator.userAgent.includes('Edg/');\n      \n      if (isEdge) {\n        console.log('Detected Edge browser, using redirect logout...');\n        await msalInstance.logoutRedirect();\n      } else {\n        await msalInstance.logoutPopup();\n      }\n      console.log('Logout successful');\n    }\n  } catch (error) {\n    console.error('Logout failed:', error);\n    throw error;\n  }\n};\n\nexport const getAccessToken = async () => {\n  try {\n    console.log('Getting access token...');\n    await initializeMsal();\n    const accounts = msalInstance.getAllAccounts();\n    \n    if (accounts.length === 0) {\n      throw new Error('No user account found');\n    }\n\n    const account = accounts[0];\n    const tokenRequest = {\n      scopes: ['https://graph.microsoft.com/.default'],\n      account: account\n    };\n\n    const tokenResponse = await msalInstance.acquireTokenSilent(tokenRequest);\n    console.log('Token acquired successfully');\n    return tokenResponse.accessToken;\n  } catch (error) {\n    console.error('Error getting access token:', error);\n    throw error;\n  }\n};\n\nexport const handleRedirectPromise = async () => {\n  try {\n    console.log('Handling redirect promise...');\n    await initializeMsal();\n    const response = await msalInstance.handleRedirectPromise();\n    \n    if (response) {\n      console.log('Redirect response:', response);\n      return response.account;\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error handling redirect promise:', error);\n    return null;\n  }\n};\n\n// Get Microsoft Graph client\nexport const getGraphClient = async () => {\n  try {\n    await initializeMsal();\n    const accounts = msalInstance.getAllAccounts();\n    \n    if (accounts.length === 0) {\n      throw new Error('No user account found');\n    }\n\n    const account = accounts[0];\n    const tokenRequest = {\n      scopes: ['https://graph.microsoft.com/.default'],\n      account: account\n    };\n\n    const tokenResponse = await msalInstance.acquireTokenSilent(tokenRequest);\n    \n    const graphClient = Client.init({\n      authProvider: (done) => {\n        done(null, tokenResponse.accessToken);\n      }\n    });\n\n    return graphClient;\n  } catch (error) {\n    console.error('Error getting Graph client:', error);\n    throw error;\n  }\n};\n\nexport const getCurrentUser = async () => {\n  try {\n    await initializeMsal();\n    const accounts = msalInstance.getAllAccounts();\n    \n    if (accounts.length > 0) {\n      return accounts[0];\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n};\n\n// Export function to get MSAL instance\nexport const getMsalInstance = async () => {\n  await initializeMsal();\n  return msalInstance;\n};\n"],"mappings":"qHAAA,OAASA,uBAAuB,KAAQ,qBAAqB,CAC7D,OAASC,MAAM,KAAQ,mCAAmC,CAC1D,OAASC,UAAU,CAAEC,YAAY,KAAQ,eAAe,CAExD,GAAI,CAAAC,YAAY,CAAG,IAAI,CAEvB,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CAACD,YAAY,CAAE,CACjBE,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEL,UAAU,CAAC,CACzDE,YAAY,CAAG,GAAI,CAAAJ,uBAAuB,CAACE,UAAU,CAAC,CACtD,KAAM,CAAAE,YAAY,CAACI,UAAU,CAAC,CAAC,CAC/BF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC9C,CACA,MAAO,CAAAH,YAAY,CACrB,CAAC,CAED,MAAO,MAAM,CAAAK,KAAK,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACFH,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxC,KAAM,CAAAF,cAAc,CAAC,CAAC,CAEtB;AACA,KAAM,CAAAK,QAAQ,CAAGN,YAAY,CAACO,cAAc,CAAC,CAAC,CAC9CL,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEG,QAAQ,CAAC,CAE3C,GAAIA,QAAQ,CAACE,MAAM,CAAG,CAAC,CAAE,CACvBN,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEG,QAAQ,CAAC,CAAC,CAAC,CAAC,CACnD,MAAO,CAAAA,QAAQ,CAAC,CAAC,CAAC,CACpB,CAEA;AACA,KAAM,CAAAG,MAAM,CAAGC,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC,CAEnD,GAAIH,MAAM,CAAE,CACVP,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAC5D;AACA,KAAM,CAAAH,YAAY,CAACa,aAAa,CAAAC,aAAA,CAAAA,aAAA,IAC3Bf,YAAY,MACfgB,MAAM,CAAE,gBAAgB,EACzB,CAAC,CACF;AACA,MAAO,KAAI,CACb,CAAC,IAAM,CACLb,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC;AACA,KAAM,CAAAa,aAAa,CAAG,KAAM,CAAAhB,YAAY,CAACiB,UAAU,CAAAH,aAAA,CAAAA,aAAA,IAC9Cf,YAAY,MACfgB,MAAM,CAAE,gBAAgB,EACzB,CAAC,CAEFb,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEa,aAAa,CAAC,CAC/C,MAAO,CAAAA,aAAa,CAACE,OAAO,CAC9B,CACF,CAAE,MAAOC,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,MAAM,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACFlB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjC,KAAM,CAAAF,cAAc,CAAC,CAAC,CACtB,KAAM,CAAAK,QAAQ,CAAGN,YAAY,CAACO,cAAc,CAAC,CAAC,CAC9C,GAAID,QAAQ,CAACE,MAAM,CAAG,CAAC,CAAE,CACvB;AACA,KAAM,CAAAC,MAAM,CAAGC,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC,CAEnD,GAAIH,MAAM,CAAE,CACVP,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC,CAC9D,KAAM,CAAAH,YAAY,CAACqB,cAAc,CAAC,CAAC,CACrC,CAAC,IAAM,CACL,KAAM,CAAArB,YAAY,CAACsB,WAAW,CAAC,CAAC,CAClC,CACApB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAClC,CACF,CAAE,MAAOgB,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAI,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACFrB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC,KAAM,CAAAF,cAAc,CAAC,CAAC,CACtB,KAAM,CAAAK,QAAQ,CAAGN,YAAY,CAACO,cAAc,CAAC,CAAC,CAE9C,GAAID,QAAQ,CAACE,MAAM,GAAK,CAAC,CAAE,CACzB,KAAM,IAAI,CAAAgB,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,KAAM,CAAAN,OAAO,CAAGZ,QAAQ,CAAC,CAAC,CAAC,CAC3B,KAAM,CAAAmB,YAAY,CAAG,CACnBC,MAAM,CAAE,CAAC,sCAAsC,CAAC,CAChDR,OAAO,CAAEA,OACX,CAAC,CAED,KAAM,CAAAS,aAAa,CAAG,KAAM,CAAA3B,YAAY,CAAC4B,kBAAkB,CAACH,YAAY,CAAC,CACzEvB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC1C,MAAO,CAAAwB,aAAa,CAACE,WAAW,CAClC,CAAE,MAAOV,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAW,qBAAqB,CAAG,KAAAA,CAAA,GAAY,CAC/C,GAAI,CACF5B,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3C,KAAM,CAAAF,cAAc,CAAC,CAAC,CACtB,KAAM,CAAA8B,QAAQ,CAAG,KAAM,CAAA/B,YAAY,CAAC8B,qBAAqB,CAAC,CAAC,CAE3D,GAAIC,QAAQ,CAAE,CACZ7B,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAE4B,QAAQ,CAAC,CAC3C,MAAO,CAAAA,QAAQ,CAACb,OAAO,CACzB,CAEA,MAAO,KAAI,CACb,CAAE,MAAOC,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACF,KAAM,CAAA/B,cAAc,CAAC,CAAC,CACtB,KAAM,CAAAK,QAAQ,CAAGN,YAAY,CAACO,cAAc,CAAC,CAAC,CAE9C,GAAID,QAAQ,CAACE,MAAM,GAAK,CAAC,CAAE,CACzB,KAAM,IAAI,CAAAgB,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,KAAM,CAAAN,OAAO,CAAGZ,QAAQ,CAAC,CAAC,CAAC,CAC3B,KAAM,CAAAmB,YAAY,CAAG,CACnBC,MAAM,CAAE,CAAC,sCAAsC,CAAC,CAChDR,OAAO,CAAEA,OACX,CAAC,CAED,KAAM,CAAAS,aAAa,CAAG,KAAM,CAAA3B,YAAY,CAAC4B,kBAAkB,CAACH,YAAY,CAAC,CAEzE,KAAM,CAAAQ,WAAW,CAAGpC,MAAM,CAACqC,IAAI,CAAC,CAC9BC,YAAY,CAAGC,IAAI,EAAK,CACtBA,IAAI,CAAC,IAAI,CAAET,aAAa,CAACE,WAAW,CAAC,CACvC,CACF,CAAC,CAAC,CAEF,MAAO,CAAAI,WAAW,CACpB,CAAE,MAAOd,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAkB,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACF,KAAM,CAAApC,cAAc,CAAC,CAAC,CACtB,KAAM,CAAAK,QAAQ,CAAGN,YAAY,CAACO,cAAc,CAAC,CAAC,CAE9C,GAAID,QAAQ,CAACE,MAAM,CAAG,CAAC,CAAE,CACvB,MAAO,CAAAF,QAAQ,CAAC,CAAC,CAAC,CACpB,CAEA,MAAO,KAAI,CACb,CAAE,MAAOa,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAmB,eAAe,CAAG,KAAAA,CAAA,GAAY,CACzC,KAAM,CAAArC,cAAc,CAAC,CAAC,CACtB,MAAO,CAAAD,YAAY,CACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}