{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @module TelemetryHandler\n */\nimport { isCustomHost, isGraphURL } from \"../GraphRequestUtil\";\nimport { PACKAGE_VERSION } from \"../Version\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { appendRequestHeader, generateUUID, getRequestHeader, setRequestHeader } from \"./MiddlewareUtil\";\nimport { TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\n * @class\n * @implements Middleware\n * Class for TelemetryHandler\n */\nexport class TelemetryHandler {\n  /**\n   * @public\n   * @async\n   * To execute the current middleware\n   * @param {Context} context - The context object of the request\n   * @returns A Promise that resolves to nothing\n   */\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = typeof context.request === \"string\" ? context.request : context.request.url;\n      if (isGraphURL(url) || context.customHosts && isCustomHost(url, context.customHosts)) {\n        // Add telemetry only if the request url is a Graph URL.\n        // Errors are reported as in issue #265 if headers are present when redirecting to a non Graph URL\n        let clientRequestId = getRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER);\n        if (!clientRequestId) {\n          clientRequestId = generateUUID();\n          setRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER, clientRequestId);\n        }\n        let sdkVersionValue = \"\".concat(TelemetryHandler.PRODUCT_NAME, \"/\").concat(PACKAGE_VERSION);\n        let options;\n        if (context.middlewareControl instanceof MiddlewareControl) {\n          options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);\n        }\n        if (options) {\n          const featureUsage = options.getFeatureUsage();\n          sdkVersionValue += \" (\".concat(TelemetryHandler.FEATURE_USAGE_STRING, \"=\").concat(featureUsage, \")\");\n        }\n        appendRequestHeader(context.request, context.options, TelemetryHandler.SDK_VERSION_HEADER, sdkVersionValue);\n      } else {\n        // Remove telemetry headers if present during redirection.\n        delete context.options.headers[TelemetryHandler.CLIENT_REQUEST_ID_HEADER];\n        delete context.options.headers[TelemetryHandler.SDK_VERSION_HEADER];\n      }\n      return yield this.nextMiddleware.execute(context);\n    });\n  }\n  /**\n   * @public\n   * To set the next middleware in the chain\n   * @param {Middleware} next - The middleware instance\n   * @returns Nothing\n   */\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n}\n/**\n * @private\n * @static\n * A member holding the name of the client request id header\n */\nTelemetryHandler.CLIENT_REQUEST_ID_HEADER = \"client-request-id\";\n/**\n * @private\n * @static\n * A member holding the name of the sdk version header\n */\nTelemetryHandler.SDK_VERSION_HEADER = \"SdkVersion\";\n/**\n * @private\n * @static\n * A member holding the language prefix for the sdk version header value\n */\nTelemetryHandler.PRODUCT_NAME = \"graph-js\";\n/**\n * @private\n * @static\n * A member holding the key for the feature usage metrics\n */\nTelemetryHandler.FEATURE_USAGE_STRING = \"featureUsage\";","map":{"version":3,"names":["isCustomHost","isGraphURL","PACKAGE_VERSION","MiddlewareControl","appendRequestHeader","generateUUID","getRequestHeader","setRequestHeader","TelemetryHandlerOptions","TelemetryHandler","execute","context","url","request","customHosts","clientRequestId","options","CLIENT_REQUEST_ID_HEADER","sdkVersionValue","concat","PRODUCT_NAME","middlewareControl","getMiddlewareOptions","featureUsage","getFeatureUsage","FEATURE_USAGE_STRING","SDK_VERSION_HEADER","headers","nextMiddleware","setNext","next"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/TelemetryHandler.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module TelemetryHandler\n */\nimport { isCustomHost, isGraphURL } from \"../GraphRequestUtil\";\nimport { Context } from \"../IContext\";\nimport { PACKAGE_VERSION } from \"../Version\";\nimport { Middleware } from \"./IMiddleware\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { appendRequestHeader, generateUUID, getRequestHeader, setRequestHeader } from \"./MiddlewareUtil\";\nimport { TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n\n/**\n * @class\n * @implements Middleware\n * Class for TelemetryHandler\n */\nexport class TelemetryHandler implements Middleware {\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the name of the client request id header\n\t */\n\tprivate static CLIENT_REQUEST_ID_HEADER = \"client-request-id\";\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the name of the sdk version header\n\t */\n\tprivate static SDK_VERSION_HEADER = \"SdkVersion\";\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the language prefix for the sdk version header value\n\t */\n\tprivate static PRODUCT_NAME = \"graph-js\";\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the key for the feature usage metrics\n\t */\n\tprivate static FEATURE_USAGE_STRING = \"featureUsage\";\n\n\t/**\n\t * @private\n\t * A member to hold next middleware in the middleware chain\n\t */\n\tprivate nextMiddleware: Middleware;\n\n\t/**\n\t * @public\n\t * @async\n\t * To execute the current middleware\n\t * @param {Context} context - The context object of the request\n\t * @returns A Promise that resolves to nothing\n\t */\n\tpublic async execute(context: Context): Promise<void> {\n\t\tconst url = typeof context.request === \"string\" ? context.request : context.request.url;\n\t\tif (isGraphURL(url) || (context.customHosts && isCustomHost(url, context.customHosts))) {\n\t\t\t// Add telemetry only if the request url is a Graph URL.\n\t\t\t// Errors are reported as in issue #265 if headers are present when redirecting to a non Graph URL\n\t\t\tlet clientRequestId: string = getRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER);\n\t\t\tif (!clientRequestId) {\n\t\t\t\tclientRequestId = generateUUID();\n\t\t\t\tsetRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER, clientRequestId);\n\t\t\t}\n\t\t\tlet sdkVersionValue = `${TelemetryHandler.PRODUCT_NAME}/${PACKAGE_VERSION}`;\n\t\t\tlet options: TelemetryHandlerOptions;\n\t\t\tif (context.middlewareControl instanceof MiddlewareControl) {\n\t\t\t\toptions = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions) as TelemetryHandlerOptions;\n\t\t\t}\n\t\t\tif (options) {\n\t\t\t\tconst featureUsage: string = options.getFeatureUsage();\n\t\t\t\tsdkVersionValue += ` (${TelemetryHandler.FEATURE_USAGE_STRING}=${featureUsage})`;\n\t\t\t}\n\t\t\tappendRequestHeader(context.request, context.options, TelemetryHandler.SDK_VERSION_HEADER, sdkVersionValue);\n\t\t} else {\n\t\t\t// Remove telemetry headers if present during redirection.\n\t\t\tdelete context.options.headers[TelemetryHandler.CLIENT_REQUEST_ID_HEADER];\n\t\t\tdelete context.options.headers[TelemetryHandler.SDK_VERSION_HEADER];\n\t\t}\n\t\treturn await this.nextMiddleware.execute(context);\n\t}\n\n\t/**\n\t * @public\n\t * To set the next middleware in the chain\n\t * @param {Middleware} next - The middleware instance\n\t * @returns Nothing\n\t */\n\tpublic setNext(next: Middleware): void {\n\t\tthis.nextMiddleware = next;\n\t}\n}\n"],"mappings":"AAAA;;;;;;;AAOA;;;AAGA,SAASA,YAAY,EAAEC,UAAU,QAAQ,qBAAqB;AAE9D,SAASC,eAAe,QAAQ,YAAY;AAE5C,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,mBAAmB,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,kBAAkB;AACxG,SAASC,uBAAuB,QAAQ,mCAAmC;AAE3E;;;;;AAKA,OAAM,MAAOC,gBAAgB;EAmC5B;;;;;;;EAOaC,OAAOA,CAACC,OAAgB;;MACpC,MAAMC,GAAG,GAAG,OAAOD,OAAO,CAACE,OAAO,KAAK,QAAQ,GAAGF,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACE,OAAO,CAACD,GAAG;MACvF,IAAIX,UAAU,CAACW,GAAG,CAAC,IAAKD,OAAO,CAACG,WAAW,IAAId,YAAY,CAACY,GAAG,EAAED,OAAO,CAACG,WAAW,CAAE,EAAE;QACvF;QACA;QACA,IAAIC,eAAe,GAAWT,gBAAgB,CAACK,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACK,OAAO,EAAEP,gBAAgB,CAACQ,wBAAwB,CAAC;QAC3H,IAAI,CAACF,eAAe,EAAE;UACrBA,eAAe,GAAGV,YAAY,EAAE;UAChCE,gBAAgB,CAACI,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACK,OAAO,EAAEP,gBAAgB,CAACQ,wBAAwB,EAAEF,eAAe,CAAC;;QAE/G,IAAIG,eAAe,MAAAC,MAAA,CAAMV,gBAAgB,CAACW,YAAY,OAAAD,MAAA,CAAIjB,eAAe,CAAE;QAC3E,IAAIc,OAAgC;QACpC,IAAIL,OAAO,CAACU,iBAAiB,YAAYlB,iBAAiB,EAAE;UAC3Da,OAAO,GAAGL,OAAO,CAACU,iBAAiB,CAACC,oBAAoB,CAACd,uBAAuB,CAA4B;;QAE7G,IAAIQ,OAAO,EAAE;UACZ,MAAMO,YAAY,GAAWP,OAAO,CAACQ,eAAe,EAAE;UACtDN,eAAe,SAAAC,MAAA,CAASV,gBAAgB,CAACgB,oBAAoB,OAAAN,MAAA,CAAII,YAAY,MAAG;;QAEjFnB,mBAAmB,CAACO,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACK,OAAO,EAAEP,gBAAgB,CAACiB,kBAAkB,EAAER,eAAe,CAAC;OAC3G,MAAM;QACN;QACA,OAAOP,OAAO,CAACK,OAAO,CAACW,OAAO,CAAClB,gBAAgB,CAACQ,wBAAwB,CAAC;QACzE,OAAON,OAAO,CAACK,OAAO,CAACW,OAAO,CAAClB,gBAAgB,CAACiB,kBAAkB,CAAC;;MAEpE,OAAO,MAAM,IAAI,CAACE,cAAc,CAAClB,OAAO,CAACC,OAAO,CAAC;IAClD,CAAC;;EAED;;;;;;EAMOkB,OAAOA,CAACC,IAAgB;IAC9B,IAAI,CAACF,cAAc,GAAGE,IAAI;EAC3B;;AA7EA;;;;;AAKerB,gBAAA,CAAAQ,wBAAwB,GAAG,mBAAmB;AAE7D;;;;;AAKeR,gBAAA,CAAAiB,kBAAkB,GAAG,YAAY;AAEhD;;;;;AAKejB,gBAAA,CAAAW,YAAY,GAAG,UAAU;AAExC;;;;;AAKeX,gBAAA,CAAAgB,oBAAoB,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}