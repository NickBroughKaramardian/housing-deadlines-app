{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @module OneDriveLargeFileUploadTask\n */\nimport { GraphClientError } from \"../GraphClientError\";\nimport { FileUpload } from \"./FileUploadTask/FileObjectClasses/FileUpload\";\nimport { LargeFileUploadTask } from \"./LargeFileUploadTask\";\nimport { getValidRangeSize } from \"./OneDriveLargeFileUploadTaskUtil\";\n/**\n * @class\n * Class representing OneDriveLargeFileUploadTask\n */\nexport class OneDriveLargeFileUploadTask extends LargeFileUploadTask {\n  /**\n   * @private\n   * @static\n   * Constructs the create session url for Onedrive\n   * @param {string} fileName - The name of the file\n   * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload\n   * @returns The constructed create session url\n   */\n  static constructCreateSessionUrl(fileName) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH;\n    fileName = fileName.trim();\n    path = path.trim();\n    if (path === \"\") {\n      path = \"/\";\n    }\n    if (path[0] !== \"/\") {\n      path = \"/\".concat(path);\n    }\n    if (path[path.length - 1] !== \"/\") {\n      path = \"\".concat(path, \"/\");\n    }\n    // we choose to encode each component of the file path separately because when encoding full URI\n    // with encodeURI, special characters like # or % in the file name doesn't get encoded as desired\n    return \"/me/drive/root:\".concat(path.split(\"/\").map(p => encodeURIComponent(p)).join(\"/\")).concat(encodeURIComponent(fileName), \":/createUploadSession\");\n  }\n  /**\n   * @private\n   * @static\n   * Get file information\n   * @param {Blob | Uint8Array | File} file - The file entity\n   * @param {string} fileName - The file name\n   * @returns {FileInfo} The file information\n   */\n  static getFileInfo(file, fileName) {\n    let content;\n    let size;\n    if (typeof Blob !== \"undefined\" && file instanceof Blob) {\n      content = new File([file], fileName);\n      size = content.size;\n    } else if (typeof File !== \"undefined\" && file instanceof File) {\n      content = file;\n      size = content.size;\n    } else if (typeof Uint8Array !== \"undefined\" && file instanceof Uint8Array) {\n      const b = file;\n      size = b.byteLength;\n      content = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n    }\n    return {\n      content,\n      size\n    };\n  }\n  /**\n   * @public\n   * @static\n   * @async\n   * Creates a OneDriveLargeFileUploadTask\n   * @param {Client} client - The GraphClient instance\n   * @param {Blob | Uint8Array | File} file - File represented as Blob, Uint8Array or File\n   * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\n   * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\n   */\n  static create(client, file, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!client || !file || !options) {\n        throw new GraphClientError(\"Please provide the Graph client instance, file object and OneDriveLargeFileUploadOptions value\");\n      }\n      const fileName = options.fileName;\n      const fileInfo = OneDriveLargeFileUploadTask.getFileInfo(file, fileName);\n      const fileObj = new FileUpload(fileInfo.content, fileName, fileInfo.size);\n      return this.createTaskWithFileObject(client, fileObj, options);\n    });\n  }\n  /**\n   * @public\n   * @static\n   * @async\n   * Creates a OneDriveLargeFileUploadTask\n   * @param {Client} client - The GraphClient instance\n   * @param {FileObject} fileObject - FileObject instance\n   * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\n   * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\n   */\n  static createTaskWithFileObject(client, fileObject, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!client || !fileObject || !options) {\n        throw new GraphClientError(\"Please provide the Graph client instance, FileObject interface implementation and OneDriveLargeFileUploadOptions value\");\n      }\n      const requestUrl = options.uploadSessionURL ? options.uploadSessionURL : OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);\n      const uploadSessionPayload = {\n        fileName: options.fileName,\n        fileDescription: options.fileDescription,\n        conflictBehavior: options.conflictBehavior\n      };\n      const session = yield OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, uploadSessionPayload);\n      const rangeSize = getValidRangeSize(options.rangeSize);\n      return new OneDriveLargeFileUploadTask(client, fileObject, session, {\n        rangeSize,\n        uploadEventHandlers: options.uploadEventHandlers\n      });\n    });\n  }\n  /**\n   * @public\n   * @static\n   * @async\n   * Makes request to the server to create an upload session\n   * @param {Client} client - The GraphClient instance\n   * @param {string} requestUrl - The URL to create the upload session\n   * @param {string} payloadOptions - The payload option. Default conflictBehavior is 'rename'\n   * @returns The promise that resolves to LargeFileUploadSession\n   */\n  static createUploadSession(client, requestUrl, payloadOptions) {\n    const _super = Object.create(null, {\n      createUploadSession: {\n        get: () => super.createUploadSession\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const payload = {\n        item: {\n          \"@microsoft.graph.conflictBehavior\": (payloadOptions === null || payloadOptions === void 0 ? void 0 : payloadOptions.conflictBehavior) || \"rename\",\n          name: payloadOptions === null || payloadOptions === void 0 ? void 0 : payloadOptions.fileName,\n          description: payloadOptions === null || payloadOptions === void 0 ? void 0 : payloadOptions.fileDescription\n        }\n      };\n      return _super.createUploadSession.call(this, client, requestUrl, payload);\n    });\n  }\n  /**\n   * @public\n   * @constructor\n   * Constructs a OneDriveLargeFileUploadTask\n   * @param {Client} client - The GraphClient instance\n   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\n   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\n   * @param {LargeFileUploadTaskOptions} options - The upload task options\n   * @returns An instance of OneDriveLargeFileUploadTask\n   */\n  constructor(client, file, uploadSession, options) {\n    super(client, file, uploadSession, options);\n  }\n  /**\n   * @public\n   * Commits upload session to end uploading\n   * @param {string} requestUrl - The URL to commit the upload session\n   * @param {string} conflictBehavior - Conflict behaviour option. Default is 'rename'\n   * @returns The promise resolves to committed response\n   */\n  commit(requestUrl) {\n    let conflictBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"rename\";\n    return __awaiter(this, void 0, void 0, function* () {\n      const payload = {\n        name: this.file.name,\n        \"@microsoft.graph.conflictBehavior\": conflictBehavior,\n        \"@microsoft.graph.sourceUrl\": this.uploadSession.url\n      };\n      return yield this.client.api(requestUrl).put(payload);\n    });\n  }\n}\n/**\n * @private\n * @static\n * Default path for the file being uploaded\n */\nOneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH = \"/\";","map":{"version":3,"names":["GraphClientError","FileUpload","LargeFileUploadTask","getValidRangeSize","OneDriveLargeFileUploadTask","constructCreateSessionUrl","fileName","path","arguments","length","undefined","DEFAULT_UPLOAD_PATH","trim","concat","split","map","p","encodeURIComponent","join","getFileInfo","file","content","size","Blob","File","Uint8Array","b","byteLength","buffer","slice","byteOffset","create","client","options","fileInfo","fileObj","createTaskWithFileObject","fileObject","requestUrl","uploadSessionURL","uploadSessionPayload","fileDescription","conflictBehavior","session","createUploadSession","rangeSize","uploadEventHandlers","payloadOptions","payload","item","name","description","_super","call","constructor","uploadSession","commit","url","api","put"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/tasks/OneDriveLargeFileUploadTask.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module OneDriveLargeFileUploadTask\n */\n\nimport { GraphClientError } from \"../GraphClientError\";\nimport { Client } from \"../index\";\nimport { FileUpload } from \"./FileUploadTask/FileObjectClasses/FileUpload\";\nimport { UploadEventHandlers } from \"./FileUploadTask/Interfaces/IUploadEventHandlers\";\nimport { FileObject, LargeFileUploadSession, LargeFileUploadTask, LargeFileUploadTaskOptions } from \"./LargeFileUploadTask\";\nimport { getValidRangeSize } from \"./OneDriveLargeFileUploadTaskUtil\";\n\n/**\n * @interface\n * Signature to define options when creating an upload task\n * @property {string} fileName - Specifies the name of a file to be uploaded (with extension)\n * @property {string} [fileDescription] - Specifies the description of the file to be uploaded\n * @property {string} [path] - The path to which the file needs to be uploaded\n * @property {number} [rangeSize] - Specifies the range chunk size\n * @property {string} [conflictBehavior] - Conflict behaviour option\n * @property {UploadEventHandlers} [uploadEventHandlers] - UploadEventHandlers attached to an upload task\n */\nexport interface OneDriveLargeFileUploadOptions {\n\tfileName: string;\n\tfileDescription?: string;\n\tpath?: string;\n\trangeSize?: number;\n\tconflictBehavior?: string;\n\tuploadEventHandlers?: UploadEventHandlers;\n    /// <summary>\n    /// Default upload session url is : \"/me/drive/root:/{file-path}:/createUploadSession\"\n    /// Set this property to override the default upload session url. Example: \"/me/drive/special/{name}\"\n    /// </summary>\n    uploadSessionURL?: string;\n}\n\n/**\n * @interface\n * Signature to define options when creating an upload task\n * @property {string} fileName - Specifies the name of a file to be uploaded (with extension)\n * @property {string} [fileDescription] - Specifies the description of the file to be uploaded\n * @property {string} [conflictBehavior] - Conflict behaviour option\n */\ninterface OneDriveFileUploadSessionPayLoad {\n\tfileName: string;\n\tfileDescription?: string;\n\tconflictBehavior?: string;\n}\n\n/**\n * @interface\n * Signature to define the file information when processing an upload task\n * @property {File | Uint8Array} content - The file content\n * @property {number} size - The size of file\n */\ninterface FileInfo {\n\tcontent: File | Uint8Array;\n\tsize: number;\n}\n\n/**\n * @class\n * Class representing OneDriveLargeFileUploadTask\n */\nexport class OneDriveLargeFileUploadTask<T> extends LargeFileUploadTask<T> {\n\t/**\n\t * @private\n\t * @static\n\t * Default path for the file being uploaded\n\t */\n\tprivate static DEFAULT_UPLOAD_PATH = \"/\";\n\n\t/**\n\t * @private\n\t * @static\n\t * Constructs the create session url for Onedrive\n\t * @param {string} fileName - The name of the file\n\t * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload\n\t * @returns The constructed create session url\n\t */\n\tprivate static constructCreateSessionUrl(fileName: string, path: string = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH): string {\n\t\tfileName = fileName.trim();\n\t\tpath = path.trim();\n\t\tif (path === \"\") {\n\t\t\tpath = \"/\";\n\t\t}\n\t\tif (path[0] !== \"/\") {\n\t\t\tpath = `/${path}`;\n\t\t}\n\t\tif (path[path.length - 1] !== \"/\") {\n\t\t\tpath = `${path}/`;\n\t\t}\n\t\t// we choose to encode each component of the file path separately because when encoding full URI\n\t\t// with encodeURI, special characters like # or % in the file name doesn't get encoded as desired\n\t\treturn `/me/drive/root:${path\n\t\t\t.split(\"/\")\n\t\t\t.map((p) => encodeURIComponent(p))\n\t\t\t.join(\"/\")}${encodeURIComponent(fileName)}:/createUploadSession`;\n\t}\n\n\t/**\n\t * @private\n\t * @static\n\t * Get file information\n\t * @param {Blob | Uint8Array | File} file - The file entity\n\t * @param {string} fileName - The file name\n\t * @returns {FileInfo} The file information\n\t */\n\tprivate static getFileInfo(file: Blob | Uint8Array | File, fileName: string): FileInfo {\n\t\tlet content;\n\t\tlet size;\n\t\tif (typeof Blob !== \"undefined\" && file instanceof Blob) {\n\t\t\tcontent = new File([file as Blob], fileName);\n\t\t\tsize = content.size;\n\t\t} else if (typeof File !== \"undefined\" && file instanceof File) {\n\t\t\tcontent = file as File;\n\t\t\tsize = content.size;\n\t\t} else if (typeof Uint8Array !== \"undefined\" && file instanceof Uint8Array) {\n\t\t\tconst b = file as Uint8Array;\n\t\t\tsize = b.byteLength;\n\t\t\tcontent = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n\t\t}\n\t\treturn {\n\t\t\tcontent,\n\t\t\tsize,\n\t\t};\n\t}\n\n\t/**\n\t * @public\n\t * @static\n\t * @async\n\t * Creates a OneDriveLargeFileUploadTask\n\t * @param {Client} client - The GraphClient instance\n\t * @param {Blob | Uint8Array | File} file - File represented as Blob, Uint8Array or File\n\t * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\n\t * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\n\t */\n\tpublic static async create(client: Client, file: Blob | Uint8Array | File, options: OneDriveLargeFileUploadOptions): Promise<OneDriveLargeFileUploadTask<Blob | ArrayBuffer | Uint8Array>> {\n\t\tif (!client || !file || !options) {\n\t\t\tthrow new GraphClientError(\"Please provide the Graph client instance, file object and OneDriveLargeFileUploadOptions value\");\n\t\t}\n\t\tconst fileName = options.fileName;\n\t\tconst fileInfo = OneDriveLargeFileUploadTask.getFileInfo(file, fileName);\n\t\tconst fileObj = new FileUpload(fileInfo.content, fileName, fileInfo.size);\n\t\treturn this.createTaskWithFileObject<Blob | ArrayBuffer | Uint8Array>(client, fileObj, options);\n\t}\n\n\t/**\n\t * @public\n\t * @static\n\t * @async\n\t * Creates a OneDriveLargeFileUploadTask\n\t * @param {Client} client - The GraphClient instance\n\t * @param {FileObject} fileObject - FileObject instance\n\t * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\n\t * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\n\t */\n\tpublic static async createTaskWithFileObject<T>(client: Client, fileObject: FileObject<T>, options: OneDriveLargeFileUploadOptions): Promise<OneDriveLargeFileUploadTask<T>> {\n\t\tif (!client || !fileObject || !options) {\n\t\t\tthrow new GraphClientError(\"Please provide the Graph client instance, FileObject interface implementation and OneDriveLargeFileUploadOptions value\");\n\t\t}\n\t\tconst requestUrl = options.uploadSessionURL ? options.uploadSessionURL: OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);\n\t\tconst uploadSessionPayload: OneDriveFileUploadSessionPayLoad = {\n\t\t\tfileName: options.fileName,\n\t\t\tfileDescription: options.fileDescription,\n\t\t\tconflictBehavior: options.conflictBehavior,\n\t\t};\n\t\tconst session = await OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, uploadSessionPayload);\n\t\tconst rangeSize = getValidRangeSize(options.rangeSize);\n\t\treturn new OneDriveLargeFileUploadTask(client, fileObject, session, {\n\t\t\trangeSize,\n\t\t\tuploadEventHandlers: options.uploadEventHandlers,\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @static\n\t * @async\n\t * Makes request to the server to create an upload session\n\t * @param {Client} client - The GraphClient instance\n\t * @param {string} requestUrl - The URL to create the upload session\n\t * @param {string} payloadOptions - The payload option. Default conflictBehavior is 'rename'\n\t * @returns The promise that resolves to LargeFileUploadSession\n\t */\n\tpublic static async createUploadSession(client: Client, requestUrl: string, payloadOptions: OneDriveFileUploadSessionPayLoad): Promise<LargeFileUploadSession> {\n\t\tconst payload = {\n\t\t\titem: {\n\t\t\t\t\"@microsoft.graph.conflictBehavior\": payloadOptions?.conflictBehavior || \"rename\",\n\t\t\t\tname: payloadOptions?.fileName,\n\t\t\t\tdescription: payloadOptions?.fileDescription,\n\t\t\t},\n\t\t};\n\t\treturn super.createUploadSession(client, requestUrl, payload);\n\t}\n\n\t/**\n\t * @public\n\t * @constructor\n\t * Constructs a OneDriveLargeFileUploadTask\n\t * @param {Client} client - The GraphClient instance\n\t * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\n\t * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\n\t * @param {LargeFileUploadTaskOptions} options - The upload task options\n\t * @returns An instance of OneDriveLargeFileUploadTask\n\t */\n\tpublic constructor(client: Client, file: FileObject<T>, uploadSession: LargeFileUploadSession, options: LargeFileUploadTaskOptions) {\n\t\tsuper(client, file, uploadSession, options);\n\t}\n\n\t/**\n\t * @public\n\t * Commits upload session to end uploading\n\t * @param {string} requestUrl - The URL to commit the upload session\n\t * @param {string} conflictBehavior - Conflict behaviour option. Default is 'rename'\n\t * @returns The promise resolves to committed response\n\t */\n\tpublic async commit(requestUrl: string, conflictBehavior = \"rename\"): Promise<unknown> {\n\t\tconst payload = {\n\t\t\tname: this.file.name,\n\t\t\t\"@microsoft.graph.conflictBehavior\": conflictBehavior,\n\t\t\t\"@microsoft.graph.sourceUrl\": this.uploadSession.url,\n\t\t};\n\t\treturn await this.client.api(requestUrl).put(payload);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}