{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\nimport { RequestMethod } from \"../RequestMethod\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { cloneRequestWithNewUrl } from \"./MiddlewareUtil\";\nimport { RedirectHandlerOptions } from \"./options/RedirectHandlerOptions\";\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\n * @class\n * Class\n * @implements Middleware\n * Class representing RedirectHandler\n */\nexport class RedirectHandler {\n  /**\n   * @public\n   * @constructor\n   * To create an instance of RedirectHandler\n   * @param {RedirectHandlerOptions} [options = new RedirectHandlerOptions()] - The redirect handler options instance\n   * @returns An instance of RedirectHandler\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new RedirectHandlerOptions();\n    this.options = options;\n  }\n  /**\n   * @private\n   * To check whether the response has the redirect status code or not\n   * @param {Response} response - The response object\n   * @returns A boolean representing whether the response contains the redirect status code or not\n   */\n  isRedirect(response) {\n    return RedirectHandler.REDIRECT_STATUS_CODES.indexOf(response.status) !== -1;\n  }\n  /**\n   * @private\n   * To check whether the response has location header or not\n   * @param {Response} response - The response object\n   * @returns A boolean representing the whether the response has location header or not\n   */\n  hasLocationHeader(response) {\n    return response.headers.has(RedirectHandler.LOCATION_HEADER);\n  }\n  /**\n   * @private\n   * To get the redirect url from location header in response object\n   * @param {Response} response - The response object\n   * @returns A redirect url from location header\n   */\n  getLocationHeader(response) {\n    return response.headers.get(RedirectHandler.LOCATION_HEADER);\n  }\n  /**\n   * @private\n   * To check whether the given url is a relative url or not\n   * @param {string} url - The url string value\n   * @returns A boolean representing whether the given url is a relative url or not\n   */\n  isRelativeURL(url) {\n    return url.indexOf(\"://\") === -1;\n  }\n  /**\n   * @private\n   * To check whether the authorization header in the request should be dropped for consequent redirected requests\n   * @param {string} requestUrl - The request url value\n   * @param {string} redirectUrl - The redirect url value\n   * @returns A boolean representing whether the authorization header in the request should be dropped for consequent redirected requests\n   */\n  shouldDropAuthorizationHeader(requestUrl, redirectUrl) {\n    const schemeHostRegex = /^[A-Za-z].+?:\\/\\/.+?(?=\\/|$)/;\n    const requestMatches = schemeHostRegex.exec(requestUrl);\n    let requestAuthority;\n    let redirectAuthority;\n    if (requestMatches !== null) {\n      requestAuthority = requestMatches[0];\n    }\n    const redirectMatches = schemeHostRegex.exec(redirectUrl);\n    if (redirectMatches !== null) {\n      redirectAuthority = redirectMatches[0];\n    }\n    return typeof requestAuthority !== \"undefined\" && typeof redirectAuthority !== \"undefined\" && requestAuthority !== redirectAuthority;\n  }\n  /**\n   * @private\n   * @async\n   * To update a request url with the redirect url\n   * @param {string} redirectUrl - The redirect url value\n   * @param {Context} context - The context object value\n   * @returns Nothing\n   */\n  updateRequestUrl(redirectUrl, context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      context.request = typeof context.request === \"string\" ? redirectUrl : yield cloneRequestWithNewUrl(redirectUrl, context.request);\n    });\n  }\n  /**\n   * @private\n   * To get the options for execution of the middleware\n   * @param {Context} context - The context object\n   * @returns A options for middleware execution\n   */\n  getOptions(context) {\n    let options;\n    if (context.middlewareControl instanceof MiddlewareControl) {\n      options = context.middlewareControl.getMiddlewareOptions(RedirectHandlerOptions);\n    }\n    if (typeof options === \"undefined\") {\n      options = Object.assign(new RedirectHandlerOptions(), this.options);\n    }\n    return options;\n  }\n  /**\n   * @private\n   * @async\n   * To execute the next middleware and to handle in case of redirect response returned by the server\n   * @param {Context} context - The context object\n   * @param {number} redirectCount - The redirect count value\n   * @param {RedirectHandlerOptions} options - The redirect handler options instance\n   * @returns A promise that resolves to nothing\n   */\n  executeWithRedirect(context, redirectCount, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.nextMiddleware.execute(context);\n      const response = context.response;\n      if (redirectCount < options.maxRedirects && this.isRedirect(response) && this.hasLocationHeader(response) && options.shouldRedirect(response)) {\n        ++redirectCount;\n        if (response.status === RedirectHandler.STATUS_CODE_SEE_OTHER) {\n          context.options.method = RequestMethod.GET;\n          delete context.options.body;\n        } else {\n          const redirectUrl = this.getLocationHeader(response);\n          if (!this.isRelativeURL(redirectUrl) && this.shouldDropAuthorizationHeader(response.url, redirectUrl)) {\n            delete context.options.headers[RedirectHandler.AUTHORIZATION_HEADER];\n          }\n          yield this.updateRequestUrl(redirectUrl, context);\n        }\n        yield this.executeWithRedirect(context, redirectCount, options);\n      } else {\n        return;\n      }\n    });\n  }\n  /**\n   * @public\n   * @async\n   * To execute the current middleware\n   * @param {Context} context - The context object of the request\n   * @returns A Promise that resolves to nothing\n   */\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const redirectCount = 0;\n      const options = this.getOptions(context);\n      context.options.redirect = RedirectHandler.MANUAL_REDIRECT;\n      TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.REDIRECT_HANDLER_ENABLED);\n      return yield this.executeWithRedirect(context, redirectCount, options);\n    });\n  }\n  /**\n   * @public\n   * To set the next middleware in the chain\n   * @param {Middleware} next - The middleware instance\n   * @returns Nothing\n   */\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n}\n/**\n * @private\n * @static\n * A member holding the array of redirect status codes\n */\nRedirectHandler.REDIRECT_STATUS_CODES = [301, 302, 303, 307, 308 // Moved Permanently\n];\n/**\n * @private\n * @static\n * A member holding SeeOther status code\n */\nRedirectHandler.STATUS_CODE_SEE_OTHER = 303;\n/**\n * @private\n * @static\n * A member holding the name of the location header\n */\nRedirectHandler.LOCATION_HEADER = \"Location\";\n/**\n * @private\n * @static\n * A member representing the authorization header name\n */\nRedirectHandler.AUTHORIZATION_HEADER = \"Authorization\";\n/**\n * @private\n * @static\n * A member holding the manual redirect value\n */\nRedirectHandler.MANUAL_REDIRECT = \"manual\";","map":{"version":3,"names":["RequestMethod","MiddlewareControl","cloneRequestWithNewUrl","RedirectHandlerOptions","FeatureUsageFlag","TelemetryHandlerOptions","RedirectHandler","constructor","options","arguments","length","undefined","isRedirect","response","REDIRECT_STATUS_CODES","indexOf","status","hasLocationHeader","headers","has","LOCATION_HEADER","getLocationHeader","get","isRelativeURL","url","shouldDropAuthorizationHeader","requestUrl","redirectUrl","schemeHostRegex","requestMatches","exec","requestAuthority","redirectAuthority","redirectMatches","updateRequestUrl","context","request","getOptions","middlewareControl","getMiddlewareOptions","Object","assign","executeWithRedirect","redirectCount","nextMiddleware","execute","maxRedirects","shouldRedirect","STATUS_CODE_SEE_OTHER","method","GET","body","AUTHORIZATION_HEADER","redirect","MANUAL_REDIRECT","updateFeatureUsageFlag","REDIRECT_HANDLER_ENABLED","setNext","next"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/RedirectHandler.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module RedirectHandler\n */\n\nimport { Context } from \"../IContext\";\nimport { RequestMethod } from \"../RequestMethod\";\nimport { Middleware } from \"./IMiddleware\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { cloneRequestWithNewUrl } from \"./MiddlewareUtil\";\nimport { RedirectHandlerOptions } from \"./options/RedirectHandlerOptions\";\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n\n/**\n * @class\n * Class\n * @implements Middleware\n * Class representing RedirectHandler\n */\nexport class RedirectHandler implements Middleware {\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the array of redirect status codes\n\t */\n\tprivate static REDIRECT_STATUS_CODES: number[] = [\n\t\t301, // Moved Permanently\n\t\t302, // Found\n\t\t303, // See Other\n\t\t307, // Temporary Permanently\n\t\t308, // Moved Permanently\n\t];\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding SeeOther status code\n\t */\n\tprivate static STATUS_CODE_SEE_OTHER = 303;\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the name of the location header\n\t */\n\tprivate static LOCATION_HEADER = \"Location\";\n\n\t/**\n\t * @private\n\t * @static\n\t * A member representing the authorization header name\n\t */\n\tprivate static AUTHORIZATION_HEADER = \"Authorization\";\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding the manual redirect value\n\t */\n\tprivate static MANUAL_REDIRECT: RequestRedirect = \"manual\";\n\n\t/**\n\t * @private\n\t * A member holding options to customize the handler behavior\n\t */\n\tprivate options: RedirectHandlerOptions;\n\n\t/**\n\t * @private\n\t * A member to hold next middleware in the middleware chain\n\t */\n\tprivate nextMiddleware: Middleware;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * To create an instance of RedirectHandler\n\t * @param {RedirectHandlerOptions} [options = new RedirectHandlerOptions()] - The redirect handler options instance\n\t * @returns An instance of RedirectHandler\n\t */\n\n\tpublic constructor(options: RedirectHandlerOptions = new RedirectHandlerOptions()) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @private\n\t * To check whether the response has the redirect status code or not\n\t * @param {Response} response - The response object\n\t * @returns A boolean representing whether the response contains the redirect status code or not\n\t */\n\tprivate isRedirect(response: Response): boolean {\n\t\treturn RedirectHandler.REDIRECT_STATUS_CODES.indexOf(response.status) !== -1;\n\t}\n\n\t/**\n\t * @private\n\t * To check whether the response has location header or not\n\t * @param {Response} response - The response object\n\t * @returns A boolean representing the whether the response has location header or not\n\t */\n\tprivate hasLocationHeader(response: Response): boolean {\n\t\treturn response.headers.has(RedirectHandler.LOCATION_HEADER);\n\t}\n\n\t/**\n\t * @private\n\t * To get the redirect url from location header in response object\n\t * @param {Response} response - The response object\n\t * @returns A redirect url from location header\n\t */\n\tprivate getLocationHeader(response: Response): string {\n\t\treturn response.headers.get(RedirectHandler.LOCATION_HEADER);\n\t}\n\n\t/**\n\t * @private\n\t * To check whether the given url is a relative url or not\n\t * @param {string} url - The url string value\n\t * @returns A boolean representing whether the given url is a relative url or not\n\t */\n\tprivate isRelativeURL(url: string): boolean {\n\t\treturn url.indexOf(\"://\") === -1;\n\t}\n\n\t/**\n\t * @private\n\t * To check whether the authorization header in the request should be dropped for consequent redirected requests\n\t * @param {string} requestUrl - The request url value\n\t * @param {string} redirectUrl - The redirect url value\n\t * @returns A boolean representing whether the authorization header in the request should be dropped for consequent redirected requests\n\t */\n\tprivate shouldDropAuthorizationHeader(requestUrl: string, redirectUrl: string): boolean {\n\t\tconst schemeHostRegex = /^[A-Za-z].+?:\\/\\/.+?(?=\\/|$)/;\n\t\tconst requestMatches: string[] = schemeHostRegex.exec(requestUrl);\n\t\tlet requestAuthority: string;\n\t\tlet redirectAuthority: string;\n\t\tif (requestMatches !== null) {\n\t\t\trequestAuthority = requestMatches[0];\n\t\t}\n\t\tconst redirectMatches: string[] = schemeHostRegex.exec(redirectUrl);\n\t\tif (redirectMatches !== null) {\n\t\t\tredirectAuthority = redirectMatches[0];\n\t\t}\n\t\treturn typeof requestAuthority !== \"undefined\" && typeof redirectAuthority !== \"undefined\" && requestAuthority !== redirectAuthority;\n\t}\n\n\t/**\n\t * @private\n\t * @async\n\t * To update a request url with the redirect url\n\t * @param {string} redirectUrl - The redirect url value\n\t * @param {Context} context - The context object value\n\t * @returns Nothing\n\t */\n\tprivate async updateRequestUrl(redirectUrl: string, context: Context): Promise<void> {\n\t\tcontext.request = typeof context.request === \"string\" ? redirectUrl : await cloneRequestWithNewUrl(redirectUrl, context.request as Request);\n\t}\n\n\t/**\n\t * @private\n\t * To get the options for execution of the middleware\n\t * @param {Context} context - The context object\n\t * @returns A options for middleware execution\n\t */\n\tprivate getOptions(context: Context): RedirectHandlerOptions {\n\t\tlet options: RedirectHandlerOptions;\n\t\tif (context.middlewareControl instanceof MiddlewareControl) {\n\t\t\toptions = context.middlewareControl.getMiddlewareOptions(RedirectHandlerOptions) as RedirectHandlerOptions;\n\t\t}\n\t\tif (typeof options === \"undefined\") {\n\t\t\toptions = Object.assign(new RedirectHandlerOptions(), this.options);\n\t\t}\n\t\treturn options;\n\t}\n\n\t/**\n\t * @private\n\t * @async\n\t * To execute the next middleware and to handle in case of redirect response returned by the server\n\t * @param {Context} context - The context object\n\t * @param {number} redirectCount - The redirect count value\n\t * @param {RedirectHandlerOptions} options - The redirect handler options instance\n\t * @returns A promise that resolves to nothing\n\t */\n\tprivate async executeWithRedirect(context: Context, redirectCount: number, options: RedirectHandlerOptions): Promise<void> {\n\t\tawait this.nextMiddleware.execute(context);\n\t\tconst response = context.response;\n\t\tif (redirectCount < options.maxRedirects && this.isRedirect(response) && this.hasLocationHeader(response) && options.shouldRedirect(response)) {\n\t\t\t++redirectCount;\n\t\t\tif (response.status === RedirectHandler.STATUS_CODE_SEE_OTHER) {\n\t\t\t\tcontext.options.method = RequestMethod.GET;\n\t\t\t\tdelete context.options.body;\n\t\t\t} else {\n\t\t\t\tconst redirectUrl: string = this.getLocationHeader(response);\n\t\t\t\tif (!this.isRelativeURL(redirectUrl) && this.shouldDropAuthorizationHeader(response.url, redirectUrl)) {\n\t\t\t\t\tdelete context.options.headers[RedirectHandler.AUTHORIZATION_HEADER];\n\t\t\t\t}\n\t\t\t\tawait this.updateRequestUrl(redirectUrl, context);\n\t\t\t}\n\t\t\tawait this.executeWithRedirect(context, redirectCount, options);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * To execute the current middleware\n\t * @param {Context} context - The context object of the request\n\t * @returns A Promise that resolves to nothing\n\t */\n\tpublic async execute(context: Context): Promise<void> {\n\t\tconst redirectCount = 0;\n\t\tconst options = this.getOptions(context);\n\t\tcontext.options.redirect = RedirectHandler.MANUAL_REDIRECT;\n\t\tTelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.REDIRECT_HANDLER_ENABLED);\n\t\treturn await this.executeWithRedirect(context, redirectCount, options);\n\t}\n\n\t/**\n\t * @public\n\t * To set the next middleware in the chain\n\t * @param {Middleware} next - The middleware instance\n\t * @returns Nothing\n\t */\n\tpublic setNext(next: Middleware): void {\n\t\tthis.nextMiddleware = next;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}