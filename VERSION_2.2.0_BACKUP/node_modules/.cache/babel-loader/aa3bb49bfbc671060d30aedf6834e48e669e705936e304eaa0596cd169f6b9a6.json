{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @constant\n * @function\n * Validates availability of Promise and fetch in global context\n * @returns The true in case the Promise and fetch available, otherwise throws error\n */\nexport const validatePolyFilling = () => {\n  if (typeof Promise === \"undefined\" && typeof fetch === \"undefined\") {\n    const error = new Error(\"Library cannot function without Promise and fetch. So, please provide polyfill for them.\");\n    error.name = \"PolyFillNotAvailable\";\n    throw error;\n  } else if (typeof Promise === \"undefined\") {\n    const error = new Error(\"Library cannot function without Promise. So, please provide polyfill for it.\");\n    error.name = \"PolyFillNotAvailable\";\n    throw error;\n  } else if (typeof fetch === \"undefined\") {\n    const error = new Error(\"Library cannot function without fetch. So, please provide polyfill for it.\");\n    error.name = \"PolyFillNotAvailable\";\n    throw error;\n  }\n  return true;\n};","map":{"version":3,"names":["validatePolyFilling","Promise","fetch","error","Error","name"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/ValidatePolyFilling.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @constant\n * @function\n * Validates availability of Promise and fetch in global context\n * @returns The true in case the Promise and fetch available, otherwise throws error\n */\n\nexport const validatePolyFilling = (): boolean => {\n\tif (typeof Promise === \"undefined\" && typeof fetch === \"undefined\") {\n\t\tconst error = new Error(\"Library cannot function without Promise and fetch. So, please provide polyfill for them.\");\n\t\terror.name = \"PolyFillNotAvailable\";\n\t\tthrow error;\n\t} else if (typeof Promise === \"undefined\") {\n\t\tconst error = new Error(\"Library cannot function without Promise. So, please provide polyfill for it.\");\n\t\terror.name = \"PolyFillNotAvailable\";\n\t\tthrow error;\n\t} else if (typeof fetch === \"undefined\") {\n\t\tconst error = new Error(\"Library cannot function without fetch. So, please provide polyfill for it.\");\n\t\terror.name = \"PolyFillNotAvailable\";\n\t\tthrow error;\n\t}\n\treturn true;\n};\n"],"mappings":"AAAA;;;;;;AAOA;;;;;;AAOA,OAAO,MAAMA,mBAAmB,GAAGA,CAAA,KAAc;EAChD,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;IACnE,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,0FAA0F,CAAC;IACnHD,KAAK,CAACE,IAAI,GAAG,sBAAsB;IACnC,MAAMF,KAAK;GACX,MAAM,IAAI,OAAOF,OAAO,KAAK,WAAW,EAAE;IAC1C,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAC,8EAA8E,CAAC;IACvGD,KAAK,CAACE,IAAI,GAAG,sBAAsB;IACnC,MAAMF,KAAK;GACX,MAAM,IAAI,OAAOD,KAAK,KAAK,WAAW,EAAE;IACxC,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,4EAA4E,CAAC;IACrGD,KAAK,CAACE,IAAI,GAAG,sBAAsB;IACnC,MAAMF,KAAK;;EAEZ,OAAO,IAAI;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}