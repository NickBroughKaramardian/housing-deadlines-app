{"ast":null,"code":"import _objectSpread from\"/Users/nic/housing-deadlines-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Global task store - single source of truth for all pages\nclass GlobalTaskStore{constructor(){this.tasks=[];this.instances=[];this.listeners=[];this.isLoading=false;}// Subscribe to changes\nsubscribe(listener){this.listeners.push(listener);return()=>{this.listeners=this.listeners.filter(l=>l!==listener);};}// Notify all listeners of changes\nnotify(){this.listeners.forEach(listener=>listener(this.tasks,this.instances));}// Set tasks (called by Database page)\nsetTasks(tasks){console.log('GlobalTaskStore: Setting',tasks.length,'tasks');this.tasks=tasks;this.notify();}// Get current tasks (called by Calendar/Gantt/Sort pages)\ngetTasks(){return this.tasks;}// Get current instances\ngetInstances(){return this.instances;}// Get combined tasks and instances\n// Filter out ALL parent tasks - they should only appear in Database tab\n// All tasks (recurring and non-recurring) now have clones in the sub-database\n// Deadline views should ONLY show instances/clones\ngetAllTasks(){// Return ONLY instances - no parent tasks\n// This ensures all work is done on the sub-database clones\nreturn[...this.instances];}// Set combined tasks and instances (for other pages to use)\nsetAllTasks(allTasks){console.log('GlobalTaskStore: Setting combined tasks:',allTasks.length,'total items');// Split back into tasks and instances for internal storage\nthis.tasks=allTasks.filter(task=>!task.isInstance);this.instances=allTasks.filter(task=>task.isInstance);this.notify();}// Update a single task (called by Database page)\nupdateTask(taskId,updates){// First try to update in tasks array\nconst taskIndex=this.tasks.findIndex(t=>t.id===taskId);if(taskIndex!==-1){this.tasks[taskIndex]=_objectSpread(_objectSpread({},this.tasks[taskIndex]),updates);console.log('GlobalTaskStore: Updated task',taskId,'with',updates);this.notify();return;}// If not found in tasks, try to update in instances array\nconst instanceIndex=this.instances.findIndex(i=>i.id===taskId);if(instanceIndex!==-1){this.instances[instanceIndex]=_objectSpread(_objectSpread({},this.instances[instanceIndex]),updates);console.log('GlobalTaskStore: Updated instance',taskId,'with',updates);this.notify();return;}console.log('GlobalTaskStore: Task/instance not found for update:',taskId);}// Add a new task (called by Database page)\naddTask(task){this.tasks.push(task);console.log('GlobalTaskStore: Added task',task.id);this.notify();}// Delete a task (called by Database page)\ndeleteTask(taskId){this.tasks=this.tasks.filter(t=>t.id!==taskId);console.log('GlobalTaskStore: Deleted task',taskId);this.notify();}// Set instances (called by Database page)\nsetInstances(instances){console.log('GlobalTaskStore: Setting',instances.length,'instances');this.instances=instances;this.notify();}// Update a single instance (called by Database page)\nupdateInstance(instanceId,updates){const instanceIndex=this.instances.findIndex(i=>i.id===instanceId);if(instanceIndex!==-1){this.instances[instanceIndex]=_objectSpread(_objectSpread({},this.instances[instanceIndex]),updates);console.log('GlobalTaskStore: Updated instance',instanceId,'with',updates);this.notify();}}// Add a new instance (called by Database page)\naddInstance(instance){this.instances.push(instance);console.log('GlobalTaskStore: Added instance',instance.id);this.notify();}// Delete an instance (called by Database page)\ndeleteInstance(instanceId){this.instances=this.instances.filter(i=>i.id!==instanceId);console.log('GlobalTaskStore: Deleted instance',instanceId);this.notify();}setLoading(loading){this.isLoading=loading;this.notify();}}// Create singleton instance\nexport const globalTaskStore=new GlobalTaskStore();","map":{"version":3,"names":["GlobalTaskStore","constructor","tasks","instances","listeners","isLoading","subscribe","listener","push","filter","l","notify","forEach","setTasks","console","log","length","getTasks","getInstances","getAllTasks","setAllTasks","allTasks","task","isInstance","updateTask","taskId","updates","taskIndex","findIndex","t","id","_objectSpread","instanceIndex","i","addTask","deleteTask","setInstances","updateInstance","instanceId","addInstance","instance","deleteInstance","setLoading","loading","globalTaskStore"],"sources":["/Users/nic/housing-deadlines-app/VERSION_2.2.0_BACKUP/src/globalTaskStore.js"],"sourcesContent":["// Global task store - single source of truth for all pages\nclass GlobalTaskStore {\n  constructor() {\n    this.tasks = [];\n    this.instances = [];\n    this.listeners = [];\n    this.isLoading = false;\n  }\n\n  // Subscribe to changes\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  // Notify all listeners of changes\n  notify() {\n    this.listeners.forEach(listener => listener(this.tasks, this.instances));\n  }\n\n  // Set tasks (called by Database page)\n  setTasks(tasks) {\n    console.log('GlobalTaskStore: Setting', tasks.length, 'tasks');\n    this.tasks = tasks;\n    this.notify();\n  }\n\n  // Get current tasks (called by Calendar/Gantt/Sort pages)\n  getTasks() {\n    return this.tasks;\n  }\n\n  // Get current instances\n  getInstances() {\n    return this.instances;\n  }\n\n  // Get combined tasks and instances\n  // Filter out ALL parent tasks - they should only appear in Database tab\n  // All tasks (recurring and non-recurring) now have clones in the sub-database\n  // Deadline views should ONLY show instances/clones\n  getAllTasks() {\n    // Return ONLY instances - no parent tasks\n    // This ensures all work is done on the sub-database clones\n    return [...this.instances];\n  }\n\n  // Set combined tasks and instances (for other pages to use)\n  setAllTasks(allTasks) {\n    console.log('GlobalTaskStore: Setting combined tasks:', allTasks.length, 'total items');\n    // Split back into tasks and instances for internal storage\n    this.tasks = allTasks.filter(task => !task.isInstance);\n    this.instances = allTasks.filter(task => task.isInstance);\n    this.notify();\n  }\n\n  // Update a single task (called by Database page)\n  updateTask(taskId, updates) {\n    // First try to update in tasks array\n    const taskIndex = this.tasks.findIndex(t => t.id === taskId);\n    if (taskIndex !== -1) {\n      this.tasks[taskIndex] = { ...this.tasks[taskIndex], ...updates };\n      console.log('GlobalTaskStore: Updated task', taskId, 'with', updates);\n      this.notify();\n      return;\n    }\n    \n    // If not found in tasks, try to update in instances array\n    const instanceIndex = this.instances.findIndex(i => i.id === taskId);\n    if (instanceIndex !== -1) {\n      this.instances[instanceIndex] = { ...this.instances[instanceIndex], ...updates };\n      console.log('GlobalTaskStore: Updated instance', taskId, 'with', updates);\n      this.notify();\n      return;\n    }\n    \n    console.log('GlobalTaskStore: Task/instance not found for update:', taskId);\n  }\n\n  // Add a new task (called by Database page)\n  addTask(task) {\n    this.tasks.push(task);\n    console.log('GlobalTaskStore: Added task', task.id);\n    this.notify();\n  }\n\n  // Delete a task (called by Database page)\n  deleteTask(taskId) {\n    this.tasks = this.tasks.filter(t => t.id !== taskId);\n    console.log('GlobalTaskStore: Deleted task', taskId);\n    this.notify();\n  }\n\n  // Set instances (called by Database page)\n  setInstances(instances) {\n    console.log('GlobalTaskStore: Setting', instances.length, 'instances');\n    this.instances = instances;\n    this.notify();\n  }\n\n  // Update a single instance (called by Database page)\n  updateInstance(instanceId, updates) {\n    const instanceIndex = this.instances.findIndex(i => i.id === instanceId);\n    if (instanceIndex !== -1) {\n      this.instances[instanceIndex] = { ...this.instances[instanceIndex], ...updates };\n      console.log('GlobalTaskStore: Updated instance', instanceId, 'with', updates);\n      this.notify();\n    }\n  }\n\n  // Add a new instance (called by Database page)\n  addInstance(instance) {\n    this.instances.push(instance);\n    console.log('GlobalTaskStore: Added instance', instance.id);\n    this.notify();\n  }\n\n  // Delete an instance (called by Database page)\n  deleteInstance(instanceId) {\n    this.instances = this.instances.filter(i => i.id !== instanceId);\n    console.log('GlobalTaskStore: Deleted instance', instanceId);\n    this.notify();\n  }\n\n  setLoading(loading) {\n    this.isLoading = loading;\n    this.notify();\n  }\n}\n\n// Create singleton instance\nexport const globalTaskStore = new GlobalTaskStore();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}