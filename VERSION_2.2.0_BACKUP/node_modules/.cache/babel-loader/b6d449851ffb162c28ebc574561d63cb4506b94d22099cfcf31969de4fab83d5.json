{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @module GraphErrorHandler\n */\nimport { GraphError } from \"./GraphError\";\n/**\n * @class\n * Class for GraphErrorHandler\n */\nexport class GraphErrorHandler {\n  /**\n   * @private\n   * @static\n   * Populates the GraphError instance with Error instance values\n   * @param {Error} error - The error returned by graph service or some native error\n   * @param {number} [statusCode] - The status code of the response\n   * @returns The GraphError instance\n   */\n  static constructError(error, statusCode, rawResponse) {\n    const gError = new GraphError(statusCode, \"\", error);\n    if (error.name !== undefined) {\n      gError.code = error.name;\n    }\n    gError.body = error.toString();\n    gError.date = new Date();\n    gError.headers = rawResponse === null || rawResponse === void 0 ? void 0 : rawResponse.headers;\n    return gError;\n  }\n  /**\n   * @private\n   * @static\n   * @async\n   * Populates the GraphError instance from the Error returned by graph service\n   * @param {GraphAPIErrorResponse} graphError - The error possibly returned by graph service or some native error\n   * @param {number} statusCode - The status code of the response\n   * @returns A promise that resolves to GraphError instance\n   *\n   * Example error for https://graph.microsoft.com/v1.0/me/events?$top=3&$search=foo\n   * {\n   *      \"error\": {\n   *          \"code\": \"SearchEvents\",\n   *          \"message\": \"The parameter $search is not currently supported on the Events resource.\",\n   *          \"innerError\": {\n   *              \"request-id\": \"b31c83fd-944c-4663-aa50-5d9ceb367e19\",\n   *              \"date\": \"2016-11-17T18:37:45\"\n   *          }\n   *      }\n   *  }\n   */\n  static constructErrorFromResponse(graphError, statusCode, rawResponse) {\n    const error = graphError.error;\n    const gError = new GraphError(statusCode, error.message);\n    gError.code = error.code;\n    if (error.innerError !== undefined) {\n      gError.requestId = error.innerError[\"request-id\"];\n      gError.date = new Date(error.innerError.date);\n    }\n    gError.body = JSON.stringify(error);\n    gError.headers = rawResponse === null || rawResponse === void 0 ? void 0 : rawResponse.headers;\n    return gError;\n  }\n  /**\n   * @public\n   * @static\n   * @async\n   * To get the GraphError object\n   * Reference - https://docs.microsoft.com/en-us/graph/errors\n   * @param {any} [error = null] - The error returned by graph service or some native error\n   * @param {number} [statusCode = -1] - The status code of the response\n   * @param {GraphRequestCallback} [callback] - The graph request callback function\n   * @returns A promise that resolves to GraphError instance\n   */\n  static getError() {\n    let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let statusCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    let rawResponse = arguments.length > 3 ? arguments[3] : undefined;\n    return __awaiter(this, void 0, void 0, function* () {\n      let gError;\n      if (error && error.error) {\n        gError = GraphErrorHandler.constructErrorFromResponse(error, statusCode, rawResponse);\n      } else if (error instanceof Error) {\n        gError = GraphErrorHandler.constructError(error, statusCode, rawResponse);\n      } else {\n        gError = new GraphError(statusCode);\n        gError.body = error; // if a custom error is passed which is not instance of Error object or a graph API response\n      }\n      if (typeof callback === \"function\") {\n        callback(gError, null);\n      } else {\n        return gError;\n      }\n    });\n  }\n}","map":{"version":3,"names":["GraphError","GraphErrorHandler","constructError","error","statusCode","rawResponse","gError","name","undefined","code","body","toString","date","Date","headers","constructErrorFromResponse","graphError","message","innerError","requestId","JSON","stringify","getError","arguments","length","callback","Error"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/GraphErrorHandler.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module GraphErrorHandler\n */\n\nimport { GraphError } from \"./GraphError\";\nimport { GraphRequestCallback } from \"./IGraphRequestCallback\";\n\n/**\n * @interface\n * Signature for the json represent of the error response from the Graph API\n * https://docs.microsoft.com/en-us/graph/errors\n * @property {[key: string] : string | number} - The Key value pair\n */\ninterface GraphAPIErrorResponse {\n\terror: {\n\t\tcode: string;\n\t\tmessage: string;\n\t\tinnerError: any;\n\t};\n}\n\n/**\n * @class\n * Class for GraphErrorHandler\n */\n\nexport class GraphErrorHandler {\n\t/**\n\t * @private\n\t * @static\n\t * Populates the GraphError instance with Error instance values\n\t * @param {Error} error - The error returned by graph service or some native error\n\t * @param {number} [statusCode] - The status code of the response\n\t * @returns The GraphError instance\n\t */\n\tprivate static constructError(error: Error, statusCode?: number, rawResponse?: Response): GraphError {\n\t\tconst gError = new GraphError(statusCode, \"\", error);\n\t\tif (error.name !== undefined) {\n\t\t\tgError.code = error.name;\n\t\t}\n\t\tgError.body = error.toString();\n\t\tgError.date = new Date();\n\t\tgError.headers = rawResponse?.headers;\n\t\treturn gError;\n\t}\n\n\t/**\n\t * @private\n\t * @static\n\t * @async\n\t * Populates the GraphError instance from the Error returned by graph service\n\t * @param {GraphAPIErrorResponse} graphError - The error possibly returned by graph service or some native error\n\t * @param {number} statusCode - The status code of the response\n\t * @returns A promise that resolves to GraphError instance\n\t *\n\t * Example error for https://graph.microsoft.com/v1.0/me/events?$top=3&$search=foo\n\t * {\n\t *      \"error\": {\n\t *          \"code\": \"SearchEvents\",\n\t *          \"message\": \"The parameter $search is not currently supported on the Events resource.\",\n\t *          \"innerError\": {\n\t *              \"request-id\": \"b31c83fd-944c-4663-aa50-5d9ceb367e19\",\n\t *              \"date\": \"2016-11-17T18:37:45\"\n\t *          }\n\t *      }\n\t *  }\n\t */\n\tprivate static constructErrorFromResponse(graphError: GraphAPIErrorResponse, statusCode: number, rawResponse?: Response): GraphError {\n\t\tconst error = graphError.error;\n\t\tconst gError = new GraphError(statusCode, error.message);\n\t\tgError.code = error.code;\n\t\tif (error.innerError !== undefined) {\n\t\t\tgError.requestId = error.innerError[\"request-id\"];\n\t\t\tgError.date = new Date(error.innerError.date);\n\t\t}\n\n\t\tgError.body = JSON.stringify(error);\n\t\tgError.headers = rawResponse?.headers;\n\n\t\treturn gError;\n\t}\n\n\t/**\n\t * @public\n\t * @static\n\t * @async\n\t * To get the GraphError object\n\t * Reference - https://docs.microsoft.com/en-us/graph/errors\n\t * @param {any} [error = null] - The error returned by graph service or some native error\n\t * @param {number} [statusCode = -1] - The status code of the response\n\t * @param {GraphRequestCallback} [callback] - The graph request callback function\n\t * @returns A promise that resolves to GraphError instance\n\t */\n\tpublic static async getError(error: any = null, statusCode = -1, callback?: GraphRequestCallback, rawResponse?: Response): Promise<GraphError> {\n\t\tlet gError: GraphError;\n\t\tif (error && error.error) {\n\t\t\tgError = GraphErrorHandler.constructErrorFromResponse(error, statusCode, rawResponse);\n\t\t} else if (error instanceof Error) {\n\t\t\tgError = GraphErrorHandler.constructError(error, statusCode, rawResponse);\n\t\t} else {\n\t\t\tgError = new GraphError(statusCode);\n\t\t\tgError.body = error; // if a custom error is passed which is not instance of Error object or a graph API response\n\t\t}\n\t\tif (typeof callback === \"function\") {\n\t\t\tcallback(gError, null);\n\t\t} else {\n\t\t\treturn gError;\n\t\t}\n\t}\n}\n"],"mappings":"AAAA;;;;;;;AAOA;;;AAIA,SAASA,UAAU,QAAQ,cAAc;AAiBzC;;;;AAKA,OAAM,MAAOC,iBAAiB;EAC7B;;;;;;;;EAQQ,OAAOC,cAAcA,CAACC,KAAY,EAAEC,UAAmB,EAAEC,WAAsB;IACtF,MAAMC,MAAM,GAAG,IAAIN,UAAU,CAACI,UAAU,EAAE,EAAE,EAAED,KAAK,CAAC;IACpD,IAAIA,KAAK,CAACI,IAAI,KAAKC,SAAS,EAAE;MAC7BF,MAAM,CAACG,IAAI,GAAGN,KAAK,CAACI,IAAI;;IAEzBD,MAAM,CAACI,IAAI,GAAGP,KAAK,CAACQ,QAAQ,EAAE;IAC9BL,MAAM,CAACM,IAAI,GAAG,IAAIC,IAAI,EAAE;IACxBP,MAAM,CAACQ,OAAO,GAAGT,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,OAAO;IACrC,OAAOR,MAAM;EACd;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBQ,OAAOS,0BAA0BA,CAACC,UAAiC,EAAEZ,UAAkB,EAAEC,WAAsB;IACtH,MAAMF,KAAK,GAAGa,UAAU,CAACb,KAAK;IAC9B,MAAMG,MAAM,GAAG,IAAIN,UAAU,CAACI,UAAU,EAAED,KAAK,CAACc,OAAO,CAAC;IACxDX,MAAM,CAACG,IAAI,GAAGN,KAAK,CAACM,IAAI;IACxB,IAAIN,KAAK,CAACe,UAAU,KAAKV,SAAS,EAAE;MACnCF,MAAM,CAACa,SAAS,GAAGhB,KAAK,CAACe,UAAU,CAAC,YAAY,CAAC;MACjDZ,MAAM,CAACM,IAAI,GAAG,IAAIC,IAAI,CAACV,KAAK,CAACe,UAAU,CAACN,IAAI,CAAC;;IAG9CN,MAAM,CAACI,IAAI,GAAGU,IAAI,CAACC,SAAS,CAAClB,KAAK,CAAC;IACnCG,MAAM,CAACQ,OAAO,GAAGT,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,OAAO;IAErC,OAAOR,MAAM;EACd;EAEA;;;;;;;;;;;EAWO,OAAagB,QAAQA,CAAA,EAA4F;IAAA,IAA3FnB,KAAA,GAAAoB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAf,SAAA,GAAAe,SAAA,MAAa,IAAI;IAAA,IAAEnB,UAAU,GAAAmB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAf,SAAA,GAAAe,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEE,QAA+B,GAAAF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAf,SAAA;IAAA,IAAEH,WAAsB,GAAAkB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAf,SAAA;;MACvH,IAAIF,MAAkB;MACtB,IAAIH,KAAK,IAAIA,KAAK,CAACA,KAAK,EAAE;QACzBG,MAAM,GAAGL,iBAAiB,CAACc,0BAA0B,CAACZ,KAAK,EAAEC,UAAU,EAAEC,WAAW,CAAC;OACrF,MAAM,IAAIF,KAAK,YAAYuB,KAAK,EAAE;QAClCpB,MAAM,GAAGL,iBAAiB,CAACC,cAAc,CAACC,KAAK,EAAEC,UAAU,EAAEC,WAAW,CAAC;OACzE,MAAM;QACNC,MAAM,GAAG,IAAIN,UAAU,CAACI,UAAU,CAAC;QACnCE,MAAM,CAACI,IAAI,GAAGP,KAAK,CAAC,CAAC;;MAEtB,IAAI,OAAOsB,QAAQ,KAAK,UAAU,EAAE;QACnCA,QAAQ,CAACnB,MAAM,EAAE,IAAI,CAAC;OACtB,MAAM;QACN,OAAOA,MAAM;;IAEf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}