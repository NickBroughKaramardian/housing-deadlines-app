{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @module GraphRequest\n */\nimport { GraphClientError } from \"./GraphClientError\";\nimport { GraphErrorHandler } from \"./GraphErrorHandler\";\nimport { oDataQueryNames, serializeContent, urlJoin } from \"./GraphRequestUtil\";\nimport { GraphResponseHandler } from \"./GraphResponseHandler\";\nimport { MiddlewareControl } from \"./middleware/MiddlewareControl\";\nimport { RequestMethod } from \"./RequestMethod\";\nimport { ResponseType } from \"./ResponseType\";\n/**\n * @class\n * A Class representing GraphRequest\n */\nexport class GraphRequest {\n  /**\n   * @public\n   * @constructor\n   * Creates an instance of GraphRequest\n   * @param {HTTPClient} httpClient - The HTTPClient instance\n   * @param {ClientOptions} config - The options for making request\n   * @param {string} path - A path string\n   */\n  constructor(httpClient, config, path) {\n    /**\n     * @private\n     * Parses the path string and creates URLComponents out of it\n     * @param {string} path - The request path string\n     * @returns Nothing\n     */\n    this.parsePath = path => {\n      // Strips out the base of the url if they passed in\n      if (path.indexOf(\"https://\") !== -1) {\n        path = path.replace(\"https://\", \"\");\n        // Find where the host ends\n        const endOfHostStrPos = path.indexOf(\"/\");\n        if (endOfHostStrPos !== -1) {\n          // Parse out the host\n          this.urlComponents.host = \"https://\" + path.substring(0, endOfHostStrPos);\n          // Strip the host from path\n          path = path.substring(endOfHostStrPos + 1, path.length);\n        }\n        // Remove the following version\n        const endOfVersionStrPos = path.indexOf(\"/\");\n        if (endOfVersionStrPos !== -1) {\n          // Parse out the version\n          this.urlComponents.version = path.substring(0, endOfVersionStrPos);\n          // Strip version from path\n          path = path.substring(endOfVersionStrPos + 1, path.length);\n        }\n      }\n      // Strip out any leading \"/\"\n      if (path.charAt(0) === \"/\") {\n        path = path.substr(1);\n      }\n      const queryStrPos = path.indexOf(\"?\");\n      if (queryStrPos === -1) {\n        // No query string\n        this.urlComponents.path = path;\n      } else {\n        this.urlComponents.path = path.substr(0, queryStrPos);\n        // Capture query string into oDataQueryParams and otherURLQueryParams\n        const queryParams = path.substring(queryStrPos + 1, path.length).split(\"&\");\n        for (const queryParam of queryParams) {\n          this.parseQueryParameter(queryParam);\n        }\n      }\n    };\n    this.httpClient = httpClient;\n    this.config = config;\n    this.urlComponents = {\n      host: this.config.baseUrl,\n      version: this.config.defaultVersion,\n      oDataQueryParams: {},\n      otherURLQueryParams: {},\n      otherURLQueryOptions: []\n    };\n    this._headers = {};\n    this._options = {};\n    this._middlewareOptions = [];\n    this.parsePath(path);\n  }\n  /**\n   * @private\n   * Adds the query parameter as comma separated values\n   * @param {string} propertyName - The name of a property\n   * @param {string|string[]} propertyValue - The vale of a property\n   * @param {IArguments} additionalProperties - The additional properties\n   * @returns Nothing\n   */\n  addCsvQueryParameter(propertyName, propertyValue, additionalProperties) {\n    // If there are already $propertyName value there, append a \",\"\n    this.urlComponents.oDataQueryParams[propertyName] = this.urlComponents.oDataQueryParams[propertyName] ? this.urlComponents.oDataQueryParams[propertyName] + \",\" : \"\";\n    let allValues = [];\n    if (additionalProperties.length > 1 && typeof propertyValue === \"string\") {\n      allValues = Array.prototype.slice.call(additionalProperties);\n    } else if (typeof propertyValue === \"string\") {\n      allValues.push(propertyValue);\n    } else {\n      allValues = allValues.concat(propertyValue);\n    }\n    this.urlComponents.oDataQueryParams[propertyName] += allValues.join(\",\");\n  }\n  /**\n   * @private\n   * Builds the full url from the URLComponents to make a request\n   * @returns The URL string that is qualified to make a request to graph endpoint\n   */\n  buildFullUrl() {\n    const url = urlJoin([this.urlComponents.host, this.urlComponents.version, this.urlComponents.path]) + this.createQueryString();\n    if (this.config.debugLogging) {\n      console.log(url);\n    }\n    return url;\n  }\n  /**\n   * @private\n   * Builds the query string from the URLComponents\n   * @returns The Constructed query string\n   */\n  createQueryString() {\n    // Combining query params from oDataQueryParams and otherURLQueryParams\n    const urlComponents = this.urlComponents;\n    const query = [];\n    if (Object.keys(urlComponents.oDataQueryParams).length !== 0) {\n      for (const property in urlComponents.oDataQueryParams) {\n        if (Object.prototype.hasOwnProperty.call(urlComponents.oDataQueryParams, property)) {\n          query.push(property + \"=\" + urlComponents.oDataQueryParams[property]);\n        }\n      }\n    }\n    if (Object.keys(urlComponents.otherURLQueryParams).length !== 0) {\n      for (const property in urlComponents.otherURLQueryParams) {\n        if (Object.prototype.hasOwnProperty.call(urlComponents.otherURLQueryParams, property)) {\n          query.push(property + \"=\" + urlComponents.otherURLQueryParams[property]);\n        }\n      }\n    }\n    if (urlComponents.otherURLQueryOptions.length !== 0) {\n      for (const str of urlComponents.otherURLQueryOptions) {\n        query.push(str);\n      }\n    }\n    return query.length > 0 ? \"?\" + query.join(\"&\") : \"\";\n  }\n  /**\n   * @private\n   * Parses the query parameters to set the urlComponents property of the GraphRequest object\n   * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query parameter\n   * @returns The same GraphRequest instance that is being called with\n   */\n  parseQueryParameter(queryDictionaryOrString) {\n    if (typeof queryDictionaryOrString === \"string\") {\n      if (queryDictionaryOrString.charAt(0) === \"?\") {\n        queryDictionaryOrString = queryDictionaryOrString.substring(1);\n      }\n      if (queryDictionaryOrString.indexOf(\"&\") !== -1) {\n        const queryParams = queryDictionaryOrString.split(\"&\");\n        for (const str of queryParams) {\n          this.parseQueryParamenterString(str);\n        }\n      } else {\n        this.parseQueryParamenterString(queryDictionaryOrString);\n      }\n    } else if (queryDictionaryOrString.constructor === Object) {\n      for (const key in queryDictionaryOrString) {\n        if (Object.prototype.hasOwnProperty.call(queryDictionaryOrString, key)) {\n          this.setURLComponentsQueryParamater(key, queryDictionaryOrString[key]);\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * @private\n   * Parses the query parameter of string type to set the urlComponents property of the GraphRequest object\n   * @param {string} queryParameter - the query parameters\n   * returns nothing\n   */\n  parseQueryParamenterString(queryParameter) {\n    /* The query key-value pair must be split on the first equals sign to avoid errors in parsing nested query parameters.\n             Example-> \"/me?$expand=home($select=city)\" */\n    if (this.isValidQueryKeyValuePair(queryParameter)) {\n      const indexOfFirstEquals = queryParameter.indexOf(\"=\");\n      const paramKey = queryParameter.substring(0, indexOfFirstEquals);\n      const paramValue = queryParameter.substring(indexOfFirstEquals + 1);\n      this.setURLComponentsQueryParamater(paramKey, paramValue);\n    } else {\n      /* Push values which are not of key-value structure.\n      Example-> Handle an invalid input->.query(test), .query($select($select=name)) and let the Graph API respond with the error in the URL*/\n      this.urlComponents.otherURLQueryOptions.push(queryParameter);\n    }\n  }\n  /**\n   * @private\n   * Sets values into the urlComponents property of GraphRequest object.\n   * @param {string} paramKey - the query parameter key\n   * @param {string} paramValue - the query paramter value\n   * @returns nothing\n   */\n  setURLComponentsQueryParamater(paramKey, paramValue) {\n    if (oDataQueryNames.indexOf(paramKey) !== -1) {\n      const currentValue = this.urlComponents.oDataQueryParams[paramKey];\n      const isValueAppendable = currentValue && (paramKey === \"$expand\" || paramKey === \"$select\" || paramKey === \"$orderby\");\n      this.urlComponents.oDataQueryParams[paramKey] = isValueAppendable ? currentValue + \",\" + paramValue : paramValue;\n    } else {\n      this.urlComponents.otherURLQueryParams[paramKey] = paramValue;\n    }\n  }\n  /**\n   * @private\n   * Check if the query parameter string has a valid key-value structure\n   * @param {string} queryString - the query parameter string. Example -> \"name=value\"\n   * #returns true if the query string has a valid key-value structure else false\n   */\n  isValidQueryKeyValuePair(queryString) {\n    const indexofFirstEquals = queryString.indexOf(\"=\");\n    if (indexofFirstEquals === -1) {\n      return false;\n    }\n    const indexofOpeningParanthesis = queryString.indexOf(\"(\");\n    if (indexofOpeningParanthesis !== -1 && queryString.indexOf(\"(\") < indexofFirstEquals) {\n      // Example -> .query($select($expand=true));\n      return false;\n    }\n    return true;\n  }\n  /**\n   * @private\n   * Updates the custom headers and options for a request\n   * @param {FetchOptions} options - The request options object\n   * @returns Nothing\n   */\n  updateRequestOptions(options) {\n    const optionsHeaders = Object.assign({}, options.headers);\n    if (this.config.fetchOptions !== undefined) {\n      const fetchOptions = Object.assign({}, this.config.fetchOptions);\n      Object.assign(options, fetchOptions);\n      if (typeof this.config.fetchOptions.headers !== undefined) {\n        options.headers = Object.assign({}, this.config.fetchOptions.headers);\n      }\n    }\n    Object.assign(options, this._options);\n    if (options.headers !== undefined) {\n      Object.assign(optionsHeaders, options.headers);\n    }\n    Object.assign(optionsHeaders, this._headers);\n    options.headers = optionsHeaders;\n  }\n  /**\n   * @private\n   * @async\n   * Adds the custom headers and options to the request and makes the HTTPClient send request call\n   * @param {RequestInfo} request - The request url string or the Request object value\n   * @param {FetchOptions} options - The options to make a request\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the response content\n   */\n  send(request, options, callback) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      let rawResponse;\n      const middlewareControl = new MiddlewareControl(this._middlewareOptions);\n      this.updateRequestOptions(options);\n      const customHosts = (_a = this.config) === null || _a === void 0 ? void 0 : _a.customHosts;\n      try {\n        const context = yield this.httpClient.sendRequest({\n          request,\n          options,\n          middlewareControl,\n          customHosts\n        });\n        rawResponse = context.response;\n        const response = yield GraphResponseHandler.getResponse(rawResponse, this._responseType, callback);\n        return response;\n      } catch (error) {\n        if (error instanceof GraphClientError) {\n          throw error;\n        }\n        let statusCode;\n        if (rawResponse) {\n          statusCode = rawResponse.status;\n        }\n        const gError = yield GraphErrorHandler.getError(error, statusCode, callback, rawResponse);\n        throw gError;\n      }\n    });\n  }\n  /**\n   * @private\n   * Checks if the content-type is present in the _headers property. If not present, defaults the content-type to application/json\n   * @param none\n   * @returns nothing\n   */\n  setHeaderContentType() {\n    if (!this._headers) {\n      this.header(\"Content-Type\", \"application/json\");\n      return;\n    }\n    const headerKeys = Object.keys(this._headers);\n    for (const headerKey of headerKeys) {\n      if (headerKey.toLowerCase() === \"content-type\") {\n        return;\n      }\n    }\n    // Default the content-type to application/json in case the content-type is not present in the header\n    this.header(\"Content-Type\", \"application/json\");\n  }\n  /**\n   * @public\n   * Sets the custom header for a request\n   * @param {string} headerKey - A header key\n   * @param {string} headerValue - A header value\n   * @returns The same GraphRequest instance that is being called with\n   */\n  header(headerKey, headerValue) {\n    this._headers[headerKey] = headerValue;\n    return this;\n  }\n  /**\n   * @public\n   * Sets the custom headers for a request\n   * @param {KeyValuePairObjectStringNumber | HeadersInit} headers - The request headers\n   * @returns The same GraphRequest instance that is being called with\n   */\n  headers(headers) {\n    for (const key in headers) {\n      if (Object.prototype.hasOwnProperty.call(headers, key)) {\n        this._headers[key] = headers[key];\n      }\n    }\n    return this;\n  }\n  /**\n   * @public\n   * Sets the option for making a request\n   * @param {string} key - The key value\n   * @param {any} value - The value\n   * @returns The same GraphRequest instance that is being called with\n   */\n  option(key, value) {\n    this._options[key] = value;\n    return this;\n  }\n  /**\n   * @public\n   * Sets the options for making a request\n   * @param {{ [key: string]: any }} options - The options key value pair\n   * @returns The same GraphRequest instance that is being called with\n   */\n  options(options) {\n    for (const key in options) {\n      if (Object.prototype.hasOwnProperty.call(options, key)) {\n        this._options[key] = options[key];\n      }\n    }\n    return this;\n  }\n  /**\n   * @public\n   * Sets the middleware options for a request\n   * @param {MiddlewareOptions[]} options - The array of middleware options\n   * @returns The same GraphRequest instance that is being called with\n   */\n  middlewareOptions(options) {\n    this._middlewareOptions = options;\n    return this;\n  }\n  /**\n   * @public\n   * Sets the api endpoint version for a request\n   * @param {string} version - The version value\n   * @returns The same GraphRequest instance that is being called with\n   */\n  version(version) {\n    this.urlComponents.version = version;\n    return this;\n  }\n  /**\n   * @public\n   * Sets the api endpoint version for a request\n   * @param {ResponseType} responseType - The response type value\n   * @returns The same GraphRequest instance that is being called with\n   */\n  responseType(responseType) {\n    this._responseType = responseType;\n    return this;\n  }\n  /**\n   * @public\n   * To add properties for select OData Query param\n   * @param {string|string[]} properties - The Properties value\n   * @returns The same GraphRequest instance that is being called with, after adding the properties for $select query\n   */\n  /*\n   * Accepts .select(\"displayName,birthday\")\n   *     and .select([\"displayName\", \"birthday\"])\n   *     and .select(\"displayName\", \"birthday\")\n   *\n   */\n  select(properties) {\n    this.addCsvQueryParameter(\"$select\", properties, arguments);\n    return this;\n  }\n  /**\n   * @public\n   * To add properties for expand OData Query param\n   * @param {string|string[]} properties - The Properties value\n   * @returns The same GraphRequest instance that is being called with, after adding the properties for $expand query\n   */\n  expand(properties) {\n    this.addCsvQueryParameter(\"$expand\", properties, arguments);\n    return this;\n  }\n  /**\n   * @public\n   * To add properties for orderby OData Query param\n   * @param {string|string[]} properties - The Properties value\n   * @returns The same GraphRequest instance that is being called with, after adding the properties for $orderby query\n   */\n  orderby(properties) {\n    this.addCsvQueryParameter(\"$orderby\", properties, arguments);\n    return this;\n  }\n  /**\n   * @public\n   * To add query string for filter OData Query param. The request URL accepts only one $filter Odata Query option and its value is set to the most recently passed filter query string.\n   * @param {string} filterStr - The filter query string\n   * @returns The same GraphRequest instance that is being called with, after adding the $filter query\n   */\n  filter(filterStr) {\n    this.urlComponents.oDataQueryParams.$filter = filterStr;\n    return this;\n  }\n  /**\n   * @public\n   * To add criterion for search OData Query param. The request URL accepts only one $search Odata Query option and its value is set to the most recently passed search criterion string.\n   * @param {string} searchStr - The search criterion string\n   * @returns The same GraphRequest instance that is being called with, after adding the $search query criteria\n   */\n  search(searchStr) {\n    this.urlComponents.oDataQueryParams.$search = searchStr;\n    return this;\n  }\n  /**\n   * @public\n   * To add number for top OData Query param. The request URL accepts only one $top Odata Query option and its value is set to the most recently passed number value.\n   * @param {number} n - The number value\n   * @returns The same GraphRequest instance that is being called with, after adding the number for $top query\n   */\n  top(n) {\n    this.urlComponents.oDataQueryParams.$top = n;\n    return this;\n  }\n  /**\n   * @public\n   * To add number for skip OData Query param. The request URL accepts only one $skip Odata Query option and its value is set to the most recently passed number value.\n   * @param {number} n - The number value\n   * @returns The same GraphRequest instance that is being called with, after adding the number for the $skip query\n   */\n  skip(n) {\n    this.urlComponents.oDataQueryParams.$skip = n;\n    return this;\n  }\n  /**\n   * @public\n   * To add token string for skipToken OData Query param. The request URL accepts only one $skipToken Odata Query option and its value is set to the most recently passed token value.\n   * @param {string} token - The token value\n   * @returns The same GraphRequest instance that is being called with, after adding the token string for $skipToken query option\n   */\n  skipToken(token) {\n    this.urlComponents.oDataQueryParams.$skipToken = token;\n    return this;\n  }\n  /**\n   * @public\n   * To add boolean for count OData Query param. The URL accepts only one $count Odata Query option and its value is set to the most recently passed boolean value.\n   * @param {boolean} isCount - The count boolean\n   * @returns The same GraphRequest instance that is being called with, after adding the boolean value for the $count query option\n   */\n  count() {\n    let isCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.urlComponents.oDataQueryParams.$count = isCount.toString();\n    return this;\n  }\n  /**\n   * @public\n   * Appends query string to the urlComponent\n   * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query value\n   * @returns The same GraphRequest instance that is being called with, after appending the query string to the url component\n   */\n  /*\n   * Accepts .query(\"displayName=xyz\")\n   *     and .select({ name: \"value\" })\n   */\n  query(queryDictionaryOrString) {\n    return this.parseQueryParameter(queryDictionaryOrString);\n  }\n  /**\n   * @public\n   * @async\n   * Makes a http request with GET method\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the get response\n   */\n  get(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.GET\n      };\n      const response = yield this.send(url, options, callback);\n      return response;\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Makes a http request with POST method\n   * @param {any} content - The content that needs to be sent with the request\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the post response\n   */\n  post(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.POST,\n        body: serializeContent(content)\n      };\n      const className = content && content.constructor && content.constructor.name;\n      if (className === \"FormData\") {\n        // Content-Type headers should not be specified in case the of FormData type content\n        options.headers = {};\n      } else {\n        this.setHeaderContentType();\n        options.headers = this._headers;\n      }\n      return yield this.send(url, options, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Alias for Post request call\n   * @param {any} content - The content that needs to be sent with the request\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the post response\n   */\n  create(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.post(content, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Makes http request with PUT method\n   * @param {any} content - The content that needs to be sent with the request\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the put response\n   */\n  put(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      this.setHeaderContentType();\n      const options = {\n        method: RequestMethod.PUT,\n        body: serializeContent(content)\n      };\n      return yield this.send(url, options, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Makes http request with PATCH method\n   * @param {any} content - The content that needs to be sent with the request\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the patch response\n   */\n  patch(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      this.setHeaderContentType();\n      const options = {\n        method: RequestMethod.PATCH,\n        body: serializeContent(content)\n      };\n      return yield this.send(url, options, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Alias for PATCH request\n   * @param {any} content - The content that needs to be sent with the request\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the patch response\n   */\n  update(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.patch(content, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Makes http request with DELETE method\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the delete response\n   */\n  delete(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.DELETE\n      };\n      return yield this.send(url, options, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Alias for delete request call\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the delete response\n   */\n  del(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.delete(callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Makes a http request with GET method to read response as a stream.\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the getStream response\n   */\n  getStream(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.GET\n      };\n      this.responseType(ResponseType.STREAM);\n      return yield this.send(url, options, callback);\n    });\n  }\n  /**\n   * @public\n   * @async\n   * Makes a http request with GET method to read response as a stream.\n   * @param {any} stream - The stream instance\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n   * @returns A promise that resolves to the putStream response\n   */\n  putStream(stream, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.PUT,\n        headers: {\n          \"Content-Type\": \"application/octet-stream\"\n        },\n        body: stream\n      };\n      return yield this.send(url, options, callback);\n    });\n  }\n}","map":{"version":3,"names":["GraphClientError","GraphErrorHandler","oDataQueryNames","serializeContent","urlJoin","GraphResponseHandler","MiddlewareControl","RequestMethod","ResponseType","GraphRequest","constructor","httpClient","config","path","parsePath","indexOf","replace","endOfHostStrPos","urlComponents","host","substring","length","endOfVersionStrPos","version","charAt","substr","queryStrPos","queryParams","split","queryParam","parseQueryParameter","baseUrl","defaultVersion","oDataQueryParams","otherURLQueryParams","otherURLQueryOptions","_headers","_options","_middlewareOptions","addCsvQueryParameter","propertyName","propertyValue","additionalProperties","allValues","Array","prototype","slice","call","push","concat","join","buildFullUrl","url","createQueryString","debugLogging","console","log","query","Object","keys","property","hasOwnProperty","str","queryDictionaryOrString","parseQueryParamenterString","key","setURLComponentsQueryParamater","queryParameter","isValidQueryKeyValuePair","indexOfFirstEquals","paramKey","paramValue","currentValue","isValueAppendable","queryString","indexofFirstEquals","indexofOpeningParanthesis","updateRequestOptions","options","optionsHeaders","assign","headers","fetchOptions","undefined","send","request","callback","rawResponse","middlewareControl","customHosts","_a","context","sendRequest","response","getResponse","_responseType","error","statusCode","status","gError","getError","setHeaderContentType","header","headerKeys","headerKey","toLowerCase","headerValue","option","value","middlewareOptions","responseType","select","properties","arguments","expand","orderby","filter","filterStr","$filter","search","searchStr","$search","top","n","$top","skip","$skip","skipToken","token","$skipToken","count","isCount","$count","toString","get","method","GET","post","content","POST","body","className","name","create","put","PUT","patch","PATCH","update","delete","DELETE","del","getStream","STREAM","putStream","stream"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/GraphRequest.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module GraphRequest\n */\nimport { GraphClientError } from \"./GraphClientError\";\nimport { GraphError } from \"./GraphError\";\nimport { GraphErrorHandler } from \"./GraphErrorHandler\";\nimport { oDataQueryNames, serializeContent, urlJoin } from \"./GraphRequestUtil\";\nimport { GraphResponseHandler } from \"./GraphResponseHandler\";\nimport { HTTPClient } from \"./HTTPClient\";\nimport { ClientOptions } from \"./IClientOptions\";\nimport { Context } from \"./IContext\";\nimport { FetchOptions } from \"./IFetchOptions\";\nimport { GraphRequestCallback } from \"./IGraphRequestCallback\";\nimport { MiddlewareControl } from \"./middleware/MiddlewareControl\";\nimport { MiddlewareOptions } from \"./middleware/options/IMiddlewareOptions\";\nimport { RequestMethod } from \"./RequestMethod\";\nimport { ResponseType } from \"./ResponseType\";\n/**\n * @interface\n * Signature to representing key value pairs\n * @property {[key: string] : string | number} - The Key value pair\n */\ninterface KeyValuePairObjectStringNumber {\n\t[key: string]: string | number;\n}\n\n/**\n * @interface\n * Signature to define URL components\n * @template http://graph.microsoft.com/VERSION/PATH?QUERYSTRING&OTHER_QUERY_PARAMS\n *\n * @property {string} host - The host to which the request needs to be made\n * @property {string} version - Version of the graph endpoint\n * @property {string} [path] - The path of the resource request\n * @property {KeyValuePairObjectStringNumber} oDataQueryParams - The oData Query Params\n * @property {KeyValuePairObjectStringNumber} otherURLQueryParams - The other query params for a request\n * @property {string[]} otherURLQueryOptions - The non key-value query parameters. Example- '/me?$whatif'\n */\nexport interface URLComponents {\n\thost: string;\n\tversion: string;\n\tpath?: string;\n\toDataQueryParams: KeyValuePairObjectStringNumber;\n\totherURLQueryParams: KeyValuePairObjectStringNumber;\n\totherURLQueryOptions?: string[];\n}\n\n/**\n * @class\n * A Class representing GraphRequest\n */\nexport class GraphRequest {\n\t/**\n\t * @private\n\t * A member variable to hold HTTPClient instance\n\t */\n\tprivate httpClient: HTTPClient;\n\n\t/**\n\t * @private\n\t * A member variable to hold client options\n\t */\n\tprivate config: ClientOptions;\n\n\t/**\n\t * @private\n\t * A member to hold URL Components data\n\t */\n\tprivate urlComponents: URLComponents;\n\n\t/**\n\t * @private\n\t * A member to hold custom header options for a request\n\t */\n\tprivate _headers: HeadersInit;\n\n\t/**\n\t * @private\n\t * A member to hold custom options for a request\n\t */\n\tprivate _options: FetchOptions;\n\n\t/**\n\t * @private\n\t * A member to hold the array of middleware options for a request\n\t */\n\tprivate _middlewareOptions: MiddlewareOptions[];\n\n\t/**\n\t * @private\n\t * A member to hold custom response type for a request\n\t */\n\tprivate _responseType: ResponseType;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * Creates an instance of GraphRequest\n\t * @param {HTTPClient} httpClient - The HTTPClient instance\n\t * @param {ClientOptions} config - The options for making request\n\t * @param {string} path - A path string\n\t */\n\tpublic constructor(httpClient: HTTPClient, config: ClientOptions, path: string) {\n\t\tthis.httpClient = httpClient;\n\t\tthis.config = config;\n\t\tthis.urlComponents = {\n\t\t\thost: this.config.baseUrl,\n\t\t\tversion: this.config.defaultVersion,\n\t\t\toDataQueryParams: {},\n\t\t\totherURLQueryParams: {},\n\t\t\totherURLQueryOptions: [],\n\t\t};\n\t\tthis._headers = {};\n\t\tthis._options = {};\n\t\tthis._middlewareOptions = [];\n\t\tthis.parsePath(path);\n\t}\n\n\t/**\n\t * @private\n\t * Parses the path string and creates URLComponents out of it\n\t * @param {string} path - The request path string\n\t * @returns Nothing\n\t */\n\tprivate parsePath = (path: string): void => {\n\t\t// Strips out the base of the url if they passed in\n\t\tif (path.indexOf(\"https://\") !== -1) {\n\t\t\tpath = path.replace(\"https://\", \"\");\n\n\t\t\t// Find where the host ends\n\t\t\tconst endOfHostStrPos = path.indexOf(\"/\");\n\t\t\tif (endOfHostStrPos !== -1) {\n\t\t\t\t// Parse out the host\n\t\t\t\tthis.urlComponents.host = \"https://\" + path.substring(0, endOfHostStrPos);\n\t\t\t\t// Strip the host from path\n\t\t\t\tpath = path.substring(endOfHostStrPos + 1, path.length);\n\t\t\t}\n\n\t\t\t// Remove the following version\n\t\t\tconst endOfVersionStrPos = path.indexOf(\"/\");\n\t\t\tif (endOfVersionStrPos !== -1) {\n\t\t\t\t// Parse out the version\n\t\t\t\tthis.urlComponents.version = path.substring(0, endOfVersionStrPos);\n\t\t\t\t// Strip version from path\n\t\t\t\tpath = path.substring(endOfVersionStrPos + 1, path.length);\n\t\t\t}\n\t\t}\n\n\t\t// Strip out any leading \"/\"\n\t\tif (path.charAt(0) === \"/\") {\n\t\t\tpath = path.substr(1);\n\t\t}\n\n\t\tconst queryStrPos = path.indexOf(\"?\");\n\t\tif (queryStrPos === -1) {\n\t\t\t// No query string\n\t\t\tthis.urlComponents.path = path;\n\t\t} else {\n\t\t\tthis.urlComponents.path = path.substr(0, queryStrPos);\n\n\t\t\t// Capture query string into oDataQueryParams and otherURLQueryParams\n\t\t\tconst queryParams = path.substring(queryStrPos + 1, path.length).split(\"&\");\n\t\t\tfor (const queryParam of queryParams) {\n\t\t\t\tthis.parseQueryParameter(queryParam);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @private\n\t * Adds the query parameter as comma separated values\n\t * @param {string} propertyName - The name of a property\n\t * @param {string|string[]} propertyValue - The vale of a property\n\t * @param {IArguments} additionalProperties - The additional properties\n\t * @returns Nothing\n\t */\n\tprivate addCsvQueryParameter(propertyName: string, propertyValue: string | string[], additionalProperties: IArguments): void {\n\t\t// If there are already $propertyName value there, append a \",\"\n\t\tthis.urlComponents.oDataQueryParams[propertyName] = this.urlComponents.oDataQueryParams[propertyName] ? this.urlComponents.oDataQueryParams[propertyName] + \",\" : \"\";\n\n\t\tlet allValues: string[] = [];\n\n\t\tif (additionalProperties.length > 1 && typeof propertyValue === \"string\") {\n\t\t\tallValues = Array.prototype.slice.call(additionalProperties);\n\t\t} else if (typeof propertyValue === \"string\") {\n\t\t\tallValues.push(propertyValue);\n\t\t} else {\n\t\t\tallValues = allValues.concat(propertyValue);\n\t\t}\n\n\t\tthis.urlComponents.oDataQueryParams[propertyName] += allValues.join(\",\");\n\t}\n\n\t/**\n\t * @private\n\t * Builds the full url from the URLComponents to make a request\n\t * @returns The URL string that is qualified to make a request to graph endpoint\n\t */\n\tprivate buildFullUrl(): string {\n\t\tconst url = urlJoin([this.urlComponents.host, this.urlComponents.version, this.urlComponents.path]) + this.createQueryString();\n\n\t\tif (this.config.debugLogging) {\n\t\t\tconsole.log(url);\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * @private\n\t * Builds the query string from the URLComponents\n\t * @returns The Constructed query string\n\t */\n\tprivate createQueryString(): string {\n\t\t// Combining query params from oDataQueryParams and otherURLQueryParams\n\t\tconst urlComponents = this.urlComponents;\n\t\tconst query: string[] = [];\n\t\tif (Object.keys(urlComponents.oDataQueryParams).length !== 0) {\n\t\t\tfor (const property in urlComponents.oDataQueryParams) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(urlComponents.oDataQueryParams, property)) {\n\t\t\t\t\tquery.push(property + \"=\" + urlComponents.oDataQueryParams[property]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Object.keys(urlComponents.otherURLQueryParams).length !== 0) {\n\t\t\tfor (const property in urlComponents.otherURLQueryParams) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(urlComponents.otherURLQueryParams, property)) {\n\t\t\t\t\tquery.push(property + \"=\" + urlComponents.otherURLQueryParams[property]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (urlComponents.otherURLQueryOptions.length !== 0) {\n\t\t\tfor (const str of urlComponents.otherURLQueryOptions) {\n\t\t\t\tquery.push(str);\n\t\t\t}\n\t\t}\n\t\treturn query.length > 0 ? \"?\" + query.join(\"&\") : \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Parses the query parameters to set the urlComponents property of the GraphRequest object\n\t * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query parameter\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tprivate parseQueryParameter(queryDictionaryOrString: string | KeyValuePairObjectStringNumber): GraphRequest {\n\t\tif (typeof queryDictionaryOrString === \"string\") {\n\t\t\tif (queryDictionaryOrString.charAt(0) === \"?\") {\n\t\t\t\tqueryDictionaryOrString = queryDictionaryOrString.substring(1);\n\t\t\t}\n\n\t\t\tif (queryDictionaryOrString.indexOf(\"&\") !== -1) {\n\t\t\t\tconst queryParams = queryDictionaryOrString.split(\"&\");\n\t\t\t\tfor (const str of queryParams) {\n\t\t\t\t\tthis.parseQueryParamenterString(str);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.parseQueryParamenterString(queryDictionaryOrString);\n\t\t\t}\n\t\t} else if (queryDictionaryOrString.constructor === Object) {\n\t\t\tfor (const key in queryDictionaryOrString) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(queryDictionaryOrString, key)) {\n\t\t\t\t\tthis.setURLComponentsQueryParamater(key, queryDictionaryOrString[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * Parses the query parameter of string type to set the urlComponents property of the GraphRequest object\n\t * @param {string} queryParameter - the query parameters\n\t * returns nothing\n\t */\n\tprivate parseQueryParamenterString(queryParameter: string): void {\n\t\t/* The query key-value pair must be split on the first equals sign to avoid errors in parsing nested query parameters.\n                 Example-> \"/me?$expand=home($select=city)\" */\n\t\tif (this.isValidQueryKeyValuePair(queryParameter)) {\n\t\t\tconst indexOfFirstEquals = queryParameter.indexOf(\"=\");\n\t\t\tconst paramKey = queryParameter.substring(0, indexOfFirstEquals);\n\t\t\tconst paramValue = queryParameter.substring(indexOfFirstEquals + 1);\n\t\t\tthis.setURLComponentsQueryParamater(paramKey, paramValue);\n\t\t} else {\n\t\t\t/* Push values which are not of key-value structure.\n            Example-> Handle an invalid input->.query(test), .query($select($select=name)) and let the Graph API respond with the error in the URL*/\n\t\t\tthis.urlComponents.otherURLQueryOptions.push(queryParameter);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Sets values into the urlComponents property of GraphRequest object.\n\t * @param {string} paramKey - the query parameter key\n\t * @param {string} paramValue - the query paramter value\n\t * @returns nothing\n\t */\n\tprivate setURLComponentsQueryParamater(paramKey: string, paramValue: string | number): void {\n\t\tif (oDataQueryNames.indexOf(paramKey) !== -1) {\n\t\t\tconst currentValue = this.urlComponents.oDataQueryParams[paramKey];\n\t\t\tconst isValueAppendable = currentValue && (paramKey === \"$expand\" || paramKey === \"$select\" || paramKey === \"$orderby\");\n\t\t\tthis.urlComponents.oDataQueryParams[paramKey] = isValueAppendable ? currentValue + \",\" + paramValue : paramValue;\n\t\t} else {\n\t\t\tthis.urlComponents.otherURLQueryParams[paramKey] = paramValue;\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Check if the query parameter string has a valid key-value structure\n\t * @param {string} queryString - the query parameter string. Example -> \"name=value\"\n\t * #returns true if the query string has a valid key-value structure else false\n\t */\n\tprivate isValidQueryKeyValuePair(queryString: string): boolean {\n\t\tconst indexofFirstEquals = queryString.indexOf(\"=\");\n\t\tif (indexofFirstEquals === -1) {\n\t\t\treturn false;\n\t\t}\n\t\tconst indexofOpeningParanthesis = queryString.indexOf(\"(\");\n\t\tif (indexofOpeningParanthesis !== -1 && queryString.indexOf(\"(\") < indexofFirstEquals) {\n\t\t\t// Example -> .query($select($expand=true));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @private\n\t * Updates the custom headers and options for a request\n\t * @param {FetchOptions} options - The request options object\n\t * @returns Nothing\n\t */\n\tprivate updateRequestOptions(options: FetchOptions): void {\n\t\tconst optionsHeaders: HeadersInit = { ...options.headers };\n\t\tif (this.config.fetchOptions !== undefined) {\n\t\t\tconst fetchOptions: FetchOptions = { ...this.config.fetchOptions };\n\t\t\tObject.assign(options, fetchOptions);\n\t\t\tif (typeof this.config.fetchOptions.headers !== undefined) {\n\t\t\t\toptions.headers = { ...this.config.fetchOptions.headers };\n\t\t\t}\n\t\t}\n\t\tObject.assign(options, this._options);\n\t\tif (options.headers !== undefined) {\n\t\t\tObject.assign(optionsHeaders, options.headers);\n\t\t}\n\t\tObject.assign(optionsHeaders, this._headers);\n\t\toptions.headers = optionsHeaders;\n\t}\n\n\t/**\n\t * @private\n\t * @async\n\t * Adds the custom headers and options to the request and makes the HTTPClient send request call\n\t * @param {RequestInfo} request - The request url string or the Request object value\n\t * @param {FetchOptions} options - The options to make a request\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the response content\n\t */\n\tprivate async send(request: RequestInfo, options: FetchOptions, callback?: GraphRequestCallback): Promise<any> {\n\t\tlet rawResponse: Response;\n\t\tconst middlewareControl = new MiddlewareControl(this._middlewareOptions);\n\t\tthis.updateRequestOptions(options);\n\t\tconst customHosts = this.config?.customHosts;\n\t\ttry {\n\t\t\tconst context: Context = await this.httpClient.sendRequest({\n\t\t\t\trequest,\n\t\t\t\toptions,\n\t\t\t\tmiddlewareControl,\n\t\t\t\tcustomHosts,\n\t\t\t});\n\n\t\t\trawResponse = context.response;\n\t\t\tconst response: any = await GraphResponseHandler.getResponse(rawResponse, this._responseType, callback);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tif (error instanceof GraphClientError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tlet statusCode: number;\n\n\t\t\tif (rawResponse) {\n\t\t\t\tstatusCode = rawResponse.status;\n\t\t\t}\n\t\t\tconst gError: GraphError = await GraphErrorHandler.getError(error, statusCode, callback, rawResponse);\n\t\t\tthrow gError;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Checks if the content-type is present in the _headers property. If not present, defaults the content-type to application/json\n\t * @param none\n\t * @returns nothing\n\t */\n\tprivate setHeaderContentType(): void {\n\t\tif (!this._headers) {\n\t\t\tthis.header(\"Content-Type\", \"application/json\");\n\t\t\treturn;\n\t\t}\n\t\tconst headerKeys = Object.keys(this._headers);\n\t\tfor (const headerKey of headerKeys) {\n\t\t\tif (headerKey.toLowerCase() === \"content-type\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// Default the content-type to application/json in case the content-type is not present in the header\n\t\tthis.header(\"Content-Type\", \"application/json\");\n\t}\n\n\t/**\n\t * @public\n\t * Sets the custom header for a request\n\t * @param {string} headerKey - A header key\n\t * @param {string} headerValue - A header value\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic header(headerKey: string, headerValue: string): GraphRequest {\n\t\tthis._headers[headerKey] = headerValue;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets the custom headers for a request\n\t * @param {KeyValuePairObjectStringNumber | HeadersInit} headers - The request headers\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic headers(headers: KeyValuePairObjectStringNumber | HeadersInit): GraphRequest {\n\t\tfor (const key in headers) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(headers, key)) {\n\t\t\t\tthis._headers[key] = headers[key] as string;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets the option for making a request\n\t * @param {string} key - The key value\n\t * @param {any} value - The value\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic option(key: string, value: any): GraphRequest {\n\t\tthis._options[key] = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets the options for making a request\n\t * @param {{ [key: string]: any }} options - The options key value pair\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic options(options: { [key: string]: any }): GraphRequest {\n\t\tfor (const key in options) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(options, key)) {\n\t\t\t\tthis._options[key] = options[key];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets the middleware options for a request\n\t * @param {MiddlewareOptions[]} options - The array of middleware options\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic middlewareOptions(options: MiddlewareOptions[]): GraphRequest {\n\t\tthis._middlewareOptions = options;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets the api endpoint version for a request\n\t * @param {string} version - The version value\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic version(version: string): GraphRequest {\n\t\tthis.urlComponents.version = version;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets the api endpoint version for a request\n\t * @param {ResponseType} responseType - The response type value\n\t * @returns The same GraphRequest instance that is being called with\n\t */\n\tpublic responseType(responseType: ResponseType): GraphRequest {\n\t\tthis._responseType = responseType;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add properties for select OData Query param\n\t * @param {string|string[]} properties - The Properties value\n\t * @returns The same GraphRequest instance that is being called with, after adding the properties for $select query\n\t */\n\t/*\n\t * Accepts .select(\"displayName,birthday\")\n\t *     and .select([\"displayName\", \"birthday\"])\n\t *     and .select(\"displayName\", \"birthday\")\n\t *\n\t */\n\tpublic select(properties: string | string[]): GraphRequest {\n\t\tthis.addCsvQueryParameter(\"$select\", properties, arguments);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add properties for expand OData Query param\n\t * @param {string|string[]} properties - The Properties value\n\t * @returns The same GraphRequest instance that is being called with, after adding the properties for $expand query\n\t */\n\tpublic expand(properties: string | string[]): GraphRequest {\n\t\tthis.addCsvQueryParameter(\"$expand\", properties, arguments);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add properties for orderby OData Query param\n\t * @param {string|string[]} properties - The Properties value\n\t * @returns The same GraphRequest instance that is being called with, after adding the properties for $orderby query\n\t */\n\tpublic orderby(properties: string | string[]): GraphRequest {\n\t\tthis.addCsvQueryParameter(\"$orderby\", properties, arguments);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add query string for filter OData Query param. The request URL accepts only one $filter Odata Query option and its value is set to the most recently passed filter query string.\n\t * @param {string} filterStr - The filter query string\n\t * @returns The same GraphRequest instance that is being called with, after adding the $filter query\n\t */\n\tpublic filter(filterStr: string): GraphRequest {\n\t\tthis.urlComponents.oDataQueryParams.$filter = filterStr;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add criterion for search OData Query param. The request URL accepts only one $search Odata Query option and its value is set to the most recently passed search criterion string.\n\t * @param {string} searchStr - The search criterion string\n\t * @returns The same GraphRequest instance that is being called with, after adding the $search query criteria\n\t */\n\tpublic search(searchStr: string): GraphRequest {\n\t\tthis.urlComponents.oDataQueryParams.$search = searchStr;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add number for top OData Query param. The request URL accepts only one $top Odata Query option and its value is set to the most recently passed number value.\n\t * @param {number} n - The number value\n\t * @returns The same GraphRequest instance that is being called with, after adding the number for $top query\n\t */\n\tpublic top(n: number): GraphRequest {\n\t\tthis.urlComponents.oDataQueryParams.$top = n;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add number for skip OData Query param. The request URL accepts only one $skip Odata Query option and its value is set to the most recently passed number value.\n\t * @param {number} n - The number value\n\t * @returns The same GraphRequest instance that is being called with, after adding the number for the $skip query\n\t */\n\tpublic skip(n: number): GraphRequest {\n\t\tthis.urlComponents.oDataQueryParams.$skip = n;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add token string for skipToken OData Query param. The request URL accepts only one $skipToken Odata Query option and its value is set to the most recently passed token value.\n\t * @param {string} token - The token value\n\t * @returns The same GraphRequest instance that is being called with, after adding the token string for $skipToken query option\n\t */\n\tpublic skipToken(token: string): GraphRequest {\n\t\tthis.urlComponents.oDataQueryParams.$skipToken = token;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * To add boolean for count OData Query param. The URL accepts only one $count Odata Query option and its value is set to the most recently passed boolean value.\n\t * @param {boolean} isCount - The count boolean\n\t * @returns The same GraphRequest instance that is being called with, after adding the boolean value for the $count query option\n\t */\n\tpublic count(isCount = true): GraphRequest {\n\t\tthis.urlComponents.oDataQueryParams.$count = isCount.toString();\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Appends query string to the urlComponent\n\t * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query value\n\t * @returns The same GraphRequest instance that is being called with, after appending the query string to the url component\n\t */\n\t/*\n\t * Accepts .query(\"displayName=xyz\")\n\t *     and .select({ name: \"value\" })\n\t */\n\tpublic query(queryDictionaryOrString: string | KeyValuePairObjectStringNumber): GraphRequest {\n\t\treturn this.parseQueryParameter(queryDictionaryOrString);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes a http request with GET method\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the get response\n\t */\n\tpublic async get(callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tconst options: FetchOptions = {\n\t\t\tmethod: RequestMethod.GET,\n\t\t};\n\t\tconst response = await this.send(url, options, callback);\n\t\treturn response;\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes a http request with POST method\n\t * @param {any} content - The content that needs to be sent with the request\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the post response\n\t */\n\tpublic async post(content: any, callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tconst options: FetchOptions = {\n\t\t\tmethod: RequestMethod.POST,\n\t\t\tbody: serializeContent(content),\n\t\t};\n\t\tconst className: string = content && content.constructor && content.constructor.name;\n\t\tif (className === \"FormData\") {\n\t\t\t// Content-Type headers should not be specified in case the of FormData type content\n\t\t\toptions.headers = {};\n\t\t} else {\n\t\t\tthis.setHeaderContentType();\n\t\t\toptions.headers = this._headers;\n\t\t}\n\t\treturn await this.send(url, options, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Alias for Post request call\n\t * @param {any} content - The content that needs to be sent with the request\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the post response\n\t */\n\tpublic async create(content: any, callback?: GraphRequestCallback): Promise<any> {\n\t\treturn await this.post(content, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes http request with PUT method\n\t * @param {any} content - The content that needs to be sent with the request\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the put response\n\t */\n\tpublic async put(content: any, callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tthis.setHeaderContentType();\n\t\tconst options: FetchOptions = {\n\t\t\tmethod: RequestMethod.PUT,\n\t\t\tbody: serializeContent(content),\n\t\t};\n\t\treturn await this.send(url, options, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes http request with PATCH method\n\t * @param {any} content - The content that needs to be sent with the request\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the patch response\n\t */\n\tpublic async patch(content: any, callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tthis.setHeaderContentType();\n\t\tconst options: FetchOptions = {\n\t\t\tmethod: RequestMethod.PATCH,\n\t\t\tbody: serializeContent(content),\n\t\t};\n\t\treturn await this.send(url, options, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Alias for PATCH request\n\t * @param {any} content - The content that needs to be sent with the request\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the patch response\n\t */\n\tpublic async update(content: any, callback?: GraphRequestCallback): Promise<any> {\n\t\treturn await this.patch(content, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes http request with DELETE method\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the delete response\n\t */\n\tpublic async delete(callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tconst options: FetchOptions = {\n\t\t\tmethod: RequestMethod.DELETE,\n\t\t};\n\t\treturn await this.send(url, options, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Alias for delete request call\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the delete response\n\t */\n\tpublic async del(callback?: GraphRequestCallback): Promise<any> {\n\t\treturn await this.delete(callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes a http request with GET method to read response as a stream.\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the getStream response\n\t */\n\tpublic async getStream(callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tconst options = {\n\t\t\tmethod: RequestMethod.GET,\n\t\t};\n\t\tthis.responseType(ResponseType.STREAM);\n\t\treturn await this.send(url, options, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * Makes a http request with GET method to read response as a stream.\n\t * @param {any} stream - The stream instance\n\t * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\n\t * @returns A promise that resolves to the putStream response\n\t */\n\tpublic async putStream(stream: any, callback?: GraphRequestCallback): Promise<any> {\n\t\tconst url = this.buildFullUrl();\n\t\tconst options = {\n\t\t\tmethod: RequestMethod.PUT,\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/octet-stream\",\n\t\t\t},\n\t\t\tbody: stream,\n\t\t};\n\t\treturn await this.send(url, options, callback);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}