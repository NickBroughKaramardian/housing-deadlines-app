{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @constant\n * To generate the UUID\n * @returns The UUID string\n */\nexport const generateUUID = () => {\n  let uuid = \"\";\n  for (let j = 0; j < 32; j++) {\n    if (j === 8 || j === 12 || j === 16 || j === 20) {\n      uuid += \"-\";\n    }\n    uuid += Math.floor(Math.random() * 16).toString(16);\n  }\n  return uuid;\n};\n/**\n * @constant\n * To get the request header from the request\n * @param {RequestInfo} request - The request object or the url string\n * @param {FetchOptions|undefined} options - The request options object\n * @param {string} key - The header key string\n * @returns A header value for the given key from the request\n */\nexport const getRequestHeader = (request, options, key) => {\n  let value = null;\n  if (typeof Request !== \"undefined\" && request instanceof Request) {\n    value = request.headers.get(key);\n  } else if (typeof options !== \"undefined\" && options.headers !== undefined) {\n    if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n      value = options.headers.get(key);\n    } else if (options.headers instanceof Array) {\n      const headers = options.headers;\n      for (let i = 0, l = headers.length; i < l; i++) {\n        if (headers[i][0] === key) {\n          value = headers[i][1];\n          break;\n        }\n      }\n    } else if (options.headers[key] !== undefined) {\n      value = options.headers[key];\n    }\n  }\n  return value;\n};\n/**\n * @constant\n * To set the header value to the given request\n * @param {RequestInfo} request - The request object or the url string\n * @param {FetchOptions|undefined} options - The request options object\n * @param {string} key - The header key string\n * @param {string } value - The header value string\n * @returns Nothing\n */\nexport const setRequestHeader = (request, options, key, value) => {\n  if (typeof Request !== \"undefined\" && request instanceof Request) {\n    request.headers.set(key, value);\n  } else if (typeof options !== \"undefined\") {\n    if (options.headers === undefined) {\n      options.headers = new Headers({\n        [key]: value\n      });\n    } else {\n      if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n        options.headers.set(key, value);\n      } else if (options.headers instanceof Array) {\n        let i = 0;\n        const l = options.headers.length;\n        for (; i < l; i++) {\n          const header = options.headers[i];\n          if (header[0] === key) {\n            header[1] = value;\n            break;\n          }\n        }\n        if (i === l) {\n          options.headers.push([key, value]);\n        }\n      } else {\n        Object.assign(options.headers, {\n          [key]: value\n        });\n      }\n    }\n  }\n};\n/**\n * @constant\n * To append the header value to the given request\n * @param {RequestInfo} request - The request object or the url string\n * @param {FetchOptions|undefined} options - The request options object\n * @param {string} key - The header key string\n * @param {string } value - The header value string\n * @returns Nothing\n */\nexport const appendRequestHeader = (request, options, key, value) => {\n  if (typeof Request !== \"undefined\" && request instanceof Request) {\n    request.headers.append(key, value);\n  } else if (typeof options !== \"undefined\") {\n    if (options.headers === undefined) {\n      options.headers = new Headers({\n        [key]: value\n      });\n    } else {\n      if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n        options.headers.append(key, value);\n      } else if (options.headers instanceof Array) {\n        options.headers.push([key, value]);\n      } else if (options.headers === undefined) {\n        options.headers = {\n          [key]: value\n        };\n      } else if (options.headers[key] === undefined) {\n        options.headers[key] = value;\n      } else {\n        options.headers[key] += \", \".concat(value);\n      }\n    }\n  }\n};\n/**\n * @constant\n * To clone the request with the new url\n * @param {string} url - The new url string\n * @param {Request} request - The request object\n * @returns A promise that resolves to request object\n */\nexport const cloneRequestWithNewUrl = (newUrl, request) => __awaiter(void 0, void 0, void 0, function* () {\n  const body = request.headers.get(\"Content-Type\") ? yield request.blob() : yield Promise.resolve(undefined);\n  const {\n    method,\n    headers,\n    referrer,\n    referrerPolicy,\n    mode,\n    credentials,\n    cache,\n    redirect,\n    integrity,\n    keepalive,\n    signal\n  } = request;\n  return new Request(newUrl, {\n    method,\n    headers,\n    body,\n    referrer,\n    referrerPolicy,\n    mode,\n    credentials,\n    cache,\n    redirect,\n    integrity,\n    keepalive,\n    signal\n  });\n});","map":{"version":3,"names":["generateUUID","uuid","j","Math","floor","random","toString","getRequestHeader","request","options","key","value","Request","headers","get","undefined","Headers","Array","i","l","length","setRequestHeader","set","header","push","Object","assign","appendRequestHeader","append","concat","cloneRequestWithNewUrl","newUrl","__awaiter","body","blob","Promise","resolve","method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive","signal"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/middleware/MiddlewareUtil.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module MiddlewareUtil\n */\n\nimport { FetchOptions } from \"../IFetchOptions\";\n\n/**\n * @constant\n * To generate the UUID\n * @returns The UUID string\n */\nexport const generateUUID = (): string => {\n\tlet uuid = \"\";\n\tfor (let j = 0; j < 32; j++) {\n\t\tif (j === 8 || j === 12 || j === 16 || j === 20) {\n\t\t\tuuid += \"-\";\n\t\t}\n\t\tuuid += Math.floor(Math.random() * 16).toString(16);\n\t}\n\treturn uuid;\n};\n\n/**\n * @constant\n * To get the request header from the request\n * @param {RequestInfo} request - The request object or the url string\n * @param {FetchOptions|undefined} options - The request options object\n * @param {string} key - The header key string\n * @returns A header value for the given key from the request\n */\nexport const getRequestHeader = (request: RequestInfo, options: FetchOptions | undefined, key: string): string | null => {\n\tlet value: string = null;\n\tif (typeof Request !== \"undefined\" && request instanceof Request) {\n\t\tvalue = (request as Request).headers.get(key);\n\t} else if (typeof options !== \"undefined\" && options.headers !== undefined) {\n\t\tif (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n\t\t\tvalue = (options.headers as Headers).get(key);\n\t\t} else if (options.headers instanceof Array) {\n\t\t\tconst headers = options.headers as string[][];\n\t\t\tfor (let i = 0, l = headers.length; i < l; i++) {\n\t\t\t\tif (headers[i][0] === key) {\n\t\t\t\t\tvalue = headers[i][1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (options.headers[key] !== undefined) {\n\t\t\tvalue = options.headers[key];\n\t\t}\n\t}\n\treturn value;\n};\n\n/**\n * @constant\n * To set the header value to the given request\n * @param {RequestInfo} request - The request object or the url string\n * @param {FetchOptions|undefined} options - The request options object\n * @param {string} key - The header key string\n * @param {string } value - The header value string\n * @returns Nothing\n */\nexport const setRequestHeader = (request: RequestInfo, options: FetchOptions | undefined, key: string, value: string): void => {\n\tif (typeof Request !== \"undefined\" && request instanceof Request) {\n\t\t(request as Request).headers.set(key, value);\n\t} else if (typeof options !== \"undefined\") {\n\t\tif (options.headers === undefined) {\n\t\t\toptions.headers = new Headers({\n\t\t\t\t[key]: value,\n\t\t\t});\n\t\t} else {\n\t\t\tif (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n\t\t\t\t(options.headers as Headers).set(key, value);\n\t\t\t} else if (options.headers instanceof Array) {\n\t\t\t\tlet i = 0;\n\t\t\t\tconst l = options.headers.length;\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tconst header = options.headers[i];\n\t\t\t\t\tif (header[0] === key) {\n\t\t\t\t\t\theader[1] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (i === l) {\n\t\t\t\t\t(options.headers as string[][]).push([key, value]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tObject.assign(options.headers, { [key]: value });\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @constant\n * To append the header value to the given request\n * @param {RequestInfo} request - The request object or the url string\n * @param {FetchOptions|undefined} options - The request options object\n * @param {string} key - The header key string\n * @param {string } value - The header value string\n * @returns Nothing\n */\nexport const appendRequestHeader = (request: RequestInfo, options: FetchOptions | undefined, key: string, value: string): void => {\n\tif (typeof Request !== \"undefined\" && request instanceof Request) {\n\t\t(request as Request).headers.append(key, value);\n\t} else if (typeof options !== \"undefined\") {\n\t\tif (options.headers === undefined) {\n\t\t\toptions.headers = new Headers({\n\t\t\t\t[key]: value,\n\t\t\t});\n\t\t} else {\n\t\t\tif (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n\t\t\t\t(options.headers as Headers).append(key, value);\n\t\t\t} else if (options.headers instanceof Array) {\n\t\t\t\t(options.headers as string[][]).push([key, value]);\n\t\t\t} else if (options.headers === undefined) {\n\t\t\t\toptions.headers = { [key]: value };\n\t\t\t} else if (options.headers[key] === undefined) {\n\t\t\t\toptions.headers[key] = value;\n\t\t\t} else {\n\t\t\t\toptions.headers[key] += `, ${value}`;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @constant\n * To clone the request with the new url\n * @param {string} url - The new url string\n * @param {Request} request - The request object\n * @returns A promise that resolves to request object\n */\nexport const cloneRequestWithNewUrl = async (newUrl: string, request: Request): Promise<Request> => {\n\tconst body = request.headers.get(\"Content-Type\") ? await request.blob() : await Promise.resolve(undefined);\n\tconst { method, headers, referrer, referrerPolicy, mode, credentials, cache, redirect, integrity, keepalive, signal } = request;\n\treturn new Request(newUrl, { method, headers, body, referrer, referrerPolicy, mode, credentials, cache, redirect, integrity, keepalive, signal });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}