{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { __awaiter } from \"tslib\";\n/**\n * @class\n * Class representing HTTPClient\n */\nexport class HTTPClient {\n  /**\n   * @public\n   * @constructor\n   * Creates an instance of a HTTPClient\n   * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\n   */\n  constructor() {\n    for (var _len = arguments.length, middleware = new Array(_len), _key = 0; _key < _len; _key++) {\n      middleware[_key] = arguments[_key];\n    }\n    if (!middleware || !middleware.length) {\n      const error = new Error();\n      error.name = \"InvalidMiddlewareChain\";\n      error.message = \"Please provide a default middleware chain or custom middleware chain\";\n      throw error;\n    }\n    this.setMiddleware(...middleware);\n  }\n  /**\n   * @private\n   * Processes the middleware parameter passed to set this.middleware property\n   * The calling function should validate if middleware is not undefined or not empty.\n   * @param {...Middleware} middleware - The middleware passed\n   * @returns Nothing\n   */\n  setMiddleware() {\n    for (var _len2 = arguments.length, middleware = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      middleware[_key2] = arguments[_key2];\n    }\n    if (middleware.length > 1) {\n      this.parseMiddleWareArray(middleware);\n    } else {\n      this.middleware = middleware[0];\n    }\n  }\n  /**\n   * @private\n   * Processes the middleware array to construct the chain\n   * and sets this.middleware property to the first middleware handler of the array\n   * The calling function should validate if middleware is not undefined or not empty\n   * @param {Middleware[]} middlewareArray - The array of middleware handlers\n   * @returns Nothing\n   */\n  parseMiddleWareArray(middlewareArray) {\n    middlewareArray.forEach((element, index) => {\n      if (index < middlewareArray.length - 1) {\n        element.setNext(middlewareArray[index + 1]);\n      }\n    });\n    this.middleware = middlewareArray[0];\n  }\n  /**\n   * @public\n   * @async\n   * To send the request through the middleware chain\n   * @param {Context} context - The context of a request\n   * @returns A promise that resolves to the Context\n   */\n  sendRequest(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof context.request === \"string\" && context.options === undefined) {\n        const error = new Error();\n        error.name = \"InvalidRequestOptions\";\n        error.message = \"Unable to execute the middleware, Please provide valid options for a request\";\n        throw error;\n      }\n      yield this.middleware.execute(context);\n      return context;\n    });\n  }\n}","map":{"version":3,"names":["HTTPClient","constructor","_len","arguments","length","middleware","Array","_key","error","Error","name","message","setMiddleware","_len2","_key2","parseMiddleWareArray","middlewareArray","forEach","element","index","setNext","sendRequest","context","request","options","undefined","execute"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/HTTPClient.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module HTTPClient\n */\n\nimport { Context } from \"./IContext\";\nimport { Middleware } from \"./middleware/IMiddleware\";\n\n/**\n * @class\n * Class representing HTTPClient\n */\nexport class HTTPClient {\n\t/**\n\t * @private\n\t * A member holding first middleware of the middleware chain\n\t */\n\tprivate middleware: Middleware;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * Creates an instance of a HTTPClient\n\t * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\n\t */\n\tpublic constructor(...middleware: Middleware[]) {\n\t\tif (!middleware || !middleware.length) {\n\t\t\tconst error = new Error();\n\t\t\terror.name = \"InvalidMiddlewareChain\";\n\t\t\terror.message = \"Please provide a default middleware chain or custom middleware chain\";\n\t\t\tthrow error;\n\t\t}\n\t\tthis.setMiddleware(...middleware);\n\t}\n\n\t/**\n\t * @private\n\t * Processes the middleware parameter passed to set this.middleware property\n\t * The calling function should validate if middleware is not undefined or not empty.\n\t * @param {...Middleware} middleware - The middleware passed\n\t * @returns Nothing\n\t */\n\tprivate setMiddleware(...middleware: Middleware[]): void {\n\t\tif (middleware.length > 1) {\n\t\t\tthis.parseMiddleWareArray(middleware);\n\t\t} else {\n\t\t\tthis.middleware = middleware[0];\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Processes the middleware array to construct the chain\n\t * and sets this.middleware property to the first middleware handler of the array\n\t * The calling function should validate if middleware is not undefined or not empty\n\t * @param {Middleware[]} middlewareArray - The array of middleware handlers\n\t * @returns Nothing\n\t */\n\tprivate parseMiddleWareArray(middlewareArray: Middleware[]) {\n\t\tmiddlewareArray.forEach((element, index) => {\n\t\t\tif (index < middlewareArray.length - 1) {\n\t\t\t\telement.setNext(middlewareArray[index + 1]);\n\t\t\t}\n\t\t});\n\t\tthis.middleware = middlewareArray[0];\n\t}\n\n\t/**\n\t * @public\n\t * @async\n\t * To send the request through the middleware chain\n\t * @param {Context} context - The context of a request\n\t * @returns A promise that resolves to the Context\n\t */\n\tpublic async sendRequest(context: Context): Promise<Context> {\n\t\tif (typeof context.request === \"string\" && context.options === undefined) {\n\t\t\tconst error = new Error();\n\t\t\terror.name = \"InvalidRequestOptions\";\n\t\t\terror.message = \"Unable to execute the middleware, Please provide valid options for a request\";\n\t\t\tthrow error;\n\t\t}\n\t\tawait this.middleware.execute(context);\n\t\treturn context;\n\t}\n}\n"],"mappings":"AAAA;;;;;;;AAcA;;;;AAIA,OAAM,MAAOA,UAAU;EAOtB;;;;;;EAMAC,YAAA,EAA8C;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAxBC,UAAwB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAxBF,UAAwB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAC7C,IAAI,CAACF,UAAU,IAAI,CAACA,UAAU,CAACD,MAAM,EAAE;MACtC,MAAMI,KAAK,GAAG,IAAIC,KAAK,EAAE;MACzBD,KAAK,CAACE,IAAI,GAAG,wBAAwB;MACrCF,KAAK,CAACG,OAAO,GAAG,sEAAsE;MACtF,MAAMH,KAAK;;IAEZ,IAAI,CAACI,aAAa,CAAC,GAAGP,UAAU,CAAC;EAClC;EAEA;;;;;;;EAOQO,aAAaA,CAAA,EAA4B;IAAA,SAAAC,KAAA,GAAAV,SAAA,CAAAC,MAAA,EAAxBC,UAAwB,OAAAC,KAAA,CAAAO,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAxBT,UAAwB,CAAAS,KAAA,IAAAX,SAAA,CAAAW,KAAA;IAAA;IAChD,IAAIT,UAAU,CAACD,MAAM,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACW,oBAAoB,CAACV,UAAU,CAAC;KACrC,MAAM;MACN,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAC,CAAC,CAAC;;EAEjC;EAEA;;;;;;;;EAQQU,oBAAoBA,CAACC,eAA6B;IACzDA,eAAe,CAACC,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAI;MAC1C,IAAIA,KAAK,GAAGH,eAAe,CAACZ,MAAM,GAAG,CAAC,EAAE;QACvCc,OAAO,CAACE,OAAO,CAACJ,eAAe,CAACG,KAAK,GAAG,CAAC,CAAC,CAAC;;IAE7C,CAAC,CAAC;IACF,IAAI,CAACd,UAAU,GAAGW,eAAe,CAAC,CAAC,CAAC;EACrC;EAEA;;;;;;;EAOaK,WAAWA,CAACC,OAAgB;;MACxC,IAAI,OAAOA,OAAO,CAACC,OAAO,KAAK,QAAQ,IAAID,OAAO,CAACE,OAAO,KAAKC,SAAS,EAAE;QACzE,MAAMjB,KAAK,GAAG,IAAIC,KAAK,EAAE;QACzBD,KAAK,CAACE,IAAI,GAAG,uBAAuB;QACpCF,KAAK,CAACG,OAAO,GAAG,8EAA8E;QAC9F,MAAMH,KAAK;;MAEZ,MAAM,IAAI,CAACH,UAAU,CAACqB,OAAO,CAACJ,OAAO,CAAC;MACtC,OAAOA,OAAO;IACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}