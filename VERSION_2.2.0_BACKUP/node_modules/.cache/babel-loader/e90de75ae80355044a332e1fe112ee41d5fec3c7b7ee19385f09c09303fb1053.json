{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nimport { GraphClientError } from \"../../../GraphClientError\";\n/**\n * @class\n * Class used for creating LargeFileUploadTask fileobject.\n * This class accepts files of type ArrayBuffer, Blob, Uint8Array.\n */\nexport class FileUpload {\n  /**\n   * @public\n   * @constructor\n   * @param {ArrayBuffer | Blob | Uint8Array} content - The file to be uploaded\n   * @param {string} name - The name of the file to be uploaded\n   * @param {number} size - The total size of the file to be uploaded\n   * @returns An instance of the FileUpload class\n   */\n  constructor(content, name, size) {\n    this.content = content;\n    this.name = name;\n    this.size = size;\n    if (!content || !name || !size) {\n      throw new GraphClientError(\"Please provide the upload content, name of the file and size of the file\");\n    }\n  }\n  /**\n   * @public\n   * Slices the file content to the given range\n   * @param {Range} range - The range value\n   * @returns The sliced file part\n   */\n  sliceFile(range) {\n    return this.content.slice(range.minValue, range.maxValue + 1);\n  }\n}","map":{"version":3,"names":["GraphClientError","FileUpload","constructor","content","name","size","sliceFile","range","slice","minValue","maxValue"],"sources":["/Users/nic/housing-deadlines-app/node_modules/@microsoft/microsoft-graph-client/src/tasks/FileUploadTask/FileObjectClasses/FileUpload.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphClientError } from \"../../../GraphClientError\";\nimport { FileObject, SliceType } from \"../../LargeFileUploadTask\";\nimport { Range } from \"../Range\";\n\n/**\n * @class\n * Class used for creating LargeFileUploadTask fileobject.\n * This class accepts files of type ArrayBuffer, Blob, Uint8Array.\n */\nexport class FileUpload implements FileObject<SliceType> {\n\t/**\n\t * @public\n\t * @constructor\n\t * @param {ArrayBuffer | Blob | Uint8Array} content - The file to be uploaded\n\t * @param {string} name - The name of the file to be uploaded\n\t * @param {number} size - The total size of the file to be uploaded\n\t * @returns An instance of the FileUpload class\n\t */\n\tpublic constructor(public content: ArrayBuffer | Blob | Uint8Array, public name: string, public size: number) {\n\t\tif (!content || !name || !size) {\n\t\t\tthrow new GraphClientError(\"Please provide the upload content, name of the file and size of the file\");\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Slices the file content to the given range\n\t * @param {Range} range - The range value\n\t * @returns The sliced file part\n\t */\n\tpublic sliceFile(range: Range): ArrayBuffer | Blob | Uint8Array {\n\t\treturn this.content.slice(range.minValue, range.maxValue + 1);\n\t}\n}\n"],"mappings":"AAAA;;;;;;AAOA,SAASA,gBAAgB,QAAQ,2BAA2B;AAI5D;;;;;AAKA,OAAM,MAAOC,UAAU;EACtB;;;;;;;;EAQAC,YAA0BC,OAAwC,EAASC,IAAY,EAASC,IAAY;IAAlF,KAAAF,OAAO,GAAPA,OAAO;IAA0C,KAAAC,IAAI,GAAJA,IAAI;IAAiB,KAAAC,IAAI,GAAJA,IAAI;IACnG,IAAI,CAACF,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,IAAI,EAAE;MAC/B,MAAM,IAAIL,gBAAgB,CAAC,0EAA0E,CAAC;;EAExG;EAEA;;;;;;EAMOM,SAASA,CAACC,KAAY;IAC5B,OAAO,IAAI,CAACJ,OAAO,CAACK,KAAK,CAACD,KAAK,CAACE,QAAQ,EAAEF,KAAK,CAACG,QAAQ,GAAG,CAAC,CAAC;EAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}