import React, { useState, useEffect } from 'react';
import { microsoftDataService } from './microsoftDataService';
import { sharePointService } from './graphService';
import { debugSharePoint } from './debugSharePoint';

const Database = () => {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingCell, setEditingCell] = useState(null);
  const [selectedRows, setSelectedRows] = useState(new Set());
  const [profiles, setProfiles] = useState([]);
  const [showPeoplePicker, setShowPeoplePicker] = useState(false);
  const [peoplePickerTaskId, setPeoplePickerTaskId] = useState(null);
  const [selectedPeople, setSelectedPeople] = useState([]);
  const [peopleSearchTerm, setPeopleSearchTerm] = useState('');

  // Load real Microsoft users
  const loadProfiles = async () => {
    try {
      const users = await sharePointService.getUsers();
      const formattedProfiles = users.map(user => ({
        id: user.id,
        name: user.displayName,
        email: user.mail || user.userPrincipalName,
        department: user.department || 'No Department',
        jobTitle: user.jobTitle || '',
        initials: getInitials(user.displayName)
      }));
      setProfiles(formattedProfiles);
      console.log('Database: Loaded', formattedProfiles.length, 'profiles');
    } catch (err) {
      console.error('Database: Error loading profiles:', err);
      setProfiles([]);
    }
  };

  // Get initials from name
  const getInitials = (name) => {
    if (!name) return '?';
    const parts = name.trim().split(' ');
    if (parts.length === 1) return parts[0].charAt(0).toUpperCase();
    return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();
  };

  // Load tasks
  const loadTasks = async () => {
    try {
      setLoading(true);
      await debugSharePoint();
      const tasksData = await microsoftDataService.tasks.getAll();
      setTasks(tasksData);
      console.log('Database: Loaded', tasksData.length, 'tasks');
    } catch (err) {
      console.error('Database: Error loading tasks:', err);
      setError('Failed to load tasks from Microsoft Lists');
    } finally {
      setLoading(false);
    }
  };

  // Parse responsible party - SAFE version that handles any type
  const parseResponsibleParty = (rpValue) => {
    if (!rpValue) return [];
    
    // If it's already an array, return it
    if (Array.isArray(rpValue)) return rpValue;
    
    // If it's a string, split by semicolon
    if (typeof rpValue === 'string') {
      return rpValue.split(';').map(item => item.trim()).filter(item => item.length > 0);
    }
    
    // If it's an object, try to extract value
    if (typeof rpValue === 'object') {
      if (rpValue.lookupValue) return [rpValue.lookupValue];
      if (rpValue.Email) return [rpValue.Email];
      if (rpValue.title) return [rpValue.title];
    }
    
    // Fallback
    return [];
  };

  // Format responsible party array to string
  const formatResponsibleParty = (emails) => {
    if (!Array.isArray(emails)) return '';
    return emails.join('; ');
  };

  // Open people picker
  const openPeoplePicker = (taskId, currentValue) => {
    setPeoplePickerTaskId(taskId);
    setSelectedPeople(parseResponsibleParty(currentValue));
    setPeopleSearchTerm('');
    setShowPeoplePicker(true);
  };

  // Toggle person selection
  const togglePersonSelection = (personEmail) => {
    setSelectedPeople(prev => {
      if (prev.includes(personEmail)) {
        return prev.filter(email => email !== personEmail);
      } else {
        return [...prev, personEmail];
      }
    });
  };

  // Save people picker selection
  const savePeoplePickerSelection = async () => {
    if (peoplePickerTaskId) {
      const formattedValue = formatResponsibleParty(selectedPeople);
      await updateCell(peoplePickerTaskId, 'ResponsibleParty', formattedValue);
      // Refresh to show updated responsible party
      setTimeout(() => loadTasks(), 500);
    }
    setShowPeoplePicker(false);
    setPeoplePickerTaskId(null);
    setSelectedPeople([]);
  };

  // Update a single cell
  const updateCell = async (taskId, field, value) => {
    try {
      const task = tasks.find(t => t.id === taskId);
      if (!task) return;

      let processedValue = value;
      if (field === 'Recurring' || field === 'Completed') {
        processedValue = value === 'Yes';
      }

      const updatedTask = { ...task, [field]: processedValue };
      
      console.log('Database: Updating task:', taskId, field, '=', processedValue);
      
      await microsoftDataService.tasks.update(updatedTask);
      
      // Update local state immediately
      setTasks(prevTasks => 
        prevTasks.map(t => t.id === taskId ? updatedTask : t)
      );
      
      setEditingCell(null);
      console.log('Database: Cell updated successfully');
      
      // Refresh from SharePoint after a short delay to ensure consistency
      setTimeout(() => loadTasks(), 500);
    } catch (err) {
      console.error('Database: Error updating cell:', err);
      setError(`Failed to update: ${err.message}`);
    }
  };

  // Add new row
  const addNewRow = async () => {
    try {
      const newTask = {
        Task: 'New Task',
        Project: '',
        Deadline: new Date().toISOString().split('T')[0],
        ResponsibleParty: '',
        Recurring: false,
        Interval: '',
        FinalDate: '',
        Priority: 'Medium',
        Completed: false,
        Notes: '',
        Link: ''
      };

      const result = await microsoftDataService.tasks.add(newTask);
      setTasks(prevTasks => [...prevTasks, { ...newTask, id: result.id }]);
    } catch (err) {
      console.error('Database: Error adding row:', err);
      setError('Failed to add new task');
    }
  };

  // Delete row
  const deleteRow = async (taskId) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      try {
        await microsoftDataService.tasks.delete(taskId);
        setTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));
      } catch (err) {
        console.error('Database: Error deleting row:', err);
        setError('Failed to delete task');
      }
    }
  };

  // Handle row selection
  const handleRowSelect = (taskId, selected) => {
    const newSelected = new Set(selectedRows);
    if (selected) {
      newSelected.add(taskId);
    } else {
      newSelected.delete(taskId);
    }
    setSelectedRows(newSelected);
  };

  // Handle select all
  const handleSelectAll = (selected) => {
    if (selected) {
      setSelectedRows(new Set(tasks.map(task => task.id)));
    } else {
      setSelectedRows(new Set());
    }
  };

  // Calculate status
  const getCalculatedStatus = (task) => {
    if (task.Completed) return 'Completed';
    if (new Date(task.Deadline) < new Date()) return 'Overdue';
    return 'Active';
  };

  // Filter profiles
  const filteredProfiles = profiles.filter(profile => 
    profile.name.toLowerCase().includes(peopleSearchTerm.toLowerCase()) ||
    profile.email.toLowerCase().includes(peopleSearchTerm.toLowerCase())
  );

  useEffect(() => {
    loadProfiles();
    loadTasks();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="w-full px-4 py-8">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">Database Management</h1>
        </div>

        {error && (
          <div className="mb-6 bg-red-50 dark:bg-red-900/20 border border-red-200 rounded-lg p-4">
            <div className="flex justify-between">
              <p className="text-red-800 dark:text-red-200">{error}</p>
              <button onClick={() => setError(null)} className="text-red-600">✕</button>
            </div>
          </div>
        )}

        <div className="mb-6 flex justify-between">
          <div className="text-sm text-gray-600 dark:text-gray-400">{tasks.length} tasks • {profiles.length} users</div>
          <button onClick={addNewRow} className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium">Add New Row</button>
        </div>

        {/* People Picker Modal */}
        {showPeoplePicker && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] flex flex-col">
              <div className="p-6 border-b border-gray-200 dark:border-gray-700">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Select Responsible Party</h3>
                <input
                  type="text"
                  placeholder="Search users..."
                  value={peopleSearchTerm}
                  onChange={(e) => setPeopleSearchTerm(e.target.value)}
                  className="w-full px-4 py-2 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  autoFocus
                />
              </div>

              {selectedPeople.length > 0 && (
                <div className="p-4 border-b bg-blue-50 dark:bg-blue-900/20">
                  <div className="text-sm font-medium mb-2">Selected ({selectedPeople.length}):</div>
                  <div className="flex flex-wrap gap-2">
                    {selectedPeople.map(email => {
                      const profile = profiles.find(p => p.email === email);
                      return (
                        <div key={email} className="flex items-center bg-white dark:bg-gray-700 rounded-full px-3 py-1">
                          <div className="w-6 h-6 rounded-full bg-blue-500 text-white flex items-center justify-center text-xs font-semibold mr-2">
                            {profile?.initials || '?'}
                          </div>
                          <span className="text-sm mr-2">{profile?.name || email}</span>
                          <button onClick={() => togglePersonSelection(email)}>✕</button>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              <div className="flex-1 overflow-y-auto p-4">
                <div className="space-y-2">
                  {filteredProfiles.map(profile => {
                    const isSelected = selectedPeople.includes(profile.email);
                    return (
                      <div
                        key={profile.id}
                        onClick={() => togglePersonSelection(profile.email)}
                        className={`flex items-center p-3 rounded-lg cursor-pointer ${isSelected ? 'bg-blue-100 border-2 border-blue-500' : 'bg-gray-50 hover:bg-gray-100'}`}
                      >
                        <div className="w-10 h-10 rounded-full bg-blue-500 text-white flex items-center justify-center font-semibold mr-3">
                          {profile.initials}
                        </div>
                        <div className="flex-1">
                          <div className="text-sm font-medium">{profile.name}</div>
                          <div className="text-xs text-gray-500">{profile.email}</div>
                        </div>
                        {isSelected && <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white">✓</div>}
                      </div>
                    );
                  })}
                </div>
              </div>

              <div className="p-4 border-t flex justify-end gap-3">
                <button onClick={() => { setShowPeoplePicker(false); setPeoplePickerTaskId(null); setSelectedPeople([]); }} className="px-4 py-2 text-gray-600">Cancel</button>
                <button onClick={savePeoplePickerSelection} className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium">Save</button>
              </div>
            </div>
          </div>
        )}

        {/* Table */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-2 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-8">
                    <input type="checkbox" checked={selectedRows.size === tasks.length && tasks.length > 0} onChange={(e) => handleSelectAll(e.target.checked)} className="h-4 w-4" />
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[200px]">Task</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[150px]">Project</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[120px]">Deadline</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[200px]">Responsible Party</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[100px]">Recurring</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[100px]">Interval</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[120px]">Final Date</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[100px]">Priority</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[100px]">Status</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[100px]">Completed?</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[200px]">Notes</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[150px]">Link</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase min-w-[80px]">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {tasks.map((task) => {
                  const responsibleEmails = parseResponsibleParty(task.ResponsibleParty);
                  
                  return (
                    <tr key={task.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                      <td className="px-2 py-4"><input type="checkbox" checked={selectedRows.has(task.id)} onChange={(e) => handleRowSelect(task.id, e.target.checked)} className="h-4 w-4" /></td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Task` ? (
                          <input type="text" defaultValue={task.Task} onBlur={(e) => updateCell(task.id, 'Task', e.target.value)} onKeyPress={(e) => e.key === 'Enter' && updateCell(task.id, 'Task', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus />
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Task`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.Task || 'Click to edit'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Project` ? (
                          <input type="text" defaultValue={task.Project} onBlur={(e) => updateCell(task.id, 'Project', e.target.value)} onKeyPress={(e) => e.key === 'Enter' && updateCell(task.id, 'Project', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus />
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Project`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.Project || 'Click to edit'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Deadline` ? (
                          <input type="date" defaultValue={task.Deadline ? new Date(task.Deadline).toISOString().split('T')[0] : ''} onBlur={(e) => updateCell(task.id, 'Deadline', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus />
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Deadline`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.Deadline ? new Date(task.Deadline).toLocaleDateString() : 'Click'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        <div onClick={() => openPeoplePicker(task.id, task.ResponsibleParty)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm">
                          {responsibleEmails.length > 0 ? (
                            <div className="flex flex-wrap gap-1">
                              {responsibleEmails.map((email, idx) => {
                                // Ensure email is a string
                                const emailStr = String(email || '');
                                const profile = profiles.find(p => p.email === emailStr);
                                const displayName = profile?.name || (emailStr.includes('@') ? emailStr.split('@')[0] : emailStr);
                                return (
                                  <div key={idx} className="flex items-center bg-blue-100 dark:bg-blue-900/30 rounded-full px-2 py-1">
                                    <div className="w-5 h-5 rounded-full bg-blue-500 text-white flex items-center justify-center text-xs font-semibold mr-1">
                                      {profile?.initials || getInitials(displayName)}
                                    </div>
                                    <span className="text-xs text-gray-900 dark:text-white">{displayName}</span>
                                  </div>
                                );
                              })}
                            </div>
                          ) : (
                            <span className="text-gray-500">Click to assign</span>
                          )}
                        </div>
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Recurring` ? (
                          <select defaultValue={task.Recurring ? 'Yes' : 'No'} onChange={(e) => updateCell(task.id, 'Recurring', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus>
                            <option value="No">No</option>
                            <option value="Yes">Yes</option>
                          </select>
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Recurring`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.Recurring ? 'Yes' : 'No'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Interval` ? (
                          <select defaultValue={task.Interval} onChange={(e) => updateCell(task.id, 'Interval', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus>
                            <option value="">Select</option>
                            <option value="Daily">Daily</option>
                            <option value="Weekly">Weekly</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="Yearly">Yearly</option>
                          </select>
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Interval`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.Interval || 'Click'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-FinalDate` ? (
                          <input type="date" defaultValue={task.FinalDate ? new Date(task.FinalDate).toISOString().split('T')[0] : ''} onBlur={(e) => updateCell(task.id, 'FinalDate', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus />
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-FinalDate`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.FinalDate ? new Date(task.FinalDate).toLocaleDateString() : 'Click'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Priority` ? (
                          <select defaultValue={task.Priority} onChange={(e) => updateCell(task.id, 'Priority', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus>
                            <option value="Normal">Normal</option>
                            <option value="Urgent">Urgent</option>
                          </select>
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Priority`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm">
                            <span className={`px-2 py-1 text-xs rounded-full ${task.Priority === 'Urgent' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}`}>{task.Priority || 'Normal'}</span>
                          </div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        <span className={`px-2 py-1 text-xs rounded-full ${getCalculatedStatus(task) === 'Completed' ? 'bg-green-100 text-green-800' : getCalculatedStatus(task) === 'Overdue' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}`}>{getCalculatedStatus(task)}</span>
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Completed` ? (
                          <select defaultValue={task.Completed ? 'Yes' : 'No'} onChange={(e) => updateCell(task.id, 'Completed', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus>
                            <option value="No">No</option>
                            <option value="Yes">Yes</option>
                          </select>
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Completed`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white">{task.Completed ? 'Yes' : 'No'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Notes` ? (
                          <textarea defaultValue={task.Notes} onBlur={(e) => updateCell(task.id, 'Notes', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" rows={2} autoFocus />
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Notes`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm text-gray-900 dark:text-white truncate max-w-xs">{task.Notes || 'Click'}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        {editingCell === `${task.id}-Link` ? (
                          <input type="url" defaultValue={task.Link} onBlur={(e) => updateCell(task.id, 'Link', e.target.value)} className="w-full px-2 py-1 border rounded bg-white dark:bg-gray-700 text-sm" autoFocus />
                        ) : (
                          <div onClick={() => setEditingCell(`${task.id}-Link`)} className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded text-sm">{task.Link ? <a href={task.Link} target="_blank" rel="noopener noreferrer" className="text-blue-600" onClick={(e) => e.stopPropagation()}>Link</a> : <span className="text-gray-500">Click</span>}</div>
                        )}
                      </td>

                      <td className="px-3 py-4">
                        <button onClick={() => deleteRow(task.id)} className="text-red-600 hover:text-red-900 text-sm">Delete</button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Database;

// Log to understand: The ResponsibleParty field shows it's working in the console
// but the issue is SharePoint Person fields need LookupId format for updates
// For now, ResponsibleParty can be SET in SharePoint and will DISPLAY in the app
// but cannot be UPDATED from the app until we implement LookupId mapping
